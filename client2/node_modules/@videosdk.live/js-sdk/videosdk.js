/*! For license information please see videosdk.js.LICENSE.txt */
!(function (e, t) {
  if ("object" == typeof exports && "object" == typeof module)
    module.exports = t();
  else if ("function" == typeof define && define.amd) define([], t);
  else {
    var r = t();
    for (var n in r) ("object" == typeof exports ? exports : e)[n] = r[n];
  }
})(self, () =>
  (() => {
    var e = {
        7757: (e, t, r) => {
          e.exports = r(5666);
        },
        7150: (e, t, r) => {
          "use strict";
          r.d(t, { c: () => h });
          var n = r(5834),
            a = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            i = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            s = (function () {
              function e() {}
              return (
                (e.prototype.active = function () {
                  return n.I;
                }),
                (e.prototype.with = function (e, t, r) {
                  for (var n = [], s = 3; s < arguments.length; s++)
                    n[s - 3] = arguments[s];
                  return t.call.apply(t, i([r], a(n), !1));
                }),
                (e.prototype.bind = function (e, t) {
                  return t;
                }),
                (e.prototype.enable = function () {
                  return this;
                }),
                (e.prototype.disable = function () {
                  return this;
                }),
                e
              );
            })(),
            o = r(819),
            c = r(5774),
            d = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            u = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            l = "context",
            p = new s(),
            h = (function () {
              function e() {}
              return (
                (e.getInstance = function () {
                  return (
                    this._instance || (this._instance = new e()), this._instance
                  );
                }),
                (e.prototype.setGlobalContextManager = function (e) {
                  return (0, o.TG)(l, e, c.G.instance());
                }),
                (e.prototype.active = function () {
                  return this._getContextManager().active();
                }),
                (e.prototype.with = function (e, t, r) {
                  for (var n, a = [], i = 3; i < arguments.length; i++)
                    a[i - 3] = arguments[i];
                  return (n = this._getContextManager()).with.apply(
                    n,
                    u([e, t, r], d(a), !1)
                  );
                }),
                (e.prototype.bind = function (e, t) {
                  return this._getContextManager().bind(e, t);
                }),
                (e.prototype._getContextManager = function () {
                  return (0, o.Rd)(l) || p;
                }),
                (e.prototype.disable = function () {
                  this._getContextManager().disable(),
                    (0, o.J_)(l, c.G.instance());
                }),
                e
              );
            })();
        },
        5774: (e, t, r) => {
          "use strict";
          r.d(t, { G: () => l });
          var n = r(819),
            a = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            i = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            s = (function () {
              function e(e) {
                this._namespace = e.namespace || "DiagComponentLogger";
              }
              return (
                (e.prototype.debug = function () {
                  for (var e = [], t = 0; t < arguments.length; t++)
                    e[t] = arguments[t];
                  return o("debug", this._namespace, e);
                }),
                (e.prototype.error = function () {
                  for (var e = [], t = 0; t < arguments.length; t++)
                    e[t] = arguments[t];
                  return o("error", this._namespace, e);
                }),
                (e.prototype.info = function () {
                  for (var e = [], t = 0; t < arguments.length; t++)
                    e[t] = arguments[t];
                  return o("info", this._namespace, e);
                }),
                (e.prototype.warn = function () {
                  for (var e = [], t = 0; t < arguments.length; t++)
                    e[t] = arguments[t];
                  return o("warn", this._namespace, e);
                }),
                (e.prototype.verbose = function () {
                  for (var e = [], t = 0; t < arguments.length; t++)
                    e[t] = arguments[t];
                  return o("verbose", this._namespace, e);
                }),
                e
              );
            })();
          function o(e, t, r) {
            var s = (0, n.Rd)("diag");
            if (s) return r.unshift(t), s[e].apply(s, i([], a(r), !1));
          }
          var c = r(6740);
          var d = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            u = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            l = (function () {
              function e() {
                function e(e) {
                  return function () {
                    for (var t = [], r = 0; r < arguments.length; r++)
                      t[r] = arguments[r];
                    var a = (0, n.Rd)("diag");
                    if (a) return a[e].apply(a, u([], d(t), !1));
                  };
                }
                var t = this;
                (t.setLogger = function (e, r) {
                  var a, i, s;
                  if ((void 0 === r && (r = { logLevel: c.n.INFO }), e === t)) {
                    var o = new Error(
                      "Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation"
                    );
                    return (
                      t.error(
                        null !== (a = o.stack) && void 0 !== a ? a : o.message
                      ),
                      !1
                    );
                  }
                  "number" == typeof r && (r = { logLevel: r });
                  var d = (0, n.Rd)("diag"),
                    u = (function (e, t) {
                      function r(r, n) {
                        var a = t[r];
                        return "function" == typeof a && e >= n
                          ? a.bind(t)
                          : function () {};
                      }
                      return (
                        e < c.n.NONE
                          ? (e = c.n.NONE)
                          : e > c.n.ALL && (e = c.n.ALL),
                        (t = t || {}),
                        {
                          error: r("error", c.n.ERROR),
                          warn: r("warn", c.n.WARN),
                          info: r("info", c.n.INFO),
                          debug: r("debug", c.n.DEBUG),
                          verbose: r("verbose", c.n.VERBOSE),
                        }
                      );
                    })(
                      null !== (i = r.logLevel) && void 0 !== i ? i : c.n.INFO,
                      e
                    );
                  if (d && !r.suppressOverrideMessage) {
                    var l =
                      null !== (s = new Error().stack) && void 0 !== s
                        ? s
                        : "<failed to generate stacktrace>";
                    d.warn("Current logger will be overwritten from " + l),
                      u.warn(
                        "Current logger will overwrite one already registered from " +
                          l
                      );
                  }
                  return (0, n.TG)("diag", u, t, !0);
                }),
                  (t.disable = function () {
                    (0, n.J_)("diag", t);
                  }),
                  (t.createComponentLogger = function (e) {
                    return new s(e);
                  }),
                  (t.verbose = e("verbose")),
                  (t.debug = e("debug")),
                  (t.info = e("info")),
                  (t.warn = e("warn")),
                  (t.error = e("error"));
              }
              return (
                (e.instance = function () {
                  return (
                    this._instance || (this._instance = new e()), this._instance
                  );
                }),
                e
              );
            })();
        },
        2599: (e, t, r) => {
          "use strict";
          r.d(t, { u: () => u, H: () => d });
          var n = r(5774),
            a = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            i = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            s = (function () {
              function e(e) {
                this._entries = e ? new Map(e) : new Map();
              }
              return (
                (e.prototype.getEntry = function (e) {
                  var t = this._entries.get(e);
                  if (t) return Object.assign({}, t);
                }),
                (e.prototype.getAllEntries = function () {
                  return Array.from(this._entries.entries()).map(function (e) {
                    var t = a(e, 2);
                    return [t[0], t[1]];
                  });
                }),
                (e.prototype.setEntry = function (t, r) {
                  var n = new e(this._entries);
                  return n._entries.set(t, r), n;
                }),
                (e.prototype.removeEntry = function (t) {
                  var r = new e(this._entries);
                  return r._entries.delete(t), r;
                }),
                (e.prototype.removeEntries = function () {
                  for (var t, r, n = [], a = 0; a < arguments.length; a++)
                    n[a] = arguments[a];
                  var s = new e(this._entries);
                  try {
                    for (var o = i(n), c = o.next(); !c.done; c = o.next()) {
                      var d = c.value;
                      s._entries.delete(d);
                    }
                  } catch (e) {
                    t = { error: e };
                  } finally {
                    try {
                      c && !c.done && (r = o.return) && r.call(o);
                    } finally {
                      if (t) throw t.error;
                    }
                  }
                  return s;
                }),
                (e.prototype.clear = function () {
                  return new e();
                }),
                e
              );
            })(),
            o = Symbol("BaggageEntryMetadata"),
            c = n.G.instance();
          function d(e) {
            return void 0 === e && (e = {}), new s(new Map(Object.entries(e)));
          }
          function u(e) {
            return (
              "string" != typeof e &&
                (c.error(
                  "Cannot create baggage metadata from unknown type: " +
                    typeof e
                ),
                (e = "")),
              {
                __TYPE__: o,
                toString: function () {
                  return e;
                },
              }
            );
          }
        },
        6339: (e, t, r) => {
          "use strict";
          r.d(t, { D: () => n });
          var n = r(7150).c.getInstance();
        },
        5834: (e, t, r) => {
          "use strict";
          function n(e) {
            return Symbol.for(e);
          }
          r.d(t, { I: () => a, Y: () => n });
          var a = new (function e(t) {
            var r = this;
            (r._currentContext = t ? new Map(t) : new Map()),
              (r.getValue = function (e) {
                return r._currentContext.get(e);
              }),
              (r.setValue = function (t, n) {
                var a = new e(r._currentContext);
                return a._currentContext.set(t, n), a;
              }),
              (r.deleteValue = function (t) {
                var n = new e(r._currentContext);
                return n._currentContext.delete(t), n;
              });
          })();
        },
        928: (e, t, r) => {
          "use strict";
          r.d(t, { K: () => n });
          var n = r(5774).G.instance();
        },
        6740: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { n: () => n }),
            (function (e) {
              (e[(e.NONE = 0)] = "NONE"),
                (e[(e.ERROR = 30)] = "ERROR"),
                (e[(e.WARN = 50)] = "WARN"),
                (e[(e.INFO = 60)] = "INFO"),
                (e[(e.DEBUG = 70)] = "DEBUG"),
                (e[(e.VERBOSE = 80)] = "VERBOSE"),
                (e[(e.ALL = 9999)] = "ALL");
            })(n || (n = {}));
        },
        4284: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              DiagConsoleLogger: () => c,
              DiagLogLevel: () => d.n,
              INVALID_SPANID: () => G.fQ,
              INVALID_SPAN_CONTEXT: () => G.Rr,
              INVALID_TRACEID: () => G.AE,
              ProxyTracer: () => k.T,
              ProxyTracerProvider: () => C.K,
              ROOT_CONTEXT: () => s.I,
              SamplingDecision: () => I.U,
              SpanKind: () => L.M,
              SpanStatusCode: () => D.Q,
              TraceFlags: () => A.r,
              ValueType: () => a,
              baggageEntryMetadataFromString: () => i.u,
              context: () => V.D,
              createContextKey: () => s.Y,
              createNoopMeter: () => P,
              createTraceState: () => U,
              default: () => J,
              defaultTextMapGetter: () => O.r,
              defaultTextMapSetter: () => O.M,
              diag: () => Z.K,
              isSpanContextValid: () => F.BM,
              isValidSpanId: () => F.Lc,
              isValidTraceId: () => F.jN,
              metrics: () => X,
              propagation: () => q.u,
              trace: () => $.g,
            });
          var n,
            a,
            i = r(2599),
            s = r(5834),
            o = [
              { n: "error", c: "error" },
              { n: "warn", c: "warn" },
              { n: "info", c: "info" },
              { n: "debug", c: "debug" },
              { n: "verbose", c: "trace" },
            ],
            c = function () {
              function e(e) {
                return function () {
                  for (var t = [], r = 0; r < arguments.length; r++)
                    t[r] = arguments[r];
                  if (console) {
                    var n = console[e];
                    if (
                      ("function" != typeof n && (n = console.log),
                      "function" == typeof n)
                    )
                      return n.apply(console, t);
                  }
                };
              }
              for (var t = 0; t < o.length; t++) this[o[t].n] = e(o[t].c);
            },
            d = r(6740),
            u =
              ((n = function (e, t) {
                return (
                  (n =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                      function (e, t) {
                        e.__proto__ = t;
                      }) ||
                    function (e, t) {
                      for (var r in t)
                        Object.prototype.hasOwnProperty.call(t, r) &&
                          (e[r] = t[r]);
                    }),
                  n(e, t)
                );
              }),
              function (e, t) {
                if ("function" != typeof t && null !== t)
                  throw new TypeError(
                    "Class extends value " +
                      String(t) +
                      " is not a constructor or null"
                  );
                function r() {
                  this.constructor = e;
                }
                n(e, t),
                  (e.prototype =
                    null === t
                      ? Object.create(t)
                      : ((r.prototype = t.prototype), new r()));
              }),
            l = (function () {
              function e() {}
              return (
                (e.prototype.createHistogram = function (e, t) {
                  return E;
                }),
                (e.prototype.createCounter = function (e, t) {
                  return x;
                }),
                (e.prototype.createUpDownCounter = function (e, t) {
                  return T;
                }),
                (e.prototype.createObservableGauge = function (e, t) {
                  return w;
                }),
                (e.prototype.createObservableCounter = function (e, t) {
                  return S;
                }),
                (e.prototype.createObservableUpDownCounter = function (e, t) {
                  return R;
                }),
                (e.prototype.addBatchObservableCallback = function (e, t) {}),
                (e.prototype.removeBatchObservableCallback = function (e) {}),
                e
              );
            })(),
            p = function () {},
            h = (function (e) {
              function t() {
                return (null !== e && e.apply(this, arguments)) || this;
              }
              return u(t, e), (t.prototype.add = function (e, t) {}), t;
            })(p),
            _ = (function (e) {
              function t() {
                return (null !== e && e.apply(this, arguments)) || this;
              }
              return u(t, e), (t.prototype.add = function (e, t) {}), t;
            })(p),
            f = (function (e) {
              function t() {
                return (null !== e && e.apply(this, arguments)) || this;
              }
              return u(t, e), (t.prototype.record = function (e, t) {}), t;
            })(p),
            m = (function () {
              function e() {}
              return (
                (e.prototype.addCallback = function (e) {}),
                (e.prototype.removeCallback = function (e) {}),
                e
              );
            })(),
            v = (function (e) {
              function t() {
                return (null !== e && e.apply(this, arguments)) || this;
              }
              return u(t, e), t;
            })(m),
            g = (function (e) {
              function t() {
                return (null !== e && e.apply(this, arguments)) || this;
              }
              return u(t, e), t;
            })(m),
            y = (function (e) {
              function t() {
                return (null !== e && e.apply(this, arguments)) || this;
              }
              return u(t, e), t;
            })(m),
            b = new l(),
            x = new h(),
            E = new f(),
            T = new _(),
            S = new v(),
            w = new g(),
            R = new y();
          function P() {
            return b;
          }
          !(function (e) {
            (e[(e.INT = 0)] = "INT"), (e[(e.DOUBLE = 1)] = "DOUBLE");
          })(a || (a = {}));
          var O = r(7008),
            k = r(9953),
            C = r(5236),
            I = r(2297),
            L = r(87),
            D = r(1820),
            A = r(8726),
            M = new RegExp(
              "^(?:[a-z][_0-9a-z-*/]{0,255}|[a-z0-9][_0-9a-z-*/]{0,240}@[a-z][_0-9a-z-*/]{0,13})$"
            ),
            N = /^[ -~]{0,255}[!-~]$/,
            j = /,|=/;
          var B = (function () {
            function e(e) {
              (this._internalState = new Map()), e && this._parse(e);
            }
            return (
              (e.prototype.set = function (e, t) {
                var r = this._clone();
                return (
                  r._internalState.has(e) && r._internalState.delete(e),
                  r._internalState.set(e, t),
                  r
                );
              }),
              (e.prototype.unset = function (e) {
                var t = this._clone();
                return t._internalState.delete(e), t;
              }),
              (e.prototype.get = function (e) {
                return this._internalState.get(e);
              }),
              (e.prototype.serialize = function () {
                var e = this;
                return this._keys()
                  .reduce(function (t, r) {
                    return t.push(r + "=" + e.get(r)), t;
                  }, [])
                  .join(",");
              }),
              (e.prototype._parse = function (e) {
                e.length > 512 ||
                  ((this._internalState = e
                    .split(",")
                    .reverse()
                    .reduce(function (e, t) {
                      var r = t.trim(),
                        n = r.indexOf("=");
                      if (-1 !== n) {
                        var a = r.slice(0, n),
                          i = r.slice(n + 1, t.length);
                        (function (e) {
                          return M.test(e);
                        })(a) &&
                          (function (e) {
                            return N.test(e) && !j.test(e);
                          })(i) &&
                          e.set(a, i);
                      }
                      return e;
                    }, new Map())),
                  this._internalState.size > 32 &&
                    (this._internalState = new Map(
                      Array.from(this._internalState.entries())
                        .reverse()
                        .slice(0, 32)
                    )));
              }),
              (e.prototype._keys = function () {
                return Array.from(this._internalState.keys()).reverse();
              }),
              (e.prototype._clone = function () {
                var t = new e();
                return (t._internalState = new Map(this._internalState)), t;
              }),
              e
            );
          })();
          function U(e) {
            return new B(e);
          }
          var F = r(7228),
            G = r(7007),
            V = r(6339),
            Z = r(928),
            H = new ((function () {
              function e() {}
              return (
                (e.prototype.getMeter = function (e, t, r) {
                  return b;
                }),
                e
              );
            })())(),
            W = r(819),
            z = r(5774),
            K = "metrics",
            X = (function () {
              function e() {}
              return (
                (e.getInstance = function () {
                  return (
                    this._instance || (this._instance = new e()), this._instance
                  );
                }),
                (e.prototype.setGlobalMeterProvider = function (e) {
                  return (0, W.TG)(K, e, z.G.instance());
                }),
                (e.prototype.getMeterProvider = function () {
                  return (0, W.Rd)(K) || H;
                }),
                (e.prototype.getMeter = function (e, t, r) {
                  return this.getMeterProvider().getMeter(e, t, r);
                }),
                (e.prototype.disable = function () {
                  (0, W.J_)(K, z.G.instance());
                }),
                e
              );
            })().getInstance(),
            q = r(8303),
            $ = r(2210);
          const J = {
            context: V.D,
            diag: Z.K,
            metrics: X,
            propagation: q.u,
            trace: $.g,
          };
        },
        819: (e, t, r) => {
          "use strict";
          r.d(t, { Rd: () => l, TG: () => u, J_: () => p });
          var n =
              "object" == typeof globalThis
                ? globalThis
                : "object" == typeof self
                ? self
                : "object" == typeof window
                ? window
                : "object" == typeof r.g
                ? r.g
                : {},
            a = "1.4.1",
            i = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
          var s = (function (e) {
              var t = new Set([e]),
                r = new Set(),
                n = e.match(i);
              if (!n)
                return function () {
                  return !1;
                };
              var a = +n[1],
                s = +n[2],
                o = +n[3];
              if (null != n[4])
                return function (t) {
                  return t === e;
                };
              function c(e) {
                return r.add(e), !1;
              }
              function d(e) {
                return t.add(e), !0;
              }
              return function (e) {
                if (t.has(e)) return !0;
                if (r.has(e)) return !1;
                var n = e.match(i);
                if (!n) return c(e);
                var u = +n[1],
                  l = +n[2],
                  p = +n[3];
                return null != n[4] || a !== u
                  ? c(e)
                  : 0 === a
                  ? s === l && o <= p
                    ? d(e)
                    : c(e)
                  : s <= l
                  ? d(e)
                  : c(e);
              };
            })(a),
            o = a.split(".")[0],
            c = Symbol.for("opentelemetry.js.api." + o),
            d = n;
          function u(e, t, r, n) {
            var i;
            void 0 === n && (n = !1);
            var s = (d[c] =
              null !== (i = d[c]) && void 0 !== i ? i : { version: a });
            if (!n && s[e]) {
              var o = new Error(
                "@opentelemetry/api: Attempted duplicate registration of API: " +
                  e
              );
              return r.error(o.stack || o.message), !1;
            }
            if (s.version !== a) {
              o = new Error(
                "@opentelemetry/api: Registration of version v" +
                  s.version +
                  " for " +
                  e +
                  " does not match previously registered API v" +
                  a
              );
              return r.error(o.stack || o.message), !1;
            }
            return (
              (s[e] = t),
              r.debug(
                "@opentelemetry/api: Registered a global for " +
                  e +
                  " v" +
                  "1.4.1."
              ),
              !0
            );
          }
          function l(e) {
            var t,
              r,
              n = null === (t = d[c]) || void 0 === t ? void 0 : t.version;
            if (n && s(n))
              return null === (r = d[c]) || void 0 === r ? void 0 : r[e];
          }
          function p(e, t) {
            t.debug(
              "@opentelemetry/api: Unregistering a global for " +
                e +
                " v" +
                "1.4.1."
            );
            var r = d[c];
            r && delete r[e];
          }
        },
        8303: (e, t, r) => {
          "use strict";
          r.d(t, { u: () => v });
          var n = r(819),
            a = (function () {
              function e() {}
              return (
                (e.prototype.inject = function (e, t) {}),
                (e.prototype.extract = function (e, t) {
                  return e;
                }),
                (e.prototype.fields = function () {
                  return [];
                }),
                e
              );
            })(),
            i = r(7008),
            s = r(7150),
            o = (0, r(5834).Y)("OpenTelemetry Baggage Key");
          function c(e) {
            return e.getValue(o) || void 0;
          }
          function d() {
            return c(s.c.getInstance().active());
          }
          function u(e, t) {
            return e.setValue(o, t);
          }
          function l(e) {
            return e.deleteValue(o);
          }
          var p = r(2599),
            h = r(5774),
            _ = "propagation",
            f = new a(),
            m = (function () {
              function e() {
                (this.createBaggage = p.H),
                  (this.getBaggage = c),
                  (this.getActiveBaggage = d),
                  (this.setBaggage = u),
                  (this.deleteBaggage = l);
              }
              return (
                (e.getInstance = function () {
                  return (
                    this._instance || (this._instance = new e()), this._instance
                  );
                }),
                (e.prototype.setGlobalPropagator = function (e) {
                  return (0, n.TG)(_, e, h.G.instance());
                }),
                (e.prototype.inject = function (e, t, r) {
                  return (
                    void 0 === r && (r = i.M),
                    this._getGlobalPropagator().inject(e, t, r)
                  );
                }),
                (e.prototype.extract = function (e, t, r) {
                  return (
                    void 0 === r && (r = i.r),
                    this._getGlobalPropagator().extract(e, t, r)
                  );
                }),
                (e.prototype.fields = function () {
                  return this._getGlobalPropagator().fields();
                }),
                (e.prototype.disable = function () {
                  (0, n.J_)(_, h.G.instance());
                }),
                (e.prototype._getGlobalPropagator = function () {
                  return (0, n.Rd)(_) || f;
                }),
                e
              );
            })(),
            v = m.getInstance();
        },
        7008: (e, t, r) => {
          "use strict";
          r.d(t, { M: () => a, r: () => n });
          var n = {
              get: function (e, t) {
                if (null != e) return e[t];
              },
              keys: function (e) {
                return null == e ? [] : Object.keys(e);
              },
            },
            a = {
              set: function (e, t, r) {
                null != e && (e[t] = r);
              },
            };
        },
        2210: (e, t, r) => {
          "use strict";
          r.d(t, { g: () => d });
          var n = r(819),
            a = r(5236),
            i = r(7228),
            s = r(3557),
            o = r(5774),
            c = "trace",
            d = (function () {
              function e() {
                (this._proxyTracerProvider = new a.K()),
                  (this.wrapSpanContext = i.kw),
                  (this.isSpanContextValid = i.BM),
                  (this.deleteSpan = s.TW),
                  (this.getSpan = s.Br),
                  (this.getActiveSpan = s.HN),
                  (this.getSpanContext = s.A3),
                  (this.setSpan = s.WZ),
                  (this.setSpanContext = s.G3);
              }
              return (
                (e.getInstance = function () {
                  return (
                    this._instance || (this._instance = new e()), this._instance
                  );
                }),
                (e.prototype.setGlobalTracerProvider = function (e) {
                  var t = (0, n.TG)(
                    c,
                    this._proxyTracerProvider,
                    o.G.instance()
                  );
                  return t && this._proxyTracerProvider.setDelegate(e), t;
                }),
                (e.prototype.getTracerProvider = function () {
                  return (0, n.Rd)(c) || this._proxyTracerProvider;
                }),
                (e.prototype.getTracer = function (e, t) {
                  return this.getTracerProvider().getTracer(e, t);
                }),
                (e.prototype.disable = function () {
                  (0, n.J_)(c, o.G.instance()),
                    (this._proxyTracerProvider = new a.K());
                }),
                e
              );
            })().getInstance();
        },
        7817: (e, t, r) => {
          "use strict";
          r.d(t, { s: () => a });
          var n = r(7007),
            a = (function () {
              function e(e) {
                void 0 === e && (e = n.Rr), (this._spanContext = e);
              }
              return (
                (e.prototype.spanContext = function () {
                  return this._spanContext;
                }),
                (e.prototype.setAttribute = function (e, t) {
                  return this;
                }),
                (e.prototype.setAttributes = function (e) {
                  return this;
                }),
                (e.prototype.addEvent = function (e, t) {
                  return this;
                }),
                (e.prototype.setStatus = function (e) {
                  return this;
                }),
                (e.prototype.updateName = function (e) {
                  return this;
                }),
                (e.prototype.end = function (e) {}),
                (e.prototype.isRecording = function () {
                  return !1;
                }),
                (e.prototype.recordException = function (e, t) {}),
                e
              );
            })();
        },
        9127: (e, t, r) => {
          "use strict";
          r.d(t, { E: () => c });
          var n = r(7150),
            a = r(3557),
            i = r(7817),
            s = r(7228),
            o = n.c.getInstance(),
            c = (function () {
              function e() {}
              return (
                (e.prototype.startSpan = function (e, t, r) {
                  if (
                    (void 0 === r && (r = o.active()),
                    Boolean(null == t ? void 0 : t.root))
                  )
                    return new i.s();
                  var n,
                    c = r && (0, a.A3)(r);
                  return "object" == typeof (n = c) &&
                    "string" == typeof n.spanId &&
                    "string" == typeof n.traceId &&
                    "number" == typeof n.traceFlags &&
                    (0, s.BM)(c)
                    ? new i.s(c)
                    : new i.s();
                }),
                (e.prototype.startActiveSpan = function (e, t, r, n) {
                  var i, s, c;
                  if (!(arguments.length < 2)) {
                    2 === arguments.length
                      ? (c = t)
                      : 3 === arguments.length
                      ? ((i = t), (c = r))
                      : ((i = t), (s = r), (c = n));
                    var d = null != s ? s : o.active(),
                      u = this.startSpan(e, i, d),
                      l = (0, a.WZ)(d, u);
                    return o.with(l, c, void 0, u);
                  }
                }),
                e
              );
            })();
        },
        9953: (e, t, r) => {
          "use strict";
          r.d(t, { T: () => a });
          var n = new (r(9127).E)(),
            a = (function () {
              function e(e, t, r, n) {
                (this._provider = e),
                  (this.name = t),
                  (this.version = r),
                  (this.options = n);
              }
              return (
                (e.prototype.startSpan = function (e, t, r) {
                  return this._getTracer().startSpan(e, t, r);
                }),
                (e.prototype.startActiveSpan = function (e, t, r, n) {
                  var a = this._getTracer();
                  return Reflect.apply(a.startActiveSpan, a, arguments);
                }),
                (e.prototype._getTracer = function () {
                  if (this._delegate) return this._delegate;
                  var e = this._provider.getDelegateTracer(
                    this.name,
                    this.version,
                    this.options
                  );
                  return e ? ((this._delegate = e), this._delegate) : n;
                }),
                e
              );
            })();
        },
        5236: (e, t, r) => {
          "use strict";
          r.d(t, { K: () => s });
          var n = r(9953),
            a = r(9127),
            i = new ((function () {
              function e() {}
              return (
                (e.prototype.getTracer = function (e, t, r) {
                  return new a.E();
                }),
                e
              );
            })())(),
            s = (function () {
              function e() {}
              return (
                (e.prototype.getTracer = function (e, t, r) {
                  var a;
                  return null !== (a = this.getDelegateTracer(e, t, r)) &&
                    void 0 !== a
                    ? a
                    : new n.T(this, e, t, r);
                }),
                (e.prototype.getDelegate = function () {
                  var e;
                  return null !== (e = this._delegate) && void 0 !== e ? e : i;
                }),
                (e.prototype.setDelegate = function (e) {
                  this._delegate = e;
                }),
                (e.prototype.getDelegateTracer = function (e, t, r) {
                  var n;
                  return null === (n = this._delegate) || void 0 === n
                    ? void 0
                    : n.getTracer(e, t, r);
                }),
                e
              );
            })();
        },
        2297: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { U: () => n }),
            (function (e) {
              (e[(e.NOT_RECORD = 0)] = "NOT_RECORD"),
                (e[(e.RECORD = 1)] = "RECORD"),
                (e[(e.RECORD_AND_SAMPLED = 2)] = "RECORD_AND_SAMPLED");
            })(n || (n = {}));
        },
        3557: (e, t, r) => {
          "use strict";
          r.d(t, {
            A3: () => p,
            Br: () => o,
            G3: () => l,
            HN: () => c,
            TW: () => u,
            WZ: () => d,
          });
          var n = r(5834),
            a = r(7817),
            i = r(7150),
            s = (0, n.Y)("OpenTelemetry Context Key SPAN");
          function o(e) {
            return e.getValue(s) || void 0;
          }
          function c() {
            return o(i.c.getInstance().active());
          }
          function d(e, t) {
            return e.setValue(s, t);
          }
          function u(e) {
            return e.deleteValue(s);
          }
          function l(e, t) {
            return d(e, new a.s(t));
          }
          function p(e) {
            var t;
            return null === (t = o(e)) || void 0 === t
              ? void 0
              : t.spanContext();
          }
        },
        7007: (e, t, r) => {
          "use strict";
          r.d(t, { AE: () => i, Rr: () => s, fQ: () => a });
          var n = r(8726),
            a = "0000000000000000",
            i = "00000000000000000000000000000000",
            s = { traceId: i, spanId: a, traceFlags: n.r.NONE };
        },
        87: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { M: () => n }),
            (function (e) {
              (e[(e.INTERNAL = 0)] = "INTERNAL"),
                (e[(e.SERVER = 1)] = "SERVER"),
                (e[(e.CLIENT = 2)] = "CLIENT"),
                (e[(e.PRODUCER = 3)] = "PRODUCER"),
                (e[(e.CONSUMER = 4)] = "CONSUMER");
            })(n || (n = {}));
        },
        7228: (e, t, r) => {
          "use strict";
          r.d(t, { BM: () => d, Lc: () => c, jN: () => o, kw: () => u });
          var n = r(7007),
            a = r(7817),
            i = /^([0-9a-f]{32})$/i,
            s = /^[0-9a-f]{16}$/i;
          function o(e) {
            return i.test(e) && e !== n.AE;
          }
          function c(e) {
            return s.test(e) && e !== n.fQ;
          }
          function d(e) {
            return o(e.traceId) && c(e.spanId);
          }
          function u(e) {
            return new a.s(e);
          }
        },
        1820: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { Q: () => n }),
            (function (e) {
              (e[(e.UNSET = 0)] = "UNSET"),
                (e[(e.OK = 1)] = "OK"),
                (e[(e.ERROR = 2)] = "ERROR");
            })(n || (n = {}));
        },
        8726: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { r: () => n }),
            (function (e) {
              (e[(e.NONE = 0)] = "NONE"), (e[(e.SAMPLED = 1)] = "SAMPLED");
            })(n || (n = {}));
        },
        8009: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { ZoneContextManager: () => i });
          var n = r(5834);
          var a = "OT_ZONE_CONTEXT",
            i = (function () {
              function e() {
                (this._enabled = !1), (this._zoneCounter = 0);
              }
              return (
                (e.prototype._activeContextFromZone = function (e) {
                  return (e && e.get(a)) || n.I;
                }),
                (e.prototype._bindFunction = function (e, t) {
                  var r = this,
                    n = function () {
                      for (
                        var n = this, a = [], i = 0;
                        i < arguments.length;
                        i++
                      )
                        a[i] = arguments[i];
                      return r.with(e, function () {
                        return t.apply(n, a);
                      });
                    };
                  return (
                    Object.defineProperty(n, "length", {
                      enumerable: !1,
                      configurable: !0,
                      writable: !1,
                      value: t.length,
                    }),
                    n
                  );
                }),
                (e.prototype._bindListener = function (e, t) {
                  var r = t;
                  return (
                    void 0 !== r.__ot_listeners ||
                      ((r.__ot_listeners = {}),
                      "function" == typeof r.addEventListener &&
                        (r.addEventListener = this._patchAddEventListener(
                          r,
                          r.addEventListener,
                          e
                        )),
                      "function" == typeof r.removeEventListener &&
                        (r.removeEventListener = this._patchRemoveEventListener(
                          r,
                          r.removeEventListener
                        ))),
                    t
                  );
                }),
                (e.prototype._createZoneName = function () {
                  this._zoneCounter++;
                  var e = Math.random();
                  return this._zoneCounter + "-" + e;
                }),
                (e.prototype._createZone = function (e, t) {
                  var r;
                  return Zone.current.fork({
                    name: e,
                    properties: ((r = {}), (r.OT_ZONE_CONTEXT = t), r),
                  });
                }),
                (e.prototype._getActiveZone = function () {
                  return Zone.current;
                }),
                (e.prototype._patchAddEventListener = function (e, t, r) {
                  var n = this;
                  return function (a, i, s) {
                    void 0 === e.__ot_listeners && (e.__ot_listeners = {});
                    var o = e.__ot_listeners[a];
                    void 0 === o &&
                      ((o = new WeakMap()), (e.__ot_listeners[a] = o));
                    var c = n.bind(r, i);
                    return o.set(i, c), t.call(this, a, c, s);
                  };
                }),
                (e.prototype._patchRemoveEventListener = function (e, t) {
                  return function (r, n) {
                    if (
                      void 0 === e.__ot_listeners ||
                      void 0 === e.__ot_listeners[r]
                    )
                      return t.call(this, r, n);
                    var a = e.__ot_listeners[r],
                      i = a.get(n);
                    return a.delete(n), t.call(this, r, i || n);
                  };
                }),
                (e.prototype.active = function () {
                  if (!this._enabled) return n.I;
                  var e = this._getActiveZone(),
                    t = this._activeContextFromZone(e);
                  return t || n.I;
                }),
                (e.prototype.bind = function (e, t) {
                  return (
                    void 0 === e && (e = this.active()),
                    "function" == typeof t
                      ? this._bindFunction(e, t)
                      : (void 0 === (r = t) && (r = {}),
                        "function" == typeof r.addEventListener &&
                          "function" == typeof r.removeEventListener &&
                          this._bindListener(e, t),
                        t)
                  );
                  var r;
                }),
                (e.prototype.disable = function () {
                  return (this._enabled = !1), this;
                }),
                (e.prototype.enable = function () {
                  return (this._enabled = !0), this;
                }),
                (e.prototype.with = function (e, t, r) {
                  for (var n = [], a = 3; a < arguments.length; a++)
                    n[a - 3] = arguments[a];
                  var i = this._createZoneName(),
                    s = this._createZone(i, e);
                  return s.run(t, r, n);
                }),
                e
              );
            })();
          r(6037);
        },
        9648: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { OTLPTraceExporter: () => re });
          var n = r(2599);
          function a(e) {
            return "string" != typeof e || 0 === e.length
              ? {}
              : e
                  .split(",")
                  .map(function (e) {
                    return (function (e) {
                      var t = e.split(";");
                      if (!(t.length <= 0)) {
                        var r = t.shift();
                        if (r) {
                          var a = r.split("=");
                          if (2 === a.length) {
                            var i,
                              s = decodeURIComponent(a[0].trim()),
                              o = decodeURIComponent(a[1].trim());
                            return (
                              t.length > 0 && (i = (0, n.u)(t.join(";"))),
                              { key: s, value: o, metadata: i }
                            );
                          }
                        }
                      }
                    })(e);
                  })
                  .filter(function (e) {
                    return void 0 !== e && e.value.length > 0;
                  })
                  .reduce(function (e, t) {
                    return (e[t.key] = t.value), e;
                  }, {});
          }
          var i,
            s = r(6740);
          !(function (e) {
            (e.AlwaysOff = "always_off"),
              (e.AlwaysOn = "always_on"),
              (e.ParentBasedAlwaysOff = "parentbased_always_off"),
              (e.ParentBasedAlwaysOn = "parentbased_always_on"),
              (e.ParentBasedTraceIdRatio = "parentbased_traceidratio"),
              (e.TraceIdRatio = "traceidratio");
          })(i || (i = {}));
          var o = ["OTEL_SDK_DISABLED"];
          function c(e) {
            return o.indexOf(e) > -1;
          }
          var d = [
            "OTEL_BSP_EXPORT_TIMEOUT",
            "OTEL_BSP_MAX_EXPORT_BATCH_SIZE",
            "OTEL_BSP_MAX_QUEUE_SIZE",
            "OTEL_BSP_SCHEDULE_DELAY",
            "OTEL_BLRP_EXPORT_TIMEOUT",
            "OTEL_BLRP_MAX_EXPORT_BATCH_SIZE",
            "OTEL_BLRP_MAX_QUEUE_SIZE",
            "OTEL_BLRP_SCHEDULE_DELAY",
            "OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_SPAN_EVENT_COUNT_LIMIT",
            "OTEL_SPAN_LINK_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT",
            "OTEL_EXPORTER_OTLP_TIMEOUT",
            "OTEL_EXPORTER_OTLP_TRACES_TIMEOUT",
            "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT",
            "OTEL_EXPORTER_OTLP_LOGS_TIMEOUT",
            "OTEL_EXPORTER_JAEGER_AGENT_PORT",
          ];
          function u(e) {
            return d.indexOf(e) > -1;
          }
          var l = ["OTEL_NO_PATCH_MODULES", "OTEL_PROPAGATORS"];
          function p(e) {
            return l.indexOf(e) > -1;
          }
          var h = 1 / 0,
            _ = {
              OTEL_SDK_DISABLED: !1,
              CONTAINER_NAME: "",
              ECS_CONTAINER_METADATA_URI_V4: "",
              ECS_CONTAINER_METADATA_URI: "",
              HOSTNAME: "",
              KUBERNETES_SERVICE_HOST: "",
              NAMESPACE: "",
              OTEL_BSP_EXPORT_TIMEOUT: 3e4,
              OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BSP_MAX_QUEUE_SIZE: 2048,
              OTEL_BSP_SCHEDULE_DELAY: 5e3,
              OTEL_BLRP_EXPORT_TIMEOUT: 3e4,
              OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BLRP_MAX_QUEUE_SIZE: 2048,
              OTEL_BLRP_SCHEDULE_DELAY: 5e3,
              OTEL_EXPORTER_JAEGER_AGENT_HOST: "",
              OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
              OTEL_EXPORTER_JAEGER_ENDPOINT: "",
              OTEL_EXPORTER_JAEGER_PASSWORD: "",
              OTEL_EXPORTER_JAEGER_USER: "",
              OTEL_EXPORTER_OTLP_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_HEADERS: "",
              OTEL_EXPORTER_OTLP_TRACES_HEADERS: "",
              OTEL_EXPORTER_OTLP_METRICS_HEADERS: "",
              OTEL_EXPORTER_OTLP_LOGS_HEADERS: "",
              OTEL_EXPORTER_OTLP_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 1e4,
              OTEL_EXPORTER_ZIPKIN_ENDPOINT:
                "http://localhost:9411/api/v2/spans",
              OTEL_LOG_LEVEL: s.n.INFO,
              OTEL_NO_PATCH_MODULES: [],
              OTEL_PROPAGATORS: ["tracecontext", "baggage"],
              OTEL_RESOURCE_ATTRIBUTES: "",
              OTEL_SERVICE_NAME: "",
              OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: h,
              OTEL_ATTRIBUTE_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: h,
              OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: 128,
              OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: h,
              OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: 128,
              OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_LINK_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: 128,
              OTEL_TRACES_EXPORTER: "",
              OTEL_TRACES_SAMPLER: i.ParentBasedAlwaysOn,
              OTEL_TRACES_SAMPLER_ARG: "",
              OTEL_LOGS_EXPORTER: "",
              OTEL_EXPORTER_OTLP_INSECURE: "",
              OTEL_EXPORTER_OTLP_TRACES_INSECURE: "",
              OTEL_EXPORTER_OTLP_METRICS_INSECURE: "",
              OTEL_EXPORTER_OTLP_LOGS_INSECURE: "",
              OTEL_EXPORTER_OTLP_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: "cumulative",
            };
          function f(e, t, r) {
            if (void 0 !== r[e]) {
              var n = String(r[e]);
              t[e] = "true" === n.toLowerCase();
            }
          }
          function m(e, t, r, n, a) {
            if (
              (void 0 === n && (n = -1 / 0),
              void 0 === a && (a = 1 / 0),
              void 0 !== r[e])
            ) {
              var i = Number(r[e]);
              isNaN(i) || (t[e] = i < n ? n : i > a ? a : i);
            }
          }
          function v(e, t, r, n) {
            void 0 === n && (n = ",");
            var a = r[e];
            "string" == typeof a &&
              (t[e] = a.split(n).map(function (e) {
                return e.trim();
              }));
          }
          var g = {
            ALL: s.n.ALL,
            VERBOSE: s.n.VERBOSE,
            DEBUG: s.n.DEBUG,
            INFO: s.n.INFO,
            WARN: s.n.WARN,
            ERROR: s.n.ERROR,
            NONE: s.n.NONE,
          };
          function y(e, t, r) {
            var n = r[e];
            if ("string" == typeof n) {
              var a = g[n.toUpperCase()];
              null != a && (t[e] = a);
            }
          }
          function b(e) {
            var t = {};
            for (var r in _) {
              var n = r;
              if ("OTEL_LOG_LEVEL" === n) y(n, t, e);
              else if (c(n)) f(n, t, e);
              else if (u(n)) m(n, t, e);
              else if (p(n)) v(n, t, e);
              else {
                var a = e[n];
                null != a && (t[n] = String(a));
              }
            }
            return t;
          }
          var x =
            "object" == typeof globalThis
              ? globalThis
              : "object" == typeof self
              ? self
              : "object" == typeof window
              ? window
              : "object" == typeof r.g
              ? r.g
              : {};
          function E() {
            var e = b(x);
            return Object.assign({}, _, e);
          }
          var T = r(928),
            S = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            w = 1e4;
          function R(e) {
            return "number" == typeof e
              ? e <= 0
                ? P(e, 1e4)
                : e
              : (r = Number(
                  null !== (t = E().OTEL_EXPORTER_OTLP_TRACES_TIMEOUT) &&
                    void 0 !== t
                    ? t
                    : E().OTEL_EXPORTER_OTLP_TIMEOUT
                )) <= 0
              ? P(r, w)
              : r;
            var t, r;
          }
          function P(e, t) {
            return T.K.warn("Timeout must be greater than 0", e), t;
          }
          var O,
            k = (function () {
              function e() {
                var e = this;
                this._promise = new Promise(function (t, r) {
                  (e._resolve = t), (e._reject = r);
                });
              }
              return (
                Object.defineProperty(e.prototype, "promise", {
                  get: function () {
                    return this._promise;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                (e.prototype.resolve = function (e) {
                  this._resolve(e);
                }),
                (e.prototype.reject = function (e) {
                  this._reject(e);
                }),
                e
              );
            })(),
            C = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            I = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            L = (function () {
              function e(e, t) {
                (this._callback = e),
                  (this._that = t),
                  (this._isCalled = !1),
                  (this._deferred = new k());
              }
              return (
                Object.defineProperty(e.prototype, "isCalled", {
                  get: function () {
                    return this._isCalled;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                Object.defineProperty(e.prototype, "promise", {
                  get: function () {
                    return this._deferred.promise;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                (e.prototype.call = function () {
                  for (
                    var e, t = this, r = [], n = 0;
                    n < arguments.length;
                    n++
                  )
                    r[n] = arguments[n];
                  if (!this._isCalled) {
                    this._isCalled = !0;
                    try {
                      Promise.resolve(
                        (e = this._callback).call.apply(
                          e,
                          I([this._that], C(r), !1)
                        )
                      ).then(
                        function (e) {
                          return t._deferred.resolve(e);
                        },
                        function (e) {
                          return t._deferred.reject(e);
                        }
                      );
                    } catch (e) {
                      this._deferred.reject(e);
                    }
                  }
                  return this._deferred.promise;
                }),
                e
              );
            })();
          !(function (e) {
            (e[(e.SUCCESS = 0)] = "SUCCESS"), (e[(e.FAILED = 1)] = "FAILED");
          })(O || (O = {}));
          var D,
            A = (function () {
              function e(e) {
                void 0 === e && (e = {}),
                  (this._sendingPromises = []),
                  (this.url = this.getDefaultUrl(e)),
                  "string" == typeof e.hostname && (this.hostname = e.hostname),
                  (this.shutdown = this.shutdown.bind(this)),
                  (this._shutdownOnce = new L(this._shutdown, this)),
                  (this._concurrencyLimit =
                    "number" == typeof e.concurrencyLimit
                      ? e.concurrencyLimit
                      : 1 / 0),
                  (this.timeoutMillis = R(e.timeoutMillis)),
                  this.onInit(e);
              }
              return (
                (e.prototype.export = function (e, t) {
                  this._shutdownOnce.isCalled
                    ? t({
                        code: O.FAILED,
                        error: new Error("Exporter has been shutdown"),
                      })
                    : this._sendingPromises.length >= this._concurrencyLimit
                    ? t({
                        code: O.FAILED,
                        error: new Error("Concurrent export limit reached"),
                      })
                    : this._export(e)
                        .then(function () {
                          t({ code: O.SUCCESS });
                        })
                        .catch(function (e) {
                          t({ code: O.FAILED, error: e });
                        });
                }),
                (e.prototype._export = function (e) {
                  var t = this;
                  return new Promise(function (r, n) {
                    try {
                      T.K.debug("items to be sent", e), t.send(e, r, n);
                    } catch (e) {
                      n(e);
                    }
                  });
                }),
                (e.prototype.shutdown = function () {
                  return this._shutdownOnce.call();
                }),
                (e.prototype.forceFlush = function () {
                  return Promise.all(this._sendingPromises).then(
                    function () {}
                  );
                }),
                (e.prototype._shutdown = function () {
                  return (
                    T.K.debug("shutdown started"),
                    this.onShutdown(),
                    this.forceFlush()
                  );
                }),
                e
              );
            })(),
            M =
              ((D = function (e, t) {
                return (
                  (D =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                      function (e, t) {
                        e.__proto__ = t;
                      }) ||
                    function (e, t) {
                      for (var r in t)
                        Object.prototype.hasOwnProperty.call(t, r) &&
                          (e[r] = t[r]);
                    }),
                  D(e, t)
                );
              }),
              function (e, t) {
                if ("function" != typeof t && null !== t)
                  throw new TypeError(
                    "Class extends value " +
                      String(t) +
                      " is not a constructor or null"
                  );
                function r() {
                  this.constructor = e;
                }
                D(e, t),
                  (e.prototype =
                    null === t
                      ? Object.create(t)
                      : ((r.prototype = t.prototype), new r()));
              }),
            N = (function (e) {
              function t(t, r, n) {
                var a = e.call(this, t) || this;
                return (
                  (a.name = "OTLPExporterError"), (a.data = n), (a.code = r), a
                );
              }
              return M(t, e), t;
            })(Error),
            j = function () {
              return (
                (j =
                  Object.assign ||
                  function (e) {
                    for (var t, r = 1, n = arguments.length; r < n; r++)
                      for (var a in (t = arguments[r]))
                        Object.prototype.hasOwnProperty.call(t, a) &&
                          (e[a] = t[a]);
                    return e;
                  }),
                j.apply(this, arguments)
              );
            },
            B = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            };
          function U(e, t, r, n, a, i) {
            var s,
              o,
              c = !1,
              d = setTimeout(function () {
                if (
                  (clearTimeout(s),
                  (c = !0),
                  o.readyState === XMLHttpRequest.DONE)
                ) {
                  var e = new N("Request Timeout");
                  i(e);
                } else o.abort();
              }, n),
              u = function (n, l) {
                void 0 === n && (n = 5),
                  void 0 === l && (l = 1e3),
                  (o = new XMLHttpRequest()).open("POST", t);
                Object.entries(
                  j(
                    j(
                      {},
                      {
                        Accept: "application/json",
                        "Content-Type": "application/json",
                      }
                    ),
                    r
                  )
                ).forEach(function (e) {
                  var t = B(e, 2),
                    r = t[0],
                    n = t[1];
                  o.setRequestHeader(r, n);
                }),
                  o.send(e),
                  (o.onreadystatechange = function () {
                    if (o.readyState === XMLHttpRequest.DONE && !1 === c)
                      if (o.status >= 200 && o.status <= 299)
                        T.K.debug("xhr success", e),
                          a(),
                          clearTimeout(d),
                          clearTimeout(s);
                      else if (
                        o.status &&
                        ((p = o.status), [429, 502, 503, 504].includes(p)) &&
                        n > 0
                      ) {
                        var t = void 0;
                        (l *= 1.5),
                          (t = o.getResponseHeader("Retry-After")
                            ? (function (e) {
                                if (null == e) return -1;
                                var t = Number.parseInt(e, 10);
                                if (Number.isInteger(t))
                                  return t > 0 ? 1e3 * t : -1;
                                var r = new Date(e).getTime() - Date.now();
                                return r >= 0 ? r : 0;
                              })(o.getResponseHeader("Retry-After"))
                            : Math.round(Math.random() * (5e3 - l) + l)),
                          (s = setTimeout(function () {
                            u(n - 1, l);
                          }, t));
                      } else {
                        var r = new N(
                          "Failed to export with XHR (status: " +
                            o.status +
                            ")",
                          o.status
                        );
                        i(r), clearTimeout(d), clearTimeout(s);
                      }
                    var p;
                  }),
                  (o.onabort = function () {
                    if (c) {
                      var e = new N("Request Timeout");
                      i(e);
                    }
                    clearTimeout(d), clearTimeout(s);
                  }),
                  (o.onerror = function () {
                    if (c) {
                      var e = new N("Request Timeout");
                      i(e);
                    }
                    clearTimeout(d), clearTimeout(s);
                  });
              };
            u();
          }
          var F = (function () {
              var e = function (t, r) {
                return (
                  (e =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                      function (e, t) {
                        e.__proto__ = t;
                      }) ||
                    function (e, t) {
                      for (var r in t)
                        Object.prototype.hasOwnProperty.call(t, r) &&
                          (e[r] = t[r]);
                    }),
                  e(t, r)
                );
              };
              return function (t, r) {
                if ("function" != typeof r && null !== r)
                  throw new TypeError(
                    "Class extends value " +
                      String(r) +
                      " is not a constructor or null"
                  );
                function n() {
                  this.constructor = t;
                }
                e(t, r),
                  (t.prototype =
                    null === r
                      ? Object.create(r)
                      : ((n.prototype = r.prototype), new n()));
              };
            })(),
            G = (function (e) {
              function t(t) {
                void 0 === t && (t = {});
                var r = e.call(this, t) || this;
                return (
                  (r._useXHR = !1),
                  (r._useXHR =
                    !!t.headers || "function" != typeof navigator.sendBeacon),
                  r._useXHR
                    ? (r._headers = Object.assign(
                        {},
                        (function (e) {
                          void 0 === e && (e = {});
                          var t = {};
                          return (
                            Object.entries(e).forEach(function (e) {
                              var r = S(e, 2),
                                n = r[0],
                                a = r[1];
                              void 0 !== a
                                ? (t[n] = String(a))
                                : T.K.warn(
                                    'Header "' +
                                      n +
                                      '" has wrong value and will be ignored'
                                  );
                            }),
                            t
                          );
                        })(t.headers),
                        a(E().OTEL_EXPORTER_OTLP_HEADERS)
                      ))
                    : (r._headers = {}),
                  r
                );
              }
              return (
                F(t, e),
                (t.prototype.onInit = function () {
                  window.addEventListener("unload", this.shutdown);
                }),
                (t.prototype.onShutdown = function () {
                  window.removeEventListener("unload", this.shutdown);
                }),
                (t.prototype.send = function (e, t, r) {
                  var n = this;
                  if (this._shutdownOnce.isCalled)
                    T.K.debug("Shutdown already started. Cannot send objects");
                  else {
                    var a = this.convert(e),
                      i = JSON.stringify(a),
                      s = new Promise(function (e, t) {
                        n._useXHR
                          ? U(i, n.url, n._headers, n.timeoutMillis, e, t)
                          : (function (e, t, r, n, a) {
                              navigator.sendBeacon(t, new Blob([e], r))
                                ? (T.K.debug("sendBeacon - can send", e), n())
                                : a(new N("sendBeacon - cannot send " + e));
                            })(i, n.url, { type: "application/json" }, e, t);
                      }).then(t, r);
                    this._sendingPromises.push(s);
                    var o = function () {
                      var e = n._sendingPromises.indexOf(s);
                      n._sendingPromises.splice(e, 1);
                    };
                    s.then(o, o);
                  }
                }),
                t
              );
            })(A),
            V = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            };
          function Z(e) {
            return Object.keys(e).map(function (t) {
              return H(t, e[t]);
            });
          }
          function H(e, t) {
            return { key: e, value: W(t) };
          }
          function W(e) {
            var t = typeof e;
            return "string" === t
              ? { stringValue: e }
              : "number" === t
              ? Number.isInteger(e)
                ? { intValue: e }
                : { doubleValue: e }
              : "boolean" === t
              ? { boolValue: e }
              : e instanceof Uint8Array
              ? { bytesValue: e }
              : Array.isArray(e)
              ? { arrayValue: { values: e.map(W) } }
              : "object" === t && null != e
              ? {
                  kvlistValue: {
                    values: Object.entries(e).map(function (e) {
                      var t = V(e, 2);
                      return H(t[0], t[1]);
                    }),
                  },
                }
              : {};
          }
          Math.pow(10, 6);
          var z = Math.pow(10, 9);
          function K(e) {
            return e[0] * z + e[1];
          }
          function X(e) {
            for (var t = e.length, r = "", n = 0; n < t; n += 2) {
              var a = e.substring(n, n + 2),
                i = parseInt(a, 16);
              r += String.fromCharCode(i);
            }
            return btoa(r);
          }
          function q(e, t) {
            var r,
              n = e.spanContext(),
              a = e.status,
              i = t
                ? e.parentSpanId
                : null != e.parentSpanId
                ? X(e.parentSpanId)
                : void 0;
            return {
              traceId: t ? n.traceId : X(n.traceId),
              spanId: t ? n.spanId : X(n.spanId),
              parentSpanId: i,
              traceState:
                null === (r = n.traceState) || void 0 === r
                  ? void 0
                  : r.serialize(),
              name: e.name,
              kind: null == e.kind ? 0 : e.kind + 1,
              startTimeUnixNano: K(e.startTime),
              endTimeUnixNano: K(e.endTime),
              attributes: Z(e.attributes),
              droppedAttributesCount: e.droppedAttributesCount,
              events: e.events.map($),
              droppedEventsCount: e.droppedEventsCount,
              status: { code: a.code, message: a.message },
              links: e.links.map(function (e) {
                return (function (e, t) {
                  var r;
                  return {
                    attributes: e.attributes ? Z(e.attributes) : [],
                    spanId: t ? e.context.spanId : X(e.context.spanId),
                    traceId: t ? e.context.traceId : X(e.context.traceId),
                    traceState:
                      null === (r = e.context.traceState) || void 0 === r
                        ? void 0
                        : r.serialize(),
                    droppedAttributesCount: e.droppedAttributesCount || 0,
                  };
                })(e, t);
              }),
              droppedLinksCount: e.droppedLinksCount,
            };
          }
          function $(e) {
            return {
              attributes: e.attributes ? Z(e.attributes) : [],
              name: e.name,
              timeUnixNano: K(e.time),
              droppedAttributesCount: e.droppedAttributesCount || 0,
            };
          }
          var J = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            Y = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            };
          function Q(e, t) {
            for (
              var r = (function (e) {
                  var t,
                    r,
                    n = new Map();
                  try {
                    for (var a = J(e), i = a.next(); !i.done; i = a.next()) {
                      var s = i.value,
                        o = n.get(s.resource);
                      o || ((o = new Map()), n.set(s.resource, o));
                      var c =
                          s.instrumentationLibrary.name +
                          "@" +
                          (s.instrumentationLibrary.version || "") +
                          ":" +
                          (s.instrumentationLibrary.schemaUrl || ""),
                        d = o.get(c);
                      d || ((d = []), o.set(c, d)), d.push(s);
                    }
                  } catch (e) {
                    t = { error: e };
                  } finally {
                    try {
                      i && !i.done && (r = a.return) && r.call(a);
                    } finally {
                      if (t) throw t.error;
                    }
                  }
                  return n;
                })(e),
                n = [],
                a = r.entries(),
                i = a.next();
              !i.done;

            ) {
              for (
                var s = Y(i.value, 2),
                  o = s[0],
                  c = [],
                  d = s[1].values(),
                  u = d.next();
                !u.done;

              ) {
                var l = u.value;
                if (l.length > 0) {
                  var p = l[0].instrumentationLibrary,
                    h = p.name,
                    _ = p.version,
                    f = p.schemaUrl,
                    m = l.map(function (e) {
                      return q(e, t);
                    });
                  c.push({
                    scope: { name: h, version: _ },
                    spans: m,
                    schemaUrl: f,
                  });
                }
                u = d.next();
              }
              var v = {
                resource: {
                  attributes: Z(o.attributes),
                  droppedAttributesCount: 0,
                },
                scopeSpans: c,
                schemaUrl: void 0,
              };
              n.push(v), (i = a.next());
            }
            return n;
          }
          var ee = (function () {
              var e = function (t, r) {
                return (
                  (e =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                      function (e, t) {
                        e.__proto__ = t;
                      }) ||
                    function (e, t) {
                      for (var r in t)
                        Object.prototype.hasOwnProperty.call(t, r) &&
                          (e[r] = t[r]);
                    }),
                  e(t, r)
                );
              };
              return function (t, r) {
                if ("function" != typeof r && null !== r)
                  throw new TypeError(
                    "Class extends value " +
                      String(r) +
                      " is not a constructor or null"
                  );
                function n() {
                  this.constructor = t;
                }
                e(t, r),
                  (t.prototype =
                    null === r
                      ? Object.create(r)
                      : ((n.prototype = r.prototype), new n()));
              };
            })(),
            te = "v1/traces",
            re = (function (e) {
              function t(t) {
                void 0 === t && (t = {});
                var r = e.call(this, t) || this;
                return (
                  (r._headers = Object.assign(
                    r._headers,
                    a(E().OTEL_EXPORTER_OTLP_TRACES_HEADERS)
                  )),
                  r
                );
              }
              return (
                ee(t, e),
                (t.prototype.convert = function (e) {
                  return (function (e, t) {
                    return { resourceSpans: Q(e, t) };
                  })(e, !0);
                }),
                (t.prototype.getDefaultUrl = function (e) {
                  return "string" == typeof e.url
                    ? e.url
                    : E().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT.length > 0
                    ? (function (e) {
                        try {
                          var t = new URL(e);
                          return (
                            "" === t.pathname &&
                              (t.pathname = t.pathname + "/"),
                            t.toString()
                          );
                        } catch (t) {
                          return (
                            T.K.warn("Could not parse export URL: '" + e + "'"),
                            e
                          );
                        }
                      })(E().OTEL_EXPORTER_OTLP_TRACES_ENDPOINT)
                    : E().OTEL_EXPORTER_OTLP_ENDPOINT.length > 0
                    ? ((t = E().OTEL_EXPORTER_OTLP_ENDPOINT),
                      (r = te),
                      t.endsWith("/") || (t += "/"),
                      t + r)
                    : "http://localhost:4318/v1/traces";
                  var t, r;
                }),
                t
              );
            })(G);
        },
        3766: (e, t, r) => {
          "use strict";
          r.d(t, { _: () => p });
          var n,
            a = r(928),
            i = r(4289),
            s =
              (((n = {})[i.R9.TELEMETRY_SDK_NAME] = "opentelemetry"),
              (n[i.R9.PROCESS_RUNTIME_NAME] = "browser"),
              (n[i.R9.TELEMETRY_SDK_LANGUAGE] = i.Te.WEBJS),
              (n[i.R9.TELEMETRY_SDK_VERSION] = "1.17.0"),
              n),
            o = r(2660),
            c = function () {
              return (
                (c =
                  Object.assign ||
                  function (e) {
                    for (var t, r = 1, n = arguments.length; r < n; r++)
                      for (var a in (t = arguments[r]))
                        Object.prototype.hasOwnProperty.call(t, a) &&
                          (e[a] = t[a]);
                    return e;
                  }),
                c.apply(this, arguments)
              );
            },
            d = function (e, t, r, n) {
              return new (r || (r = Promise))(function (a, i) {
                function s(e) {
                  try {
                    c(n.next(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function o(e) {
                  try {
                    c(n.throw(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function c(e) {
                  var t;
                  e.done
                    ? a(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(s, o);
                }
                c((n = n.apply(e, t || [])).next());
              });
            },
            u = function (e, t) {
              var r,
                n,
                a,
                i,
                s = {
                  label: 0,
                  sent: function () {
                    if (1 & a[0]) throw a[1];
                    return a[1];
                  },
                  trys: [],
                  ops: [],
                };
              return (
                (i = { next: o(0), throw: o(1), return: o(2) }),
                "function" == typeof Symbol &&
                  (i[Symbol.iterator] = function () {
                    return this;
                  }),
                i
              );
              function o(i) {
                return function (o) {
                  return (function (i) {
                    if (r)
                      throw new TypeError("Generator is already executing.");
                    for (; s; )
                      try {
                        if (
                          ((r = 1),
                          n &&
                            (a =
                              2 & i[0]
                                ? n.return
                                : i[0]
                                ? n.throw || ((a = n.return) && a.call(n), 0)
                                : n.next) &&
                            !(a = a.call(n, i[1])).done)
                        )
                          return a;
                        switch (
                          ((n = 0), a && (i = [2 & i[0], a.value]), i[0])
                        ) {
                          case 0:
                          case 1:
                            a = i;
                            break;
                          case 4:
                            return s.label++, { value: i[1], done: !1 };
                          case 5:
                            s.label++, (n = i[1]), (i = [0]);
                            continue;
                          case 7:
                            (i = s.ops.pop()), s.trys.pop();
                            continue;
                          default:
                            if (
                              !((a = s.trys),
                              (a = a.length > 0 && a[a.length - 1]) ||
                                (6 !== i[0] && 2 !== i[0]))
                            ) {
                              s = 0;
                              continue;
                            }
                            if (
                              3 === i[0] &&
                              (!a || (i[1] > a[0] && i[1] < a[3]))
                            ) {
                              s.label = i[1];
                              break;
                            }
                            if (6 === i[0] && s.label < a[1]) {
                              (s.label = a[1]), (a = i);
                              break;
                            }
                            if (a && s.label < a[2]) {
                              (s.label = a[2]), s.ops.push(i);
                              break;
                            }
                            a[2] && s.ops.pop(), s.trys.pop();
                            continue;
                        }
                        i = t.call(e, s);
                      } catch (e) {
                        (i = [6, e]), (n = 0);
                      } finally {
                        r = a = 0;
                      }
                    if (5 & i[0]) throw i[1];
                    return { value: i[0] ? i[1] : void 0, done: !0 };
                  })([i, o]);
                };
              }
            },
            l = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            p = (function () {
              function e(e, t) {
                var r,
                  n = this;
                (this._attributes = e),
                  (this.asyncAttributesPending = null != t),
                  (this._syncAttributes =
                    null !== (r = this._attributes) && void 0 !== r ? r : {}),
                  (this._asyncAttributesPromise =
                    null == t
                      ? void 0
                      : t.then(
                          function (e) {
                            return (
                              (n._attributes = Object.assign(
                                {},
                                n._attributes,
                                e
                              )),
                              (n.asyncAttributesPending = !1),
                              e
                            );
                          },
                          function (e) {
                            return (
                              a.K.debug(
                                "a resource's async attributes promise rejected: %s",
                                e
                              ),
                              (n.asyncAttributesPending = !1),
                              {}
                            );
                          }
                        ));
              }
              return (
                (e.empty = function () {
                  return e.EMPTY;
                }),
                (e.default = function () {
                  var t;
                  return new e(
                    (((t = {})[i.R9.SERVICE_NAME] = (0, o.u)()),
                    (t[i.R9.TELEMETRY_SDK_LANGUAGE] =
                      s[i.R9.TELEMETRY_SDK_LANGUAGE]),
                    (t[i.R9.TELEMETRY_SDK_NAME] = s[i.R9.TELEMETRY_SDK_NAME]),
                    (t[i.R9.TELEMETRY_SDK_VERSION] =
                      s[i.R9.TELEMETRY_SDK_VERSION]),
                    t)
                  );
                }),
                Object.defineProperty(e.prototype, "attributes", {
                  get: function () {
                    var e;
                    return (
                      this.asyncAttributesPending &&
                        a.K.error(
                          "Accessing resource attributes before async attributes settled"
                        ),
                      null !== (e = this._attributes) && void 0 !== e ? e : {}
                    );
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                (e.prototype.waitForAsyncAttributes = function () {
                  return d(this, void 0, void 0, function () {
                    return u(this, function (e) {
                      switch (e.label) {
                        case 0:
                          return this.asyncAttributesPending
                            ? [4, this._asyncAttributesPromise]
                            : [3, 2];
                        case 1:
                          e.sent(), (e.label = 2);
                        case 2:
                          return [2];
                      }
                    });
                  });
                }),
                (e.prototype.merge = function (t) {
                  var r,
                    n = this;
                  if (!t) return this;
                  var a = c(
                    c({}, this._syncAttributes),
                    null !== (r = t._syncAttributes) && void 0 !== r
                      ? r
                      : t.attributes
                  );
                  if (
                    !this._asyncAttributesPromise &&
                    !t._asyncAttributesPromise
                  )
                    return new e(a);
                  var i = Promise.all([
                    this._asyncAttributesPromise,
                    t._asyncAttributesPromise,
                  ]).then(function (e) {
                    var r,
                      a = l(e, 2),
                      i = a[0],
                      s = a[1];
                    return c(
                      c(
                        c(c({}, n._syncAttributes), i),
                        null !== (r = t._syncAttributes) && void 0 !== r
                          ? r
                          : t.attributes
                      ),
                      s
                    );
                  });
                  return new e(a, i);
                }),
                (e.EMPTY = new e({})),
                e
              );
            })();
        },
        168: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              Resource: () => a._,
              browserDetector: () => g,
              browserDetectorSync: () => v,
              defaultServiceName: () => i.u,
              detectResources: () => G,
              detectResourcesSync: () => V,
              envDetector: () => B,
              envDetectorSync: () => j,
              hostDetector: () => c,
              hostDetectorSync: () => u,
              osDetector: () => d,
              osDetectorSync: () => l,
              processDetector: () => p,
              processDetectorSync: () => h,
            });
          var n,
            a = r(3766),
            i = r(2660),
            s = new ((function () {
              function e() {}
              return (
                (e.prototype.detect = function () {
                  return new a._({});
                }),
                e
              );
            })())(),
            o = new ((function () {
              function e() {}
              return (
                (e.prototype.detect = function () {
                  return Promise.resolve(s.detect());
                }),
                e
              );
            })())(),
            c = o,
            d = o,
            u = s,
            l = s,
            p = o,
            h = o,
            _ = r(4289),
            f = r(928),
            m = function () {
              return (
                (m =
                  Object.assign ||
                  function (e) {
                    for (var t, r = 1, n = arguments.length; r < n; r++)
                      for (var a in (t = arguments[r]))
                        Object.prototype.hasOwnProperty.call(t, a) &&
                          (e[a] = t[a]);
                    return e;
                  }),
                m.apply(this, arguments)
              );
            },
            v = new ((function () {
              function e() {}
              return (
                (e.prototype.detect = function (e) {
                  var t;
                  if (!("undefined" != typeof navigator)) return a._.empty();
                  var r =
                    (((t = {})[_.R9.PROCESS_RUNTIME_NAME] = "browser"),
                    (t[_.R9.PROCESS_RUNTIME_DESCRIPTION] = "Web Browser"),
                    (t[_.R9.PROCESS_RUNTIME_VERSION] = navigator.userAgent),
                    t);
                  return this._getResourceAttributes(r, e);
                }),
                (e.prototype._getResourceAttributes = function (e, t) {
                  return "" === e[_.R9.PROCESS_RUNTIME_VERSION]
                    ? (f.K.debug(
                        "BrowserDetector failed: Unable to find required browser resources. "
                      ),
                      a._.empty())
                    : new a._(m({}, e));
                }),
                e
              );
            })())(),
            g = new ((function () {
              function e() {}
              return (
                (e.prototype.detect = function (e) {
                  return Promise.resolve(v.detect(e));
                }),
                e
              );
            })())(),
            y = r(6740);
          !(function (e) {
            (e.AlwaysOff = "always_off"),
              (e.AlwaysOn = "always_on"),
              (e.ParentBasedAlwaysOff = "parentbased_always_off"),
              (e.ParentBasedAlwaysOn = "parentbased_always_on"),
              (e.ParentBasedTraceIdRatio = "parentbased_traceidratio"),
              (e.TraceIdRatio = "traceidratio");
          })(n || (n = {}));
          var b = ["OTEL_SDK_DISABLED"];
          function x(e) {
            return b.indexOf(e) > -1;
          }
          var E = [
            "OTEL_BSP_EXPORT_TIMEOUT",
            "OTEL_BSP_MAX_EXPORT_BATCH_SIZE",
            "OTEL_BSP_MAX_QUEUE_SIZE",
            "OTEL_BSP_SCHEDULE_DELAY",
            "OTEL_BLRP_EXPORT_TIMEOUT",
            "OTEL_BLRP_MAX_EXPORT_BATCH_SIZE",
            "OTEL_BLRP_MAX_QUEUE_SIZE",
            "OTEL_BLRP_SCHEDULE_DELAY",
            "OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_SPAN_EVENT_COUNT_LIMIT",
            "OTEL_SPAN_LINK_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT",
            "OTEL_EXPORTER_OTLP_TIMEOUT",
            "OTEL_EXPORTER_OTLP_TRACES_TIMEOUT",
            "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT",
            "OTEL_EXPORTER_OTLP_LOGS_TIMEOUT",
            "OTEL_EXPORTER_JAEGER_AGENT_PORT",
          ];
          function T(e) {
            return E.indexOf(e) > -1;
          }
          var S = ["OTEL_NO_PATCH_MODULES", "OTEL_PROPAGATORS"];
          function w(e) {
            return S.indexOf(e) > -1;
          }
          var R = 1 / 0,
            P = {
              OTEL_SDK_DISABLED: !1,
              CONTAINER_NAME: "",
              ECS_CONTAINER_METADATA_URI_V4: "",
              ECS_CONTAINER_METADATA_URI: "",
              HOSTNAME: "",
              KUBERNETES_SERVICE_HOST: "",
              NAMESPACE: "",
              OTEL_BSP_EXPORT_TIMEOUT: 3e4,
              OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BSP_MAX_QUEUE_SIZE: 2048,
              OTEL_BSP_SCHEDULE_DELAY: 5e3,
              OTEL_BLRP_EXPORT_TIMEOUT: 3e4,
              OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BLRP_MAX_QUEUE_SIZE: 2048,
              OTEL_BLRP_SCHEDULE_DELAY: 5e3,
              OTEL_EXPORTER_JAEGER_AGENT_HOST: "",
              OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
              OTEL_EXPORTER_JAEGER_ENDPOINT: "",
              OTEL_EXPORTER_JAEGER_PASSWORD: "",
              OTEL_EXPORTER_JAEGER_USER: "",
              OTEL_EXPORTER_OTLP_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_HEADERS: "",
              OTEL_EXPORTER_OTLP_TRACES_HEADERS: "",
              OTEL_EXPORTER_OTLP_METRICS_HEADERS: "",
              OTEL_EXPORTER_OTLP_LOGS_HEADERS: "",
              OTEL_EXPORTER_OTLP_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 1e4,
              OTEL_EXPORTER_ZIPKIN_ENDPOINT:
                "http://localhost:9411/api/v2/spans",
              OTEL_LOG_LEVEL: y.n.INFO,
              OTEL_NO_PATCH_MODULES: [],
              OTEL_PROPAGATORS: ["tracecontext", "baggage"],
              OTEL_RESOURCE_ATTRIBUTES: "",
              OTEL_SERVICE_NAME: "",
              OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: R,
              OTEL_ATTRIBUTE_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: R,
              OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: 128,
              OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: R,
              OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: 128,
              OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_LINK_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: 128,
              OTEL_TRACES_EXPORTER: "",
              OTEL_TRACES_SAMPLER: n.ParentBasedAlwaysOn,
              OTEL_TRACES_SAMPLER_ARG: "",
              OTEL_LOGS_EXPORTER: "",
              OTEL_EXPORTER_OTLP_INSECURE: "",
              OTEL_EXPORTER_OTLP_TRACES_INSECURE: "",
              OTEL_EXPORTER_OTLP_METRICS_INSECURE: "",
              OTEL_EXPORTER_OTLP_LOGS_INSECURE: "",
              OTEL_EXPORTER_OTLP_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: "cumulative",
            };
          function O(e, t, r) {
            if (void 0 !== r[e]) {
              var n = String(r[e]);
              t[e] = "true" === n.toLowerCase();
            }
          }
          function k(e, t, r, n, a) {
            if (
              (void 0 === n && (n = -1 / 0),
              void 0 === a && (a = 1 / 0),
              void 0 !== r[e])
            ) {
              var i = Number(r[e]);
              isNaN(i) || (t[e] = i < n ? n : i > a ? a : i);
            }
          }
          function C(e, t, r, n) {
            void 0 === n && (n = ",");
            var a = r[e];
            "string" == typeof a &&
              (t[e] = a.split(n).map(function (e) {
                return e.trim();
              }));
          }
          var I = {
            ALL: y.n.ALL,
            VERBOSE: y.n.VERBOSE,
            DEBUG: y.n.DEBUG,
            INFO: y.n.INFO,
            WARN: y.n.WARN,
            ERROR: y.n.ERROR,
            NONE: y.n.NONE,
          };
          function L(e, t, r) {
            var n = r[e];
            if ("string" == typeof n) {
              var a = I[n.toUpperCase()];
              null != a && (t[e] = a);
            }
          }
          function D(e) {
            var t = {};
            for (var r in P) {
              var n = r;
              if ("OTEL_LOG_LEVEL" === n) L(n, t, e);
              else if (x(n)) O(n, t, e);
              else if (T(n)) k(n, t, e);
              else if (w(n)) C(n, t, e);
              else {
                var a = e[n];
                null != a && (t[n] = String(a));
              }
            }
            return t;
          }
          var A =
            "object" == typeof globalThis
              ? globalThis
              : "object" == typeof self
              ? self
              : "object" == typeof window
              ? window
              : "object" == typeof r.g
              ? r.g
              : {};
          var M = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            N = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            j = new ((function () {
              function e() {
                (this._MAX_LENGTH = 255),
                  (this._COMMA_SEPARATOR = ","),
                  (this._LABEL_KEY_VALUE_SPLITTER = "="),
                  (this._ERROR_MESSAGE_INVALID_CHARS =
                    "should be a ASCII string with a length greater than 0 and not exceed " +
                    this._MAX_LENGTH +
                    " characters."),
                  (this._ERROR_MESSAGE_INVALID_VALUE =
                    "should be a ASCII string with a length not exceed " +
                    this._MAX_LENGTH +
                    " characters.");
              }
              return (
                (e.prototype.detect = function (e) {
                  var t,
                    r = {},
                    n = ((t = D(A)), Object.assign({}, P, t)),
                    i = n.OTEL_RESOURCE_ATTRIBUTES,
                    s = n.OTEL_SERVICE_NAME;
                  if (i)
                    try {
                      var o = this._parseResourceAttributes(i);
                      Object.assign(r, o);
                    } catch (e) {
                      f.K.debug("EnvDetector failed: " + e.message);
                    }
                  return s && (r[_.R9.SERVICE_NAME] = s), new a._(r);
                }),
                (e.prototype._parseResourceAttributes = function (e) {
                  var t, r;
                  if (!e) return {};
                  var n = {},
                    a = e.split(this._COMMA_SEPARATOR, -1);
                  try {
                    for (var i = M(a), s = i.next(); !s.done; s = i.next()) {
                      var o = s.value.split(this._LABEL_KEY_VALUE_SPLITTER, -1);
                      if (2 === o.length) {
                        var c = N(o, 2),
                          d = c[0],
                          u = c[1];
                        if (
                          ((d = d.trim()),
                          (u = u.trim().split(/^"|"$/).join("")),
                          !this._isValidAndNotEmpty(d))
                        )
                          throw new Error(
                            "Attribute key " + this._ERROR_MESSAGE_INVALID_CHARS
                          );
                        if (!this._isValid(u))
                          throw new Error(
                            "Attribute value " +
                              this._ERROR_MESSAGE_INVALID_VALUE
                          );
                        n[d] = decodeURIComponent(u);
                      }
                    }
                  } catch (e) {
                    t = { error: e };
                  } finally {
                    try {
                      s && !s.done && (r = i.return) && r.call(i);
                    } finally {
                      if (t) throw t.error;
                    }
                  }
                  return n;
                }),
                (e.prototype._isValid = function (e) {
                  return (
                    e.length <= this._MAX_LENGTH &&
                    this._isBaggageOctetString(e)
                  );
                }),
                (e.prototype._isBaggageOctetString = function (e) {
                  for (var t = 0; t < e.length; t++) {
                    var r = e.charCodeAt(t);
                    if (r < 33 || 44 === r || 59 === r || 92 === r || r > 126)
                      return !1;
                  }
                  return !0;
                }),
                (e.prototype._isValidAndNotEmpty = function (e) {
                  return e.length > 0 && this._isValid(e);
                }),
                e
              );
            })())(),
            B = new ((function () {
              function e() {}
              return (
                (e.prototype.detect = function (e) {
                  return Promise.resolve(j.detect(e));
                }),
                e
              );
            })())(),
            U = function (e, t, r, n) {
              return new (r || (r = Promise))(function (a, i) {
                function s(e) {
                  try {
                    c(n.next(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function o(e) {
                  try {
                    c(n.throw(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function c(e) {
                  var t;
                  e.done
                    ? a(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(s, o);
                }
                c((n = n.apply(e, t || [])).next());
              });
            },
            F = function (e, t) {
              var r,
                n,
                a,
                i,
                s = {
                  label: 0,
                  sent: function () {
                    if (1 & a[0]) throw a[1];
                    return a[1];
                  },
                  trys: [],
                  ops: [],
                };
              return (
                (i = { next: o(0), throw: o(1), return: o(2) }),
                "function" == typeof Symbol &&
                  (i[Symbol.iterator] = function () {
                    return this;
                  }),
                i
              );
              function o(i) {
                return function (o) {
                  return (function (i) {
                    if (r)
                      throw new TypeError("Generator is already executing.");
                    for (; s; )
                      try {
                        if (
                          ((r = 1),
                          n &&
                            (a =
                              2 & i[0]
                                ? n.return
                                : i[0]
                                ? n.throw || ((a = n.return) && a.call(n), 0)
                                : n.next) &&
                            !(a = a.call(n, i[1])).done)
                        )
                          return a;
                        switch (
                          ((n = 0), a && (i = [2 & i[0], a.value]), i[0])
                        ) {
                          case 0:
                          case 1:
                            a = i;
                            break;
                          case 4:
                            return s.label++, { value: i[1], done: !1 };
                          case 5:
                            s.label++, (n = i[1]), (i = [0]);
                            continue;
                          case 7:
                            (i = s.ops.pop()), s.trys.pop();
                            continue;
                          default:
                            if (
                              !((a = s.trys),
                              (a = a.length > 0 && a[a.length - 1]) ||
                                (6 !== i[0] && 2 !== i[0]))
                            ) {
                              s = 0;
                              continue;
                            }
                            if (
                              3 === i[0] &&
                              (!a || (i[1] > a[0] && i[1] < a[3]))
                            ) {
                              s.label = i[1];
                              break;
                            }
                            if (6 === i[0] && s.label < a[1]) {
                              (s.label = a[1]), (a = i);
                              break;
                            }
                            if (a && s.label < a[2]) {
                              (s.label = a[2]), s.ops.push(i);
                              break;
                            }
                            a[2] && s.ops.pop(), s.trys.pop();
                            continue;
                        }
                        i = t.call(e, s);
                      } catch (e) {
                        (i = [6, e]), (n = 0);
                      } finally {
                        r = a = 0;
                      }
                    if (5 & i[0]) throw i[1];
                    return { value: i[0] ? i[1] : void 0, done: !0 };
                  })([i, o]);
                };
              }
            },
            G = function (e) {
              return (
                void 0 === e && (e = {}),
                U(void 0, void 0, void 0, function () {
                  var t;
                  return F(this, function (r) {
                    switch (r.label) {
                      case 0:
                        return [
                          4,
                          Promise.all(
                            (e.detectors || []).map(function (t) {
                              return U(void 0, void 0, void 0, function () {
                                var r, n;
                                return F(this, function (i) {
                                  switch (i.label) {
                                    case 0:
                                      return (
                                        i.trys.push([0, 2, , 3]),
                                        [4, t.detect(e)]
                                      );
                                    case 1:
                                      return (
                                        (r = i.sent()),
                                        f.K.debug(
                                          t.constructor.name +
                                            " found resource.",
                                          r
                                        ),
                                        [2, r]
                                      );
                                    case 2:
                                      return (
                                        (n = i.sent()),
                                        f.K.debug(
                                          t.constructor.name +
                                            " failed: " +
                                            n.message
                                        ),
                                        [2, a._.empty()]
                                      );
                                    case 3:
                                      return [2];
                                  }
                                });
                              });
                            })
                          ),
                        ];
                      case 1:
                        return (
                          (t = r.sent()),
                          Z(t),
                          [
                            2,
                            t.reduce(function (e, t) {
                              return e.merge(t);
                            }, a._.empty()),
                          ]
                        );
                    }
                  });
                })
              );
            },
            V = function (e) {
              var t;
              void 0 === e && (e = {});
              var r = (null !== (t = e.detectors) && void 0 !== t ? t : []).map(
                  function (t) {
                    try {
                      var r,
                        n = t.detect(e);
                      if (
                        null !== (i = n) &&
                        "object" == typeof i &&
                        "function" == typeof i.then
                      ) {
                        r = new a._(
                          {},
                          U(void 0, void 0, void 0, function () {
                            return F(this, function (e) {
                              switch (e.label) {
                                case 0:
                                  return [4, n];
                                case 1:
                                  return [2, e.sent().attributes];
                              }
                            });
                          })
                        );
                      } else r = n;
                      return (
                        r.waitForAsyncAttributes
                          ? r.waitForAsyncAttributes().then(function () {
                              return f.K.debug(
                                t.constructor.name + " found resource.",
                                r
                              );
                            })
                          : f.K.debug(
                              t.constructor.name + " found resource.",
                              r
                            ),
                        r
                      );
                    } catch (e) {
                      return (
                        f.K.error(t.constructor.name + " failed: " + e.message),
                        a._.empty()
                      );
                    }
                    var i;
                  }
                ),
                n = r.reduce(function (e, t) {
                  return e.merge(t);
                }, a._.empty());
              return (
                n.waitForAsyncAttributes &&
                  n.waitForAsyncAttributes().then(function () {
                    Z(r);
                  }),
                n
              );
            },
            Z = function (e) {
              e.forEach(function (e) {
                if (Object.keys(e.attributes).length > 0) {
                  var t = JSON.stringify(e.attributes, null, 4);
                  f.K.verbose(t);
                }
              });
            };
        },
        2660: (e, t, r) => {
          "use strict";
          function n() {
            return "unknown_service";
          }
          r.d(t, { u: () => n });
        },
        4289: (e, t, r) => {
          "use strict";
          r.d(t, { R9: () => n, Te: () => a });
          var n = {
              CLOUD_PROVIDER: "cloud.provider",
              CLOUD_ACCOUNT_ID: "cloud.account.id",
              CLOUD_REGION: "cloud.region",
              CLOUD_AVAILABILITY_ZONE: "cloud.availability_zone",
              CLOUD_PLATFORM: "cloud.platform",
              AWS_ECS_CONTAINER_ARN: "aws.ecs.container.arn",
              AWS_ECS_CLUSTER_ARN: "aws.ecs.cluster.arn",
              AWS_ECS_LAUNCHTYPE: "aws.ecs.launchtype",
              AWS_ECS_TASK_ARN: "aws.ecs.task.arn",
              AWS_ECS_TASK_FAMILY: "aws.ecs.task.family",
              AWS_ECS_TASK_REVISION: "aws.ecs.task.revision",
              AWS_EKS_CLUSTER_ARN: "aws.eks.cluster.arn",
              AWS_LOG_GROUP_NAMES: "aws.log.group.names",
              AWS_LOG_GROUP_ARNS: "aws.log.group.arns",
              AWS_LOG_STREAM_NAMES: "aws.log.stream.names",
              AWS_LOG_STREAM_ARNS: "aws.log.stream.arns",
              CONTAINER_NAME: "container.name",
              CONTAINER_ID: "container.id",
              CONTAINER_RUNTIME: "container.runtime",
              CONTAINER_IMAGE_NAME: "container.image.name",
              CONTAINER_IMAGE_TAG: "container.image.tag",
              DEPLOYMENT_ENVIRONMENT: "deployment.environment",
              DEVICE_ID: "device.id",
              DEVICE_MODEL_IDENTIFIER: "device.model.identifier",
              DEVICE_MODEL_NAME: "device.model.name",
              FAAS_NAME: "faas.name",
              FAAS_ID: "faas.id",
              FAAS_VERSION: "faas.version",
              FAAS_INSTANCE: "faas.instance",
              FAAS_MAX_MEMORY: "faas.max_memory",
              HOST_ID: "host.id",
              HOST_NAME: "host.name",
              HOST_TYPE: "host.type",
              HOST_ARCH: "host.arch",
              HOST_IMAGE_NAME: "host.image.name",
              HOST_IMAGE_ID: "host.image.id",
              HOST_IMAGE_VERSION: "host.image.version",
              K8S_CLUSTER_NAME: "k8s.cluster.name",
              K8S_NODE_NAME: "k8s.node.name",
              K8S_NODE_UID: "k8s.node.uid",
              K8S_NAMESPACE_NAME: "k8s.namespace.name",
              K8S_POD_UID: "k8s.pod.uid",
              K8S_POD_NAME: "k8s.pod.name",
              K8S_CONTAINER_NAME: "k8s.container.name",
              K8S_REPLICASET_UID: "k8s.replicaset.uid",
              K8S_REPLICASET_NAME: "k8s.replicaset.name",
              K8S_DEPLOYMENT_UID: "k8s.deployment.uid",
              K8S_DEPLOYMENT_NAME: "k8s.deployment.name",
              K8S_STATEFULSET_UID: "k8s.statefulset.uid",
              K8S_STATEFULSET_NAME: "k8s.statefulset.name",
              K8S_DAEMONSET_UID: "k8s.daemonset.uid",
              K8S_DAEMONSET_NAME: "k8s.daemonset.name",
              K8S_JOB_UID: "k8s.job.uid",
              K8S_JOB_NAME: "k8s.job.name",
              K8S_CRONJOB_UID: "k8s.cronjob.uid",
              K8S_CRONJOB_NAME: "k8s.cronjob.name",
              OS_TYPE: "os.type",
              OS_DESCRIPTION: "os.description",
              OS_NAME: "os.name",
              OS_VERSION: "os.version",
              PROCESS_PID: "process.pid",
              PROCESS_EXECUTABLE_NAME: "process.executable.name",
              PROCESS_EXECUTABLE_PATH: "process.executable.path",
              PROCESS_COMMAND: "process.command",
              PROCESS_COMMAND_LINE: "process.command_line",
              PROCESS_COMMAND_ARGS: "process.command_args",
              PROCESS_OWNER: "process.owner",
              PROCESS_RUNTIME_NAME: "process.runtime.name",
              PROCESS_RUNTIME_VERSION: "process.runtime.version",
              PROCESS_RUNTIME_DESCRIPTION: "process.runtime.description",
              SERVICE_NAME: "service.name",
              SERVICE_NAMESPACE: "service.namespace",
              SERVICE_INSTANCE_ID: "service.instance.id",
              SERVICE_VERSION: "service.version",
              TELEMETRY_SDK_NAME: "telemetry.sdk.name",
              TELEMETRY_SDK_LANGUAGE: "telemetry.sdk.language",
              TELEMETRY_SDK_VERSION: "telemetry.sdk.version",
              TELEMETRY_AUTO_VERSION: "telemetry.auto.version",
              WEBENGINE_NAME: "webengine.name",
              WEBENGINE_VERSION: "webengine.version",
              WEBENGINE_DESCRIPTION: "webengine.description",
            },
            a = {
              CPP: "cpp",
              DOTNET: "dotnet",
              ERLANG: "erlang",
              GO: "go",
              JAVA: "java",
              NODEJS: "nodejs",
              PHP: "php",
              PYTHON: "python",
              RUBY: "ruby",
              WEBJS: "webjs",
            };
        },
        5984: (e, t, r) => {
          "use strict";
          r.d(t, { u: () => te, X: () => H });
          var n,
            a,
            i = r(928),
            s = r(2210),
            o = r(6339),
            c = r(8303),
            d = "[object Null]",
            u = "[object Undefined]",
            l = Function.prototype.toString,
            p = l.call(Object),
            h =
              ((n = Object.getPrototypeOf),
              (a = Object),
              function (e) {
                return n(a(e));
              }),
            _ = Object.prototype,
            f = _.hasOwnProperty,
            m = Symbol ? Symbol.toStringTag : void 0,
            v = _.toString;
          function g(e) {
            if (
              !(function (e) {
                return null != e && "object" == typeof e;
              })(e) ||
              "[object Object]" !==
                (function (e) {
                  if (null == e) return void 0 === e ? u : d;
                  return m && m in Object(e)
                    ? (function (e) {
                        var t = f.call(e, m),
                          r = e[m],
                          n = !1;
                        try {
                          (e[m] = void 0), (n = !0);
                        } catch (e) {}
                        var a = v.call(e);
                        n && (t ? (e[m] = r) : delete e[m]);
                        return a;
                      })(e)
                    : (function (e) {
                        return v.call(e);
                      })(e);
                })(e)
            )
              return !1;
            var t = h(e);
            if (null === t) return !0;
            var r = f.call(t, "constructor") && t.constructor;
            return "function" == typeof r && r instanceof r && l.call(r) === p;
          }
          function y(e) {
            return E(e) ? e.slice() : e;
          }
          function b(e, t, r, n) {
            var a;
            if ((void 0 === r && (r = 0), !(r > 20))) {
              if ((r++, w(e) || w(t) || T(t))) a = y(t);
              else if (E(e)) {
                if (((a = e.slice()), E(t)))
                  for (var i = 0, s = t.length; i < s; i++) a.push(y(t[i]));
                else if (S(t))
                  for (i = 0, s = (o = Object.keys(t)).length; i < s; i++) {
                    a[(c = o[i])] = y(t[c]);
                  }
              } else if (S(e))
                if (S(t)) {
                  if (
                    !(function (e, t) {
                      if (!g(e) || !g(t)) return !1;
                      return !0;
                    })(e, t)
                  )
                    return t;
                  a = Object.assign({}, e);
                  var o;
                  for (i = 0, s = (o = Object.keys(t)).length; i < s; i++) {
                    var c,
                      d = t[(c = o[i])];
                    if (w(d)) void 0 === d ? delete a[c] : (a[c] = d);
                    else {
                      var u = a[c],
                        l = d;
                      if (x(e, c, n) || x(t, c, n)) delete a[c];
                      else {
                        if (S(u) && S(l)) {
                          var p = n.get(u) || [],
                            h = n.get(l) || [];
                          p.push({ obj: e, key: c }),
                            h.push({ obj: t, key: c }),
                            n.set(u, p),
                            n.set(l, h);
                        }
                        a[c] = b(a[c], d, r, n);
                      }
                    }
                  }
                } else a = t;
              return a;
            }
          }
          function x(e, t, r) {
            for (var n = r.get(e[t]) || [], a = 0, i = n.length; a < i; a++) {
              var s = n[a];
              if (s.key === t && s.obj === e) return !0;
            }
            return !1;
          }
          function E(e) {
            return Array.isArray(e);
          }
          function T(e) {
            return "function" == typeof e;
          }
          function S(e) {
            return !w(e) && !E(e) && !T(e) && "object" == typeof e;
          }
          function w(e) {
            return (
              "string" == typeof e ||
              "number" == typeof e ||
              "boolean" == typeof e ||
              void 0 === e ||
              e instanceof Date ||
              e instanceof RegExp ||
              null === e
            );
          }
          var R = r(8343),
            P = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            O = (function () {
              function e(e) {
                var t;
                void 0 === e && (e = {}),
                  (this._propagators =
                    null !== (t = e.propagators) && void 0 !== t ? t : []),
                  (this._fields = Array.from(
                    new Set(
                      this._propagators
                        .map(function (e) {
                          return "function" == typeof e.fields
                            ? e.fields()
                            : [];
                        })
                        .reduce(function (e, t) {
                          return e.concat(t);
                        }, [])
                    )
                  ));
              }
              return (
                (e.prototype.inject = function (e, t, r) {
                  var n, a;
                  try {
                    for (
                      var s = P(this._propagators), o = s.next();
                      !o.done;
                      o = s.next()
                    ) {
                      var c = o.value;
                      try {
                        c.inject(e, t, r);
                      } catch (e) {
                        i.K.warn(
                          "Failed to inject with " +
                            c.constructor.name +
                            ". Err: " +
                            e.message
                        );
                      }
                    }
                  } catch (e) {
                    n = { error: e };
                  } finally {
                    try {
                      o && !o.done && (a = s.return) && a.call(s);
                    } finally {
                      if (n) throw n.error;
                    }
                  }
                }),
                (e.prototype.extract = function (e, t, r) {
                  return this._propagators.reduce(function (e, n) {
                    try {
                      return n.extract(e, t, r);
                    } catch (e) {
                      i.K.warn(
                        "Failed to inject with " +
                          n.constructor.name +
                          ". Err: " +
                          e.message
                      );
                    }
                    return e;
                  }, e);
                }),
                (e.prototype.fields = function () {
                  return this._fields.slice();
                }),
                e
              );
            })(),
            k = r(7228),
            C = r(8726),
            I = r(5731),
            L = new RegExp(
              "^(?:[a-z][_0-9a-z-*/]{0,255}|[a-z0-9][_0-9a-z-*/]{0,240}@[a-z][_0-9a-z-*/]{0,13})$"
            ),
            D = /^[ -~]{0,255}[!-~]$/,
            A = /,|=/;
          var M = (function () {
              function e(e) {
                (this._internalState = new Map()), e && this._parse(e);
              }
              return (
                (e.prototype.set = function (e, t) {
                  var r = this._clone();
                  return (
                    r._internalState.has(e) && r._internalState.delete(e),
                    r._internalState.set(e, t),
                    r
                  );
                }),
                (e.prototype.unset = function (e) {
                  var t = this._clone();
                  return t._internalState.delete(e), t;
                }),
                (e.prototype.get = function (e) {
                  return this._internalState.get(e);
                }),
                (e.prototype.serialize = function () {
                  var e = this;
                  return this._keys()
                    .reduce(function (t, r) {
                      return t.push(r + "=" + e.get(r)), t;
                    }, [])
                    .join(",");
                }),
                (e.prototype._parse = function (e) {
                  e.length > 512 ||
                    ((this._internalState = e
                      .split(",")
                      .reverse()
                      .reduce(function (e, t) {
                        var r = t.trim(),
                          n = r.indexOf("=");
                        if (-1 !== n) {
                          var a = r.slice(0, n),
                            i = r.slice(n + 1, t.length);
                          (function (e) {
                            return L.test(e);
                          })(a) &&
                            (function (e) {
                              return D.test(e) && !A.test(e);
                            })(i) &&
                            e.set(a, i);
                        }
                        return e;
                      }, new Map())),
                    this._internalState.size > 32 &&
                      (this._internalState = new Map(
                        Array.from(this._internalState.entries())
                          .reverse()
                          .slice(0, 32)
                      )));
                }),
                (e.prototype._keys = function () {
                  return Array.from(this._internalState.keys()).reverse();
                }),
                (e.prototype._clone = function () {
                  var t = new e();
                  return (t._internalState = new Map(this._internalState)), t;
                }),
                e
              );
            })(),
            N = "traceparent",
            j = "tracestate",
            B = new RegExp(
              "^\\s?((?!ff)[\\da-f]{2})-((?![0]{32})[\\da-f]{32})-((?![0]{16})[\\da-f]{16})-([\\da-f]{2})(-.*)?\\s?$"
            );
          var U = (function () {
              function e() {}
              return (
                (e.prototype.inject = function (e, t, r) {
                  var n = s.g.getSpanContext(e);
                  if (n && !(0, I.Ll)(e) && (0, k.BM)(n)) {
                    var a =
                      "00-" +
                      n.traceId +
                      "-" +
                      n.spanId +
                      "-0" +
                      Number(n.traceFlags || C.r.NONE).toString(16);
                    r.set(t, N, a),
                      n.traceState && r.set(t, j, n.traceState.serialize());
                  }
                }),
                (e.prototype.extract = function (e, t, r) {
                  var n = r.get(t, N);
                  if (!n) return e;
                  var a = Array.isArray(n) ? n[0] : n;
                  if ("string" != typeof a) return e;
                  var i = (function (e) {
                    var t = B.exec(e);
                    return t
                      ? "00" === t[1] && t[5]
                        ? null
                        : {
                            traceId: t[2],
                            spanId: t[3],
                            traceFlags: parseInt(t[4], 16),
                          }
                      : null;
                  })(a);
                  if (!i) return e;
                  i.isRemote = !0;
                  var o = r.get(t, j);
                  if (o) {
                    var c = Array.isArray(o) ? o.join(",") : o;
                    i.traceState = new M("string" == typeof c ? c : void 0);
                  }
                  return s.g.setSpanContext(e, i);
                }),
                (e.prototype.fields = function () {
                  return [N, j];
                }),
                e
              );
            })(),
            F = "baggage",
            G = r(2599),
            V = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            };
          function Z(e) {
            var t = e.split(";");
            if (!(t.length <= 0)) {
              var r = t.shift();
              if (r) {
                var n = r.indexOf("=");
                if (!(n <= 0)) {
                  var a,
                    i = decodeURIComponent(r.substring(0, n).trim()),
                    s = decodeURIComponent(r.substring(n + 1).trim());
                  return (
                    t.length > 0 && (a = (0, G.u)(t.join(";"))),
                    { key: i, value: s, metadata: a }
                  );
                }
              }
            }
          }
          var H,
            W = (function () {
              function e() {}
              return (
                (e.prototype.inject = function (e, t, r) {
                  var n = c.u.getBaggage(e);
                  if (n && !(0, I.Ll)(e)) {
                    var a = (function (e) {
                        return e.getAllEntries().map(function (e) {
                          var t = V(e, 2),
                            r = t[0],
                            n = t[1],
                            a =
                              encodeURIComponent(r) +
                              "=" +
                              encodeURIComponent(n.value);
                          return (
                            void 0 !== n.metadata &&
                              (a += ";" + n.metadata.toString()),
                            a
                          );
                        });
                      })(n)
                        .filter(function (e) {
                          return e.length <= 4096;
                        })
                        .slice(0, 180),
                      i = (function (e) {
                        return e.reduce(function (e, t) {
                          var r = e + ("" !== e ? "," : "") + t;
                          return r.length > 8192 ? e : r;
                        }, "");
                      })(a);
                    i.length > 0 && r.set(t, F, i);
                  }
                }),
                (e.prototype.extract = function (e, t, r) {
                  var n = r.get(t, F),
                    a = Array.isArray(n) ? n.join(",") : n;
                  if (!a) return e;
                  var i = {};
                  return 0 === a.length
                    ? e
                    : (a.split(",").forEach(function (e) {
                        var t = Z(e);
                        if (t) {
                          var r = { value: t.value };
                          t.metadata && (r.metadata = t.metadata),
                            (i[t.key] = r);
                        }
                      }),
                      0 === Object.entries(i).length
                        ? e
                        : c.u.setBaggage(e, c.u.createBaggage(i)));
                }),
                (e.prototype.fields = function () {
                  return [F];
                }),
                e
              );
            })(),
            z = r(3766),
            K = r(5611),
            X = r(5946),
            q = r(6823),
            $ = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            J = (function () {
              function e(e) {
                this._spanProcessors = e;
              }
              return (
                (e.prototype.forceFlush = function () {
                  var e,
                    t,
                    r = [];
                  try {
                    for (
                      var n = $(this._spanProcessors), a = n.next();
                      !a.done;
                      a = n.next()
                    ) {
                      var i = a.value;
                      r.push(i.forceFlush());
                    }
                  } catch (t) {
                    e = { error: t };
                  } finally {
                    try {
                      a && !a.done && (t = n.return) && t.call(n);
                    } finally {
                      if (e) throw e.error;
                    }
                  }
                  return new Promise(function (e) {
                    Promise.all(r)
                      .then(function () {
                        e();
                      })
                      .catch(function (t) {
                        (0, q.L)(
                          t ||
                            new Error("MultiSpanProcessor: forceFlush failed")
                        ),
                          e();
                      });
                  });
                }),
                (e.prototype.onStart = function (e, t) {
                  var r, n;
                  try {
                    for (
                      var a = $(this._spanProcessors), i = a.next();
                      !i.done;
                      i = a.next()
                    ) {
                      i.value.onStart(e, t);
                    }
                  } catch (e) {
                    r = { error: e };
                  } finally {
                    try {
                      i && !i.done && (n = a.return) && n.call(a);
                    } finally {
                      if (r) throw r.error;
                    }
                  }
                }),
                (e.prototype.onEnd = function (e) {
                  var t, r;
                  try {
                    for (
                      var n = $(this._spanProcessors), a = n.next();
                      !a.done;
                      a = n.next()
                    ) {
                      a.value.onEnd(e);
                    }
                  } catch (e) {
                    t = { error: e };
                  } finally {
                    try {
                      a && !a.done && (r = n.return) && r.call(n);
                    } finally {
                      if (t) throw t.error;
                    }
                  }
                }),
                (e.prototype.shutdown = function () {
                  var e,
                    t,
                    r = [];
                  try {
                    for (
                      var n = $(this._spanProcessors), a = n.next();
                      !a.done;
                      a = n.next()
                    ) {
                      var i = a.value;
                      r.push(i.shutdown());
                    }
                  } catch (t) {
                    e = { error: t };
                  } finally {
                    try {
                      a && !a.done && (t = n.return) && t.call(n);
                    } finally {
                      if (e) throw e.error;
                    }
                  }
                  return new Promise(function (e, t) {
                    Promise.all(r).then(function () {
                      e();
                    }, t);
                  });
                }),
                e
              );
            })(),
            Y = r(7498),
            Q = r(4329),
            ee = r(1314);
          !(function (e) {
            (e[(e.resolved = 0)] = "resolved"),
              (e[(e.timeout = 1)] = "timeout"),
              (e[(e.error = 2)] = "error"),
              (e[(e.unresolved = 3)] = "unresolved");
          })(H || (H = {}));
          var te = (function () {
            function e(e) {
              var t;
              void 0 === e && (e = {}),
                (this._registeredSpanProcessors = []),
                (this._tracers = new Map());
              var r = (function () {
                for (var e = [], t = 0; t < arguments.length; t++)
                  e[t] = arguments[t];
                for (var r = e.shift(), n = new WeakMap(); e.length > 0; )
                  r = b(r, e.shift(), 0, n);
                return r;
              })({}, (0, X.K)(), (0, ee.r)(e));
              (this.resource =
                null !== (t = r.resource) && void 0 !== t ? t : z._.empty()),
                (this.resource = z._.default().merge(this.resource)),
                (this._config = Object.assign({}, r, {
                  resource: this.resource,
                }));
              var n = this._buildExporterFromEnv();
              if (void 0 !== n) {
                var a = new Q.p(n);
                this.activeSpanProcessor = a;
              } else this.activeSpanProcessor = new Y.m();
            }
            return (
              (e.prototype.getTracer = function (e, t, r) {
                var n =
                  e +
                  "@" +
                  (t || "") +
                  ":" +
                  ((null == r ? void 0 : r.schemaUrl) || "");
                return (
                  this._tracers.has(n) ||
                    this._tracers.set(
                      n,
                      new K.k(
                        {
                          name: e,
                          version: t,
                          schemaUrl: null == r ? void 0 : r.schemaUrl,
                        },
                        this._config,
                        this
                      )
                    ),
                  this._tracers.get(n)
                );
              }),
              (e.prototype.addSpanProcessor = function (e) {
                0 === this._registeredSpanProcessors.length &&
                  this.activeSpanProcessor.shutdown().catch(function (e) {
                    return i.K.error(
                      "Error while trying to shutdown current span processor",
                      e
                    );
                  }),
                  this._registeredSpanProcessors.push(e),
                  (this.activeSpanProcessor = new J(
                    this._registeredSpanProcessors
                  ));
              }),
              (e.prototype.getActiveSpanProcessor = function () {
                return this.activeSpanProcessor;
              }),
              (e.prototype.register = function (e) {
                void 0 === e && (e = {}),
                  s.g.setGlobalTracerProvider(this),
                  void 0 === e.propagator &&
                    (e.propagator = this._buildPropagatorFromEnv()),
                  e.contextManager &&
                    o.D.setGlobalContextManager(e.contextManager),
                  e.propagator && c.u.setGlobalPropagator(e.propagator);
              }),
              (e.prototype.forceFlush = function () {
                var e = this._config.forceFlushTimeoutMillis,
                  t = this._registeredSpanProcessors.map(function (t) {
                    return new Promise(function (r) {
                      var n,
                        a = setTimeout(function () {
                          r(
                            new Error(
                              "Span processor did not completed within timeout period of " +
                                e +
                                " ms"
                            )
                          ),
                            (n = H.timeout);
                        }, e);
                      t.forceFlush()
                        .then(function () {
                          clearTimeout(a),
                            n !== H.timeout && ((n = H.resolved), r(n));
                        })
                        .catch(function (e) {
                          clearTimeout(a), (n = H.error), r(e);
                        });
                    });
                  });
                return new Promise(function (e, r) {
                  Promise.all(t)
                    .then(function (t) {
                      var n = t.filter(function (e) {
                        return e !== H.resolved;
                      });
                      n.length > 0 ? r(n) : e();
                    })
                    .catch(function (e) {
                      return r([e]);
                    });
                });
              }),
              (e.prototype.shutdown = function () {
                return this.activeSpanProcessor.shutdown();
              }),
              (e.prototype._getPropagator = function (e) {
                var t;
                return null ===
                  (t = this.constructor._registeredPropagators.get(e)) ||
                  void 0 === t
                  ? void 0
                  : t();
              }),
              (e.prototype._getSpanExporter = function (e) {
                var t;
                return null ===
                  (t = this.constructor._registeredExporters.get(e)) ||
                  void 0 === t
                  ? void 0
                  : t();
              }),
              (e.prototype._buildPropagatorFromEnv = function () {
                var e = this,
                  t = Array.from(new Set((0, R.d)().OTEL_PROPAGATORS)),
                  r = t
                    .map(function (t) {
                      var r = e._getPropagator(t);
                      return (
                        r ||
                          i.K.warn(
                            'Propagator "' +
                              t +
                              '" requested through environment variable is unavailable.'
                          ),
                        r
                      );
                    })
                    .reduce(function (e, t) {
                      return t && e.push(t), e;
                    }, []);
                return 0 === r.length
                  ? void 0
                  : 1 === t.length
                  ? r[0]
                  : new O({ propagators: r });
              }),
              (e.prototype._buildExporterFromEnv = function () {
                var e = (0, R.d)().OTEL_TRACES_EXPORTER;
                if ("none" !== e && "" !== e) {
                  var t = this._getSpanExporter(e);
                  return (
                    t ||
                      i.K.error(
                        'Exporter "' +
                          e +
                          '" requested through environment variable is unavailable.'
                      ),
                    t
                  );
                }
              }),
              (e._registeredPropagators = new Map([
                [
                  "tracecontext",
                  function () {
                    return new U();
                  },
                ],
                [
                  "baggage",
                  function () {
                    return new W();
                  },
                ],
              ])),
              (e._registeredExporters = new Map()),
              e
            );
          })();
        },
        4977: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { U: () => n }),
            (function (e) {
              (e[(e.NOT_RECORD = 0)] = "NOT_RECORD"),
                (e[(e.RECORD = 1)] = "RECORD"),
                (e[(e.RECORD_AND_SAMPLED = 2)] = "RECORD_AND_SAMPLED");
            })(n || (n = {}));
        },
        7611: (e, t, r) => {
          "use strict";
          r.d(t, { D: () => h });
          var n = r(1820),
            a = r(928),
            i = r(3149),
            s = r(8669),
            o = r(5778),
            c = "exception.type",
            d = "exception.message",
            u = "exception.stacktrace",
            l = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            p = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            h = (function () {
              function e(e, t, r, a, o, c, d, u, l) {
                void 0 === d && (d = []),
                  (this.attributes = {}),
                  (this.links = []),
                  (this.events = []),
                  (this._droppedAttributesCount = 0),
                  (this._droppedEventsCount = 0),
                  (this._droppedLinksCount = 0),
                  (this.status = { code: n.Q.UNSET }),
                  (this.endTime = [0, 0]),
                  (this._ended = !1),
                  (this._duration = [-1, -1]),
                  (this.name = r),
                  (this._spanContext = a),
                  (this.parentSpanId = c),
                  (this.kind = o),
                  (this.links = d);
                var p = Date.now();
                (this._performanceStartTime = i.t.now()),
                  (this._performanceOffset =
                    p - (this._performanceStartTime + (0, s.U)())),
                  (this._startTimeProvided = null != u),
                  (this.startTime = this._getTime(null != u ? u : p)),
                  (this.resource = e.resource),
                  (this.instrumentationLibrary = e.instrumentationLibrary),
                  (this._spanLimits = e.getSpanLimits()),
                  (this._spanProcessor = e.getActiveSpanProcessor()),
                  this._spanProcessor.onStart(this, t),
                  (this._attributeValueLengthLimit =
                    this._spanLimits.attributeValueLengthLimit || 0);
              }
              return (
                (e.prototype.spanContext = function () {
                  return this._spanContext;
                }),
                (e.prototype.setAttribute = function (e, t) {
                  return null == t || this._isSpanEnded()
                    ? this
                    : 0 === e.length
                    ? (a.K.warn("Invalid attribute key: " + e), this)
                    : (0, o.Do)(t)
                    ? Object.keys(this.attributes).length >=
                        this._spanLimits.attributeCountLimit &&
                      !Object.prototype.hasOwnProperty.call(this.attributes, e)
                      ? (this._droppedAttributesCount++, this)
                      : ((this.attributes[e] = this._truncateToSize(t)), this)
                    : (a.K.warn("Invalid attribute value set for key: " + e),
                      this);
                }),
                (e.prototype.setAttributes = function (e) {
                  var t, r;
                  try {
                    for (
                      var n = l(Object.entries(e)), a = n.next();
                      !a.done;
                      a = n.next()
                    ) {
                      var i = p(a.value, 2),
                        s = i[0],
                        o = i[1];
                      this.setAttribute(s, o);
                    }
                  } catch (e) {
                    t = { error: e };
                  } finally {
                    try {
                      a && !a.done && (r = n.return) && r.call(n);
                    } finally {
                      if (t) throw t.error;
                    }
                  }
                  return this;
                }),
                (e.prototype.addEvent = function (e, t, r) {
                  if (this._isSpanEnded()) return this;
                  if (0 === this._spanLimits.eventCountLimit)
                    return (
                      a.K.warn("No events allowed."),
                      this._droppedEventsCount++,
                      this
                    );
                  this.events.length >= this._spanLimits.eventCountLimit &&
                    (a.K.warn("Dropping extra events."),
                    this.events.shift(),
                    this._droppedEventsCount++),
                    (0, s.X_)(t) && ((0, s.X_)(r) || (r = t), (t = void 0));
                  var n = (0, o.FT)(t);
                  return (
                    this.events.push({
                      name: e,
                      attributes: n,
                      time: this._getTime(r),
                      droppedAttributesCount: 0,
                    }),
                    this
                  );
                }),
                (e.prototype.setStatus = function (e) {
                  return this._isSpanEnded() || (this.status = e), this;
                }),
                (e.prototype.updateName = function (e) {
                  return this._isSpanEnded() || (this.name = e), this;
                }),
                (e.prototype.end = function (e) {
                  this._isSpanEnded()
                    ? a.K.error(
                        this.name +
                          " " +
                          this._spanContext.traceId +
                          "-" +
                          this._spanContext.spanId +
                          " - You can only call end() on a span once."
                      )
                    : ((this._ended = !0),
                      (this.endTime = this._getTime(e)),
                      (this._duration = (0, s.J3)(
                        this.startTime,
                        this.endTime
                      )),
                      this._duration[0] < 0 &&
                        (a.K.warn(
                          "Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.",
                          this.startTime,
                          this.endTime
                        ),
                        (this.endTime = this.startTime.slice()),
                        (this._duration = [0, 0])),
                      this._spanProcessor.onEnd(this));
                }),
                (e.prototype._getTime = function (e) {
                  if ("number" == typeof e && e < i.t.now())
                    return (0, s.Jt)(e + this._performanceOffset);
                  if ("number" == typeof e) return (0, s.i5)(e);
                  if (e instanceof Date) return (0, s.i5)(e.getTime());
                  if ((0, s.Dt)(e)) return e;
                  if (this._startTimeProvided) return (0, s.i5)(Date.now());
                  var t = i.t.now() - this._performanceStartTime;
                  return (0, s.vF)(this.startTime, (0, s.i5)(t));
                }),
                (e.prototype.isRecording = function () {
                  return !1 === this._ended;
                }),
                (e.prototype.recordException = function (e, t) {
                  var r = {};
                  "string" == typeof e
                    ? (r[d] = e)
                    : e &&
                      (e.code
                        ? (r[c] = e.code.toString())
                        : e.name && (r[c] = e.name),
                      e.message && (r[d] = e.message),
                      e.stack && (r[u] = e.stack)),
                    r[c] || r[d]
                      ? this.addEvent("exception", r, t)
                      : a.K.warn("Failed to record an exception " + e);
                }),
                Object.defineProperty(e.prototype, "duration", {
                  get: function () {
                    return this._duration;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                Object.defineProperty(e.prototype, "ended", {
                  get: function () {
                    return this._ended;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                Object.defineProperty(e.prototype, "droppedAttributesCount", {
                  get: function () {
                    return this._droppedAttributesCount;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                Object.defineProperty(e.prototype, "droppedEventsCount", {
                  get: function () {
                    return this._droppedEventsCount;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                Object.defineProperty(e.prototype, "droppedLinksCount", {
                  get: function () {
                    return this._droppedLinksCount;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                (e.prototype._isSpanEnded = function () {
                  return (
                    this._ended &&
                      a.K.warn(
                        "Can not execute the operation on ended Span {traceId: " +
                          this._spanContext.traceId +
                          ", spanId: " +
                          this._spanContext.spanId +
                          "}"
                      ),
                    this._ended
                  );
                }),
                (e.prototype._truncateToLimitUtil = function (e, t) {
                  return e.length <= t ? e : e.substr(0, t);
                }),
                (e.prototype._truncateToSize = function (e) {
                  var t = this,
                    r = this._attributeValueLengthLimit;
                  return r <= 0
                    ? (a.K.warn(
                        "Attribute value limit must be positive, got " + r
                      ),
                      e)
                    : "string" == typeof e
                    ? this._truncateToLimitUtil(e, r)
                    : Array.isArray(e)
                    ? e.map(function (e) {
                        return "string" == typeof e
                          ? t._truncateToLimitUtil(e, r)
                          : e;
                      })
                    : e;
                }),
                e
              );
            })();
        },
        5611: (e, t, r) => {
          "use strict";
          r.d(t, { k: () => f });
          var n = r(6339),
            a = r(2210),
            i = r(928),
            s = r(7007),
            o = r(87),
            c = r(2297),
            d = r(8726),
            u = r(5731),
            l = r(5778),
            p = r(7611),
            h = r(1314),
            _ = r(90),
            f = (function () {
              function e(e, t, r) {
                this._tracerProvider = r;
                var n = (0, h.f)(t);
                (this._sampler = n.sampler),
                  (this._generalLimits = n.generalLimits),
                  (this._spanLimits = n.spanLimits),
                  (this._idGenerator = t.idGenerator || new _.m()),
                  (this.resource = r.resource),
                  (this.instrumentationLibrary = e);
              }
              return (
                (e.prototype.startSpan = function (e, t, r) {
                  var h, _, f;
                  void 0 === t && (t = {}),
                    void 0 === r && (r = n.D.active()),
                    t.root && (r = a.g.deleteSpan(r));
                  var m = a.g.getSpan(r);
                  if ((0, u.Ll)(r))
                    return (
                      i.K.debug(
                        "Instrumentation suppressed, returning Noop Span"
                      ),
                      a.g.wrapSpanContext(s.Rr)
                    );
                  var v,
                    g,
                    y,
                    b = null == m ? void 0 : m.spanContext(),
                    x = this._idGenerator.generateSpanId();
                  b && a.g.isSpanContextValid(b)
                    ? ((v = b.traceId), (g = b.traceState), (y = b.spanId))
                    : (v = this._idGenerator.generateTraceId());
                  var E =
                      null !== (h = t.kind) && void 0 !== h ? h : o.M.INTERNAL,
                    T = (null !== (_ = t.links) && void 0 !== _ ? _ : []).map(
                      function (e) {
                        return {
                          context: e.context,
                          attributes: (0, l.FT)(e.attributes),
                        };
                      }
                    ),
                    S = (0, l.FT)(t.attributes),
                    w = this._sampler.shouldSample(r, v, e, E, S, T);
                  g = null !== (f = w.traceState) && void 0 !== f ? f : g;
                  var R = {
                    traceId: v,
                    spanId: x,
                    traceFlags:
                      w.decision === c.U.RECORD_AND_SAMPLED
                        ? d.r.SAMPLED
                        : d.r.NONE,
                    traceState: g,
                  };
                  if (w.decision === c.U.NOT_RECORD)
                    return (
                      i.K.debug(
                        "Recording is off, propagating context in a non-recording span"
                      ),
                      a.g.wrapSpanContext(R)
                    );
                  var P = new p.D(this, r, e, R, E, y, T, t.startTime),
                    O = (0, l.FT)(Object.assign(S, w.attributes));
                  return P.setAttributes(O), P;
                }),
                (e.prototype.startActiveSpan = function (e, t, r, i) {
                  var s, o, c;
                  if (!(arguments.length < 2)) {
                    2 === arguments.length
                      ? (c = t)
                      : 3 === arguments.length
                      ? ((s = t), (c = r))
                      : ((s = t), (o = r), (c = i));
                    var d = null != o ? o : n.D.active(),
                      u = this.startSpan(e, s, d),
                      l = a.g.setSpan(d, u);
                    return n.D.with(l, c, void 0, u);
                  }
                }),
                (e.prototype.getGeneralLimits = function () {
                  return this._generalLimits;
                }),
                (e.prototype.getSpanLimits = function () {
                  return this._spanLimits;
                }),
                (e.prototype.getActiveSpanProcessor = function () {
                  return this._tracerProvider.getActiveSpanProcessor();
                }),
                e
              );
            })();
        },
        5946: (e, t, r) => {
          "use strict";
          r.d(t, { K: () => p, V: () => h });
          var n = r(928),
            a = r(8343),
            i = r(6018),
            s = r(6039),
            o = r(1934),
            c = r(356),
            d = r(5751),
            u = (0, a.d)(),
            l = i.J.AlwaysOn;
          function p() {
            return {
              sampler: h(u),
              forceFlushTimeoutMillis: 3e4,
              generalLimits: {
                attributeValueLengthLimit: (0, a.d)()
                  .OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,
                attributeCountLimit: (0, a.d)().OTEL_ATTRIBUTE_COUNT_LIMIT,
              },
              spanLimits: {
                attributeValueLengthLimit: (0, a.d)()
                  .OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,
                attributeCountLimit: (0, a.d)().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,
                linkCountLimit: (0, a.d)().OTEL_SPAN_LINK_COUNT_LIMIT,
                eventCountLimit: (0, a.d)().OTEL_SPAN_EVENT_COUNT_LIMIT,
                attributePerEventCountLimit: (0, a.d)()
                  .OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,
                attributePerLinkCountLimit: (0, a.d)()
                  .OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,
              },
            };
          }
          function h(e) {
            switch ((void 0 === e && (e = (0, a.d)()), e.OTEL_TRACES_SAMPLER)) {
              case i.J.AlwaysOn:
                return new o.t();
              case i.J.AlwaysOff:
                return new s._();
              case i.J.ParentBasedAlwaysOn:
                return new c.N({ root: new o.t() });
              case i.J.ParentBasedAlwaysOff:
                return new c.N({ root: new s._() });
              case i.J.TraceIdRatio:
                return new d.a(_(e));
              case i.J.ParentBasedTraceIdRatio:
                return new c.N({ root: new d.a(_(e)) });
              default:
                return (
                  n.K.error(
                    'OTEL_TRACES_SAMPLER value "' +
                      e.OTEL_TRACES_SAMPLER +
                      " invalid, defaulting to " +
                      l +
                      '".'
                  ),
                  new o.t()
                );
            }
          }
          function _(e) {
            if (
              void 0 === e.OTEL_TRACES_SAMPLER_ARG ||
              "" === e.OTEL_TRACES_SAMPLER_ARG
            )
              return (
                n.K.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to 1."),
                1
              );
            var t = Number(e.OTEL_TRACES_SAMPLER_ARG);
            return isNaN(t)
              ? (n.K.error(
                  "OTEL_TRACES_SAMPLER_ARG=" +
                    e.OTEL_TRACES_SAMPLER_ARG +
                    " was given, but it is invalid, defaulting to 1."
                ),
                1)
              : t < 0 || t > 1
              ? (n.K.error(
                  "OTEL_TRACES_SAMPLER_ARG=" +
                    e.OTEL_TRACES_SAMPLER_ARG +
                    " was given, but it is out of range ([0..1]), defaulting to 1."
                ),
                1)
              : t;
          }
        },
        7498: (e, t, r) => {
          "use strict";
          r.d(t, { m: () => n });
          var n = (function () {
            function e() {}
            return (
              (e.prototype.onStart = function (e, t) {}),
              (e.prototype.onEnd = function (e) {}),
              (e.prototype.shutdown = function () {
                return Promise.resolve();
              }),
              (e.prototype.forceFlush = function () {
                return Promise.resolve();
              }),
              e
            );
          })();
        },
        5239: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              AlwaysOffSampler: () => S._,
              AlwaysOnSampler: () => w.t,
              BasicTracerProvider: () => a.u,
              BatchSpanProcessor: () => i.p,
              ConsoleSpanExporter: () => u,
              ForceFlushState: () => a.X,
              InMemorySpanExporter: () => h,
              NoopSpanProcessor: () => T.m,
              ParentBasedSampler: () => R.N,
              RandomIdGenerator: () => s.m,
              SamplingDecision: () => O.U,
              SimpleSpanProcessor: () => E,
              Span: () => k.D,
              TraceIdRatioBasedSampler: () => P.a,
              Tracer: () => n.k,
            });
          var n = r(5611),
            a = r(5984),
            i = r(4329),
            s = r(90),
            o = r(8669),
            c = r(4932),
            d = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            u = (function () {
              function e() {}
              return (
                (e.prototype.export = function (e, t) {
                  return this._sendSpans(e, t);
                }),
                (e.prototype.shutdown = function () {
                  return this._sendSpans([]), this.forceFlush();
                }),
                (e.prototype.forceFlush = function () {
                  return Promise.resolve();
                }),
                (e.prototype._exportInfo = function (e) {
                  var t;
                  return {
                    traceId: e.spanContext().traceId,
                    parentId: e.parentSpanId,
                    traceState:
                      null === (t = e.spanContext().traceState) || void 0 === t
                        ? void 0
                        : t.serialize(),
                    name: e.name,
                    id: e.spanContext().spanId,
                    kind: e.kind,
                    timestamp: (0, o.ji)(e.startTime),
                    duration: (0, o.ji)(e.duration),
                    attributes: e.attributes,
                    status: e.status,
                    events: e.events,
                    links: e.links,
                  };
                }),
                (e.prototype._sendSpans = function (e, t) {
                  var r, n;
                  try {
                    for (var a = d(e), i = a.next(); !i.done; i = a.next()) {
                      var s = i.value;
                      console.dir(this._exportInfo(s), { depth: 3 });
                    }
                  } catch (e) {
                    r = { error: e };
                  } finally {
                    try {
                      i && !i.done && (n = a.return) && n.call(a);
                    } finally {
                      if (r) throw r.error;
                    }
                  }
                  if (t) return t({ code: c.I.SUCCESS });
                }),
                e
              );
            })(),
            l = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            p = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            h = (function () {
              function e() {
                (this._finishedSpans = []), (this._stopped = !1);
              }
              return (
                (e.prototype.export = function (e, t) {
                  var r;
                  if (this._stopped)
                    return t({
                      code: c.I.FAILED,
                      error: new Error("Exporter has been stopped"),
                    });
                  (r = this._finishedSpans).push.apply(r, p([], l(e), !1)),
                    setTimeout(function () {
                      return t({ code: c.I.SUCCESS });
                    }, 0);
                }),
                (e.prototype.shutdown = function () {
                  return (
                    (this._stopped = !0),
                    (this._finishedSpans = []),
                    this.forceFlush()
                  );
                }),
                (e.prototype.forceFlush = function () {
                  return Promise.resolve();
                }),
                (e.prototype.reset = function () {
                  this._finishedSpans = [];
                }),
                (e.prototype.getFinishedSpans = function () {
                  return this._finishedSpans;
                }),
                e
              );
            })(),
            _ = r(8726),
            f = r(1244),
            m = r(6339),
            v = r(5731);
          var g = {
              _export: function (e, t) {
                return new Promise(function (r) {
                  m.D.with((0, v.hE)(m.D.active()), function () {
                    e.export(t, function (e) {
                      r(e);
                    });
                  });
                });
              },
            },
            y = r(6823),
            b = function (e, t, r, n) {
              return new (r || (r = Promise))(function (a, i) {
                function s(e) {
                  try {
                    c(n.next(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function o(e) {
                  try {
                    c(n.throw(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function c(e) {
                  var t;
                  e.done
                    ? a(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(s, o);
                }
                c((n = n.apply(e, t || [])).next());
              });
            },
            x = function (e, t) {
              var r,
                n,
                a,
                i,
                s = {
                  label: 0,
                  sent: function () {
                    if (1 & a[0]) throw a[1];
                    return a[1];
                  },
                  trys: [],
                  ops: [],
                };
              return (
                (i = { next: o(0), throw: o(1), return: o(2) }),
                "function" == typeof Symbol &&
                  (i[Symbol.iterator] = function () {
                    return this;
                  }),
                i
              );
              function o(i) {
                return function (o) {
                  return (function (i) {
                    if (r)
                      throw new TypeError("Generator is already executing.");
                    for (; s; )
                      try {
                        if (
                          ((r = 1),
                          n &&
                            (a =
                              2 & i[0]
                                ? n.return
                                : i[0]
                                ? n.throw || ((a = n.return) && a.call(n), 0)
                                : n.next) &&
                            !(a = a.call(n, i[1])).done)
                        )
                          return a;
                        switch (
                          ((n = 0), a && (i = [2 & i[0], a.value]), i[0])
                        ) {
                          case 0:
                          case 1:
                            a = i;
                            break;
                          case 4:
                            return s.label++, { value: i[1], done: !1 };
                          case 5:
                            s.label++, (n = i[1]), (i = [0]);
                            continue;
                          case 7:
                            (i = s.ops.pop()), s.trys.pop();
                            continue;
                          default:
                            if (
                              !((a = s.trys),
                              (a = a.length > 0 && a[a.length - 1]) ||
                                (6 !== i[0] && 2 !== i[0]))
                            ) {
                              s = 0;
                              continue;
                            }
                            if (
                              3 === i[0] &&
                              (!a || (i[1] > a[0] && i[1] < a[3]))
                            ) {
                              s.label = i[1];
                              break;
                            }
                            if (6 === i[0] && s.label < a[1]) {
                              (s.label = a[1]), (a = i);
                              break;
                            }
                            if (a && s.label < a[2]) {
                              (s.label = a[2]), s.ops.push(i);
                              break;
                            }
                            a[2] && s.ops.pop(), s.trys.pop();
                            continue;
                        }
                        i = t.call(e, s);
                      } catch (e) {
                        (i = [6, e]), (n = 0);
                      } finally {
                        r = a = 0;
                      }
                    if (5 & i[0]) throw i[1];
                    return { value: i[0] ? i[1] : void 0, done: !0 };
                  })([i, o]);
                };
              }
            },
            E = (function () {
              function e(e) {
                (this._exporter = e),
                  (this._shutdownOnce = new f.q(this._shutdown, this)),
                  (this._unresolvedExports = new Set());
              }
              return (
                (e.prototype.forceFlush = function () {
                  return b(this, void 0, void 0, function () {
                    return x(this, function (e) {
                      switch (e.label) {
                        case 0:
                          return [
                            4,
                            Promise.all(Array.from(this._unresolvedExports)),
                          ];
                        case 1:
                          return (
                            e.sent(),
                            this._exporter.forceFlush
                              ? [4, this._exporter.forceFlush()]
                              : [3, 3]
                          );
                        case 2:
                          e.sent(), (e.label = 3);
                        case 3:
                          return [2];
                      }
                    });
                  });
                }),
                (e.prototype.onStart = function (e, t) {}),
                (e.prototype.onEnd = function (e) {
                  var t,
                    r,
                    n = this;
                  if (
                    !this._shutdownOnce.isCalled &&
                    0 != (e.spanContext().traceFlags & _.r.SAMPLED)
                  ) {
                    var a = function () {
                      return g
                        ._export(n._exporter, [e])
                        .then(function (e) {
                          var t;
                          e.code !== c.I.SUCCESS &&
                            (0, y.L)(
                              null !== (t = e.error) && void 0 !== t
                                ? t
                                : new Error(
                                    "SimpleSpanProcessor: span export failed (status " +
                                      e +
                                      ")"
                                  )
                            );
                        })
                        .catch(function (e) {
                          (0, y.L)(e);
                        });
                    };
                    if (e.resource.asyncAttributesPending) {
                      var i =
                        null ===
                          (r = (t = e.resource).waitForAsyncAttributes) ||
                        void 0 === r
                          ? void 0
                          : r.call(t).then(
                              function () {
                                return (
                                  null != i && n._unresolvedExports.delete(i),
                                  a()
                                );
                              },
                              function (e) {
                                return (0, y.L)(e);
                              }
                            );
                      null != i && this._unresolvedExports.add(i);
                    } else a();
                  }
                }),
                (e.prototype.shutdown = function () {
                  return this._shutdownOnce.call();
                }),
                (e.prototype._shutdown = function () {
                  return this._exporter.shutdown();
                }),
                e
              );
            })(),
            T = r(7498),
            S = r(6039),
            w = r(1934),
            R = r(356),
            P = r(5751),
            O = r(4977),
            k = r(7611);
        },
        90: (e, t, r) => {
          "use strict";
          r.d(t, { m: () => n });
          var n = function () {
              (this.generateTraceId = i(16)), (this.generateSpanId = i(8));
            },
            a = Array(32);
          function i(e) {
            return function () {
              for (var t = 0; t < 2 * e; t++)
                (a[t] = Math.floor(16 * Math.random()) + 48),
                  a[t] >= 58 && (a[t] += 39);
              return String.fromCharCode.apply(null, a.slice(0, 2 * e));
            };
          }
        },
        4329: (e, t, r) => {
          "use strict";
          r.d(t, { p: () => _ });
          var n = r(928),
            a = r(8726),
            i = r(6339),
            s = r(8343),
            o = r(1244),
            c = r(5731),
            d = r(4932),
            u = r(6823);
          var l,
            p = (function () {
              function e(e, t) {
                (this._exporter = e),
                  (this._finishedSpans = []),
                  (this._droppedSpansCount = 0);
                var r = (0, s.d)();
                (this._maxExportBatchSize =
                  "number" == typeof (null == t ? void 0 : t.maxExportBatchSize)
                    ? t.maxExportBatchSize
                    : r.OTEL_BSP_MAX_EXPORT_BATCH_SIZE),
                  (this._maxQueueSize =
                    "number" == typeof (null == t ? void 0 : t.maxQueueSize)
                      ? t.maxQueueSize
                      : r.OTEL_BSP_MAX_QUEUE_SIZE),
                  (this._scheduledDelayMillis =
                    "number" ==
                    typeof (null == t ? void 0 : t.scheduledDelayMillis)
                      ? t.scheduledDelayMillis
                      : r.OTEL_BSP_SCHEDULE_DELAY),
                  (this._exportTimeoutMillis =
                    "number" ==
                    typeof (null == t ? void 0 : t.exportTimeoutMillis)
                      ? t.exportTimeoutMillis
                      : r.OTEL_BSP_EXPORT_TIMEOUT),
                  (this._shutdownOnce = new o.q(this._shutdown, this)),
                  this._maxExportBatchSize > this._maxQueueSize &&
                    (n.K.warn(
                      "BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize"
                    ),
                    (this._maxExportBatchSize = this._maxQueueSize));
              }
              return (
                (e.prototype.forceFlush = function () {
                  return this._shutdownOnce.isCalled
                    ? this._shutdownOnce.promise
                    : this._flushAll();
                }),
                (e.prototype.onStart = function (e, t) {}),
                (e.prototype.onEnd = function (e) {
                  this._shutdownOnce.isCalled ||
                    (0 != (e.spanContext().traceFlags & a.r.SAMPLED) &&
                      this._addToBuffer(e));
                }),
                (e.prototype.shutdown = function () {
                  return this._shutdownOnce.call();
                }),
                (e.prototype._shutdown = function () {
                  var e = this;
                  return Promise.resolve()
                    .then(function () {
                      return e.onShutdown();
                    })
                    .then(function () {
                      return e._flushAll();
                    })
                    .then(function () {
                      return e._exporter.shutdown();
                    });
                }),
                (e.prototype._addToBuffer = function (e) {
                  if (this._finishedSpans.length >= this._maxQueueSize)
                    return (
                      0 === this._droppedSpansCount &&
                        n.K.debug("maxQueueSize reached, dropping spans"),
                      void this._droppedSpansCount++
                    );
                  this._droppedSpansCount > 0 &&
                    (n.K.warn(
                      "Dropped " +
                        this._droppedSpansCount +
                        " spans because maxQueueSize reached"
                    ),
                    (this._droppedSpansCount = 0)),
                    this._finishedSpans.push(e),
                    this._maybeStartTimer();
                }),
                (e.prototype._flushAll = function () {
                  var e = this;
                  return new Promise(function (t, r) {
                    for (
                      var n = [],
                        a = 0,
                        i = Math.ceil(
                          e._finishedSpans.length / e._maxExportBatchSize
                        );
                      a < i;
                      a++
                    )
                      n.push(e._flushOneBatch());
                    Promise.all(n)
                      .then(function () {
                        t();
                      })
                      .catch(r);
                  });
                }),
                (e.prototype._flushOneBatch = function () {
                  var e = this;
                  return (
                    this._clearTimer(),
                    0 === this._finishedSpans.length
                      ? Promise.resolve()
                      : new Promise(function (t, r) {
                          var n = setTimeout(function () {
                            r(new Error("Timeout"));
                          }, e._exportTimeoutMillis);
                          i.D.with((0, c.hE)(i.D.active()), function () {
                            var a = e._finishedSpans.splice(
                                0,
                                e._maxExportBatchSize
                              ),
                              i = function () {
                                return e._exporter.export(a, function (e) {
                                  var a;
                                  clearTimeout(n),
                                    e.code === d.I.SUCCESS
                                      ? t()
                                      : r(
                                          null !== (a = e.error) && void 0 !== a
                                            ? a
                                            : new Error(
                                                "BatchSpanProcessor: span export failed"
                                              )
                                        );
                                });
                              },
                              s = a
                                .map(function (e) {
                                  return e.resource;
                                })
                                .filter(function (e) {
                                  return e.asyncAttributesPending;
                                });
                            0 === s.length
                              ? i()
                              : Promise.all(
                                  s.map(function (e) {
                                    var t;
                                    return null ===
                                      (t = e.waitForAsyncAttributes) ||
                                      void 0 === t
                                      ? void 0
                                      : t.call(e);
                                  })
                                ).then(i, function (e) {
                                  (0, u.L)(e), r(e);
                                });
                          });
                        })
                  );
                }),
                (e.prototype._maybeStartTimer = function () {
                  var e = this;
                  void 0 === this._timer &&
                    ((this._timer = setTimeout(function () {
                      e._flushOneBatch()
                        .then(function () {
                          e._finishedSpans.length > 0 &&
                            (e._clearTimer(), e._maybeStartTimer());
                        })
                        .catch(function (e) {
                          (0, u.L)(e);
                        });
                    }, this._scheduledDelayMillis)),
                    this._timer);
                }),
                (e.prototype._clearTimer = function () {
                  void 0 !== this._timer &&
                    (clearTimeout(this._timer), (this._timer = void 0));
                }),
                e
              );
            })(),
            h =
              ((l = function (e, t) {
                return (
                  (l =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                      function (e, t) {
                        e.__proto__ = t;
                      }) ||
                    function (e, t) {
                      for (var r in t)
                        Object.prototype.hasOwnProperty.call(t, r) &&
                          (e[r] = t[r]);
                    }),
                  l(e, t)
                );
              }),
              function (e, t) {
                if ("function" != typeof t && null !== t)
                  throw new TypeError(
                    "Class extends value " +
                      String(t) +
                      " is not a constructor or null"
                  );
                function r() {
                  this.constructor = e;
                }
                l(e, t),
                  (e.prototype =
                    null === t
                      ? Object.create(t)
                      : ((r.prototype = t.prototype), new r()));
              }),
            _ = (function (e) {
              function t(t, r) {
                var n = e.call(this, t, r) || this;
                return n.onInit(r), n;
              }
              return (
                h(t, e),
                (t.prototype.onInit = function (e) {
                  var t = this;
                  !0 !==
                    (null == e ? void 0 : e.disableAutoFlushOnDocumentHide) &&
                    "undefined" != typeof document &&
                    ((this._visibilityChangeListener = function () {
                      "hidden" === document.visibilityState && t.forceFlush();
                    }),
                    (this._pageHideListener = function () {
                      t.forceFlush();
                    }),
                    document.addEventListener(
                      "visibilitychange",
                      this._visibilityChangeListener
                    ),
                    document.addEventListener(
                      "pagehide",
                      this._pageHideListener
                    ));
                }),
                (t.prototype.onShutdown = function () {
                  "undefined" != typeof document &&
                    (this._visibilityChangeListener &&
                      document.removeEventListener(
                        "visibilitychange",
                        this._visibilityChangeListener
                      ),
                    this._pageHideListener &&
                      document.removeEventListener(
                        "pagehide",
                        this._pageHideListener
                      ));
                }),
                t
              );
            })(p);
        },
        6039: (e, t, r) => {
          "use strict";
          r.d(t, { _: () => a });
          var n = r(4977),
            a = (function () {
              function e() {}
              return (
                (e.prototype.shouldSample = function () {
                  return { decision: n.U.NOT_RECORD };
                }),
                (e.prototype.toString = function () {
                  return "AlwaysOffSampler";
                }),
                e
              );
            })();
        },
        1934: (e, t, r) => {
          "use strict";
          r.d(t, { t: () => a });
          var n = r(4977),
            a = (function () {
              function e() {}
              return (
                (e.prototype.shouldSample = function () {
                  return { decision: n.U.RECORD_AND_SAMPLED };
                }),
                (e.prototype.toString = function () {
                  return "AlwaysOnSampler";
                }),
                e
              );
            })();
        },
        356: (e, t, r) => {
          "use strict";
          r.d(t, { N: () => d });
          var n = r(2210),
            a = r(7228),
            i = r(8726),
            s = r(6823),
            o = r(6039),
            c = r(1934),
            d = (function () {
              function e(e) {
                var t, r, n, a;
                (this._root = e.root),
                  this._root ||
                    ((0, s.L)(
                      new Error(
                        "ParentBasedSampler must have a root sampler configured"
                      )
                    ),
                    (this._root = new c.t())),
                  (this._remoteParentSampled =
                    null !== (t = e.remoteParentSampled) && void 0 !== t
                      ? t
                      : new c.t()),
                  (this._remoteParentNotSampled =
                    null !== (r = e.remoteParentNotSampled) && void 0 !== r
                      ? r
                      : new o._()),
                  (this._localParentSampled =
                    null !== (n = e.localParentSampled) && void 0 !== n
                      ? n
                      : new c.t()),
                  (this._localParentNotSampled =
                    null !== (a = e.localParentNotSampled) && void 0 !== a
                      ? a
                      : new o._());
              }
              return (
                (e.prototype.shouldSample = function (e, t, r, s, o, c) {
                  var d = n.g.getSpanContext(e);
                  return d && (0, a.BM)(d)
                    ? d.isRemote
                      ? d.traceFlags & i.r.SAMPLED
                        ? this._remoteParentSampled.shouldSample(
                            e,
                            t,
                            r,
                            s,
                            o,
                            c
                          )
                        : this._remoteParentNotSampled.shouldSample(
                            e,
                            t,
                            r,
                            s,
                            o,
                            c
                          )
                      : d.traceFlags & i.r.SAMPLED
                      ? this._localParentSampled.shouldSample(e, t, r, s, o, c)
                      : this._localParentNotSampled.shouldSample(
                          e,
                          t,
                          r,
                          s,
                          o,
                          c
                        )
                    : this._root.shouldSample(e, t, r, s, o, c);
                }),
                (e.prototype.toString = function () {
                  return (
                    "ParentBased{root=" +
                    this._root.toString() +
                    ", remoteParentSampled=" +
                    this._remoteParentSampled.toString() +
                    ", remoteParentNotSampled=" +
                    this._remoteParentNotSampled.toString() +
                    ", localParentSampled=" +
                    this._localParentSampled.toString() +
                    ", localParentNotSampled=" +
                    this._localParentNotSampled.toString() +
                    "}"
                  );
                }),
                e
              );
            })();
        },
        5751: (e, t, r) => {
          "use strict";
          r.d(t, { a: () => i });
          var n = r(7228),
            a = r(4977),
            i = (function () {
              function e(e) {
                void 0 === e && (e = 0),
                  (this._ratio = e),
                  (this._ratio = this._normalize(e)),
                  (this._upperBound = Math.floor(4294967295 * this._ratio));
              }
              return (
                (e.prototype.shouldSample = function (e, t) {
                  return {
                    decision:
                      (0, n.jN)(t) && this._accumulate(t) < this._upperBound
                        ? a.U.RECORD_AND_SAMPLED
                        : a.U.NOT_RECORD,
                  };
                }),
                (e.prototype.toString = function () {
                  return "TraceIdRatioBased{" + this._ratio + "}";
                }),
                (e.prototype._normalize = function (e) {
                  return "number" != typeof e || isNaN(e)
                    ? 0
                    : e >= 1
                    ? 1
                    : e <= 0
                    ? 0
                    : e;
                }),
                (e.prototype._accumulate = function (e) {
                  for (var t = 0, r = 0; r < e.length / 8; r++) {
                    var n = 8 * r;
                    t = (t ^ parseInt(e.slice(n, n + 8), 16)) >>> 0;
                  }
                  return t;
                }),
                e
              );
            })();
        },
        1314: (e, t, r) => {
          "use strict";
          r.d(t, { f: () => i, r: () => s });
          var n = r(5946),
            a = r(1790);
          function i(e) {
            var t = { sampler: (0, n.V)() },
              r = (0, n.K)(),
              a = Object.assign({}, r, t, e);
            return (
              (a.generalLimits = Object.assign(
                {},
                r.generalLimits,
                e.generalLimits || {}
              )),
              (a.spanLimits = Object.assign(
                {},
                r.spanLimits,
                e.spanLimits || {}
              )),
              a
            );
          }
          function s(e) {
            var t,
              r,
              n,
              i,
              s,
              o,
              c,
              d,
              u,
              l,
              p,
              h,
              _ = Object.assign({}, e.spanLimits),
              f = (0, a.vU)();
            return (
              (_.attributeCountLimit =
                null !==
                  (o =
                    null !==
                      (s =
                        null !==
                          (i =
                            null !==
                              (r =
                                null === (t = e.spanLimits) || void 0 === t
                                  ? void 0
                                  : t.attributeCountLimit) && void 0 !== r
                              ? r
                              : null === (n = e.generalLimits) || void 0 === n
                              ? void 0
                              : n.attributeCountLimit) && void 0 !== i
                          ? i
                          : f.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) && void 0 !== s
                      ? s
                      : f.OTEL_ATTRIBUTE_COUNT_LIMIT) && void 0 !== o
                  ? o
                  : a.qG),
              (_.attributeValueLengthLimit =
                null !==
                  (h =
                    null !==
                      (p =
                        null !==
                          (l =
                            null !==
                              (d =
                                null === (c = e.spanLimits) || void 0 === c
                                  ? void 0
                                  : c.attributeValueLengthLimit) && void 0 !== d
                              ? d
                              : null === (u = e.generalLimits) || void 0 === u
                              ? void 0
                              : u.attributeValueLengthLimit) && void 0 !== l
                          ? l
                          : f.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) &&
                    void 0 !== p
                      ? p
                      : f.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) && void 0 !== h
                  ? h
                  : a.KR),
              Object.assign({}, e, { spanLimits: _ })
            );
          }
        },
        4932: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { I: () => n }),
            (function (e) {
              (e[(e.SUCCESS = 0)] = "SUCCESS"), (e[(e.FAILED = 1)] = "FAILED");
            })(n || (n = {}));
        },
        5778: (e, t, r) => {
          "use strict";
          r.d(t, { Do: () => c, FT: () => s });
          var n = r(928),
            a = function (e) {
              var t = "function" == typeof Symbol && Symbol.iterator,
                r = t && e[t],
                n = 0;
              if (r) return r.call(e);
              if (e && "number" == typeof e.length)
                return {
                  next: function () {
                    return (
                      e && n >= e.length && (e = void 0),
                      { value: e && e[n++], done: !e }
                    );
                  },
                };
              throw new TypeError(
                t
                  ? "Object is not iterable."
                  : "Symbol.iterator is not defined."
              );
            },
            i = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            };
          function s(e) {
            var t,
              r,
              s = {};
            if ("object" != typeof e || null == e) return s;
            try {
              for (
                var d = a(Object.entries(e)), u = d.next();
                !u.done;
                u = d.next()
              ) {
                var l = i(u.value, 2),
                  p = l[0],
                  h = l[1];
                o(p)
                  ? c(h)
                    ? Array.isArray(h)
                      ? (s[p] = h.slice())
                      : (s[p] = h)
                    : n.K.warn("Invalid attribute value set for key: " + p)
                  : n.K.warn("Invalid attribute key: " + p);
              }
            } catch (e) {
              t = { error: e };
            } finally {
              try {
                u && !u.done && (r = d.return) && r.call(d);
              } finally {
                if (t) throw t.error;
              }
            }
            return s;
          }
          function o(e) {
            return "string" == typeof e && e.length > 0;
          }
          function c(e) {
            return (
              null == e ||
              (Array.isArray(e)
                ? (function (e) {
                    var t, r, n;
                    try {
                      for (var i = a(e), s = i.next(); !s.done; s = i.next()) {
                        var o = s.value;
                        if (null != o) {
                          if (!n) {
                            if (d(o)) {
                              n = typeof o;
                              continue;
                            }
                            return !1;
                          }
                          if (typeof o !== n) return !1;
                        }
                      }
                    } catch (e) {
                      t = { error: e };
                    } finally {
                      try {
                        s && !s.done && (r = i.return) && r.call(i);
                      } finally {
                        if (t) throw t.error;
                      }
                    }
                    return !0;
                  })(e)
                : d(e))
            );
          }
          function d(e) {
            switch (typeof e) {
              case "number":
              case "boolean":
              case "string":
                return !0;
            }
            return !1;
          }
        },
        6823: (e, t, r) => {
          "use strict";
          r.d(t, { L: () => i });
          var n = r(928);
          var a = function (e) {
            n.K.error(
              (function (e) {
                return "string" == typeof e
                  ? e
                  : JSON.stringify(
                      (function (e) {
                        for (var t = {}, r = e; null !== r; )
                          Object.getOwnPropertyNames(r).forEach(function (e) {
                            if (!t[e]) {
                              var n = r[e];
                              n && (t[e] = String(n));
                            }
                          }),
                            (r = Object.getPrototypeOf(r));
                        return t;
                      })(e)
                    );
              })(e)
            );
          };
          function i(e) {
            try {
              a(e);
            } catch (e) {}
          }
        },
        8669: (e, t, r) => {
          "use strict";
          r.d(t, {
            Dt: () => l,
            J3: () => d,
            Jt: () => c,
            U: () => o,
            X_: () => p,
            i5: () => s,
            ji: () => u,
            vF: () => h,
          });
          var n = r(3149),
            a = Math.pow(10, 6),
            i = Math.pow(10, 9);
          function s(e) {
            var t = e / 1e3;
            return [Math.trunc(t), Math.round((e % 1e3) * a)];
          }
          function o() {
            var e = n.t.timeOrigin;
            if ("number" != typeof e) {
              var t = n.t;
              e = t.timing && t.timing.fetchStart;
            }
            return e;
          }
          function c(e) {
            return h(s(o()), s("number" == typeof e ? e : n.t.now()));
          }
          function d(e, t) {
            var r = t[0] - e[0],
              n = t[1] - e[1];
            return n < 0 && ((r -= 1), (n += i)), [r, n];
          }
          function u(e) {
            return 1e6 * e[0] + e[1] / 1e3;
          }
          function l(e) {
            return (
              Array.isArray(e) &&
              2 === e.length &&
              "number" == typeof e[0] &&
              "number" == typeof e[1]
            );
          }
          function p(e) {
            return l(e) || "number" == typeof e || e instanceof Date;
          }
          function h(e, t) {
            var r = [e[0] + t[0], e[1] + t[1]];
            return r[1] >= i && ((r[1] -= i), (r[0] += 1)), r;
          }
        },
        8343: (e, t, r) => {
          "use strict";
          r.d(t, { d: () => i });
          var n = r(1790),
            a = r(3388);
          function i() {
            var e = (0, n.Ds)(a.E);
            return Object.assign({}, n.J9, e);
          }
        },
        3388: (e, t, r) => {
          "use strict";
          r.d(t, { E: () => n });
          var n =
            "object" == typeof globalThis
              ? globalThis
              : "object" == typeof self
              ? self
              : "object" == typeof window
              ? window
              : "object" == typeof r.g
              ? r.g
              : {};
        },
        3149: (e, t, r) => {
          "use strict";
          r.d(t, { t: () => n });
          var n = performance;
        },
        5731: (e, t, r) => {
          "use strict";
          r.d(t, { Ll: () => i, hE: () => a });
          var n = (0, r(5834).Y)(
            "OpenTelemetry SDK Context Key SUPPRESS_TRACING"
          );
          function a(e) {
            return e.setValue(n, !0);
          }
          function i(e) {
            return !0 === e.getValue(n);
          }
        },
        1244: (e, t, r) => {
          "use strict";
          r.d(t, { q: () => s });
          var n = (function () {
              function e() {
                var e = this;
                this._promise = new Promise(function (t, r) {
                  (e._resolve = t), (e._reject = r);
                });
              }
              return (
                Object.defineProperty(e.prototype, "promise", {
                  get: function () {
                    return this._promise;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                (e.prototype.resolve = function (e) {
                  this._resolve(e);
                }),
                (e.prototype.reject = function (e) {
                  this._reject(e);
                }),
                e
              );
            })(),
            a = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            i = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            s = (function () {
              function e(e, t) {
                (this._callback = e),
                  (this._that = t),
                  (this._isCalled = !1),
                  (this._deferred = new n());
              }
              return (
                Object.defineProperty(e.prototype, "isCalled", {
                  get: function () {
                    return this._isCalled;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                Object.defineProperty(e.prototype, "promise", {
                  get: function () {
                    return this._deferred.promise;
                  },
                  enumerable: !1,
                  configurable: !0,
                }),
                (e.prototype.call = function () {
                  for (
                    var e, t = this, r = [], n = 0;
                    n < arguments.length;
                    n++
                  )
                    r[n] = arguments[n];
                  if (!this._isCalled) {
                    this._isCalled = !0;
                    try {
                      Promise.resolve(
                        (e = this._callback).call.apply(
                          e,
                          i([this._that], a(r), !1)
                        )
                      ).then(
                        function (e) {
                          return t._deferred.resolve(e);
                        },
                        function (e) {
                          return t._deferred.reject(e);
                        }
                      );
                    } catch (e) {
                      this._deferred.reject(e);
                    }
                  }
                  return this._deferred.promise;
                }),
                e
              );
            })();
        },
        1790: (e, t, r) => {
          "use strict";
          r.d(t, {
            Ds: () => b,
            J9: () => _,
            KR: () => p,
            qG: () => h,
            vU: () => x,
          });
          var n = r(6740),
            a = r(6018),
            i = r(3388),
            s = ["OTEL_SDK_DISABLED"];
          function o(e) {
            return s.indexOf(e) > -1;
          }
          var c = [
            "OTEL_BSP_EXPORT_TIMEOUT",
            "OTEL_BSP_MAX_EXPORT_BATCH_SIZE",
            "OTEL_BSP_MAX_QUEUE_SIZE",
            "OTEL_BSP_SCHEDULE_DELAY",
            "OTEL_BLRP_EXPORT_TIMEOUT",
            "OTEL_BLRP_MAX_EXPORT_BATCH_SIZE",
            "OTEL_BLRP_MAX_QUEUE_SIZE",
            "OTEL_BLRP_SCHEDULE_DELAY",
            "OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT",
            "OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT",
            "OTEL_SPAN_EVENT_COUNT_LIMIT",
            "OTEL_SPAN_LINK_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT",
            "OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT",
            "OTEL_EXPORTER_OTLP_TIMEOUT",
            "OTEL_EXPORTER_OTLP_TRACES_TIMEOUT",
            "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT",
            "OTEL_EXPORTER_OTLP_LOGS_TIMEOUT",
            "OTEL_EXPORTER_JAEGER_AGENT_PORT",
          ];
          function d(e) {
            return c.indexOf(e) > -1;
          }
          var u = ["OTEL_NO_PATCH_MODULES", "OTEL_PROPAGATORS"];
          function l(e) {
            return u.indexOf(e) > -1;
          }
          var p = 1 / 0,
            h = 128,
            _ = {
              OTEL_SDK_DISABLED: !1,
              CONTAINER_NAME: "",
              ECS_CONTAINER_METADATA_URI_V4: "",
              ECS_CONTAINER_METADATA_URI: "",
              HOSTNAME: "",
              KUBERNETES_SERVICE_HOST: "",
              NAMESPACE: "",
              OTEL_BSP_EXPORT_TIMEOUT: 3e4,
              OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BSP_MAX_QUEUE_SIZE: 2048,
              OTEL_BSP_SCHEDULE_DELAY: 5e3,
              OTEL_BLRP_EXPORT_TIMEOUT: 3e4,
              OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,
              OTEL_BLRP_MAX_QUEUE_SIZE: 2048,
              OTEL_BLRP_SCHEDULE_DELAY: 5e3,
              OTEL_EXPORTER_JAEGER_AGENT_HOST: "",
              OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
              OTEL_EXPORTER_JAEGER_ENDPOINT: "",
              OTEL_EXPORTER_JAEGER_PASSWORD: "",
              OTEL_EXPORTER_JAEGER_USER: "",
              OTEL_EXPORTER_OTLP_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: "",
              OTEL_EXPORTER_OTLP_HEADERS: "",
              OTEL_EXPORTER_OTLP_TRACES_HEADERS: "",
              OTEL_EXPORTER_OTLP_METRICS_HEADERS: "",
              OTEL_EXPORTER_OTLP_LOGS_HEADERS: "",
              OTEL_EXPORTER_OTLP_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 1e4,
              OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 1e4,
              OTEL_EXPORTER_ZIPKIN_ENDPOINT:
                "http://localhost:9411/api/v2/spans",
              OTEL_LOG_LEVEL: n.n.INFO,
              OTEL_NO_PATCH_MODULES: [],
              OTEL_PROPAGATORS: ["tracecontext", "baggage"],
              OTEL_RESOURCE_ATTRIBUTES: "",
              OTEL_SERVICE_NAME: "",
              OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: p,
              OTEL_ATTRIBUTE_COUNT_LIMIT: h,
              OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: p,
              OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: h,
              OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: p,
              OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: h,
              OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_LINK_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: 128,
              OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: 128,
              OTEL_TRACES_EXPORTER: "",
              OTEL_TRACES_SAMPLER: a.J.ParentBasedAlwaysOn,
              OTEL_TRACES_SAMPLER_ARG: "",
              OTEL_LOGS_EXPORTER: "",
              OTEL_EXPORTER_OTLP_INSECURE: "",
              OTEL_EXPORTER_OTLP_TRACES_INSECURE: "",
              OTEL_EXPORTER_OTLP_METRICS_INSECURE: "",
              OTEL_EXPORTER_OTLP_LOGS_INSECURE: "",
              OTEL_EXPORTER_OTLP_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: "",
              OTEL_EXPORTER_OTLP_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: "",
              OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: "",
              OTEL_EXPORTER_OTLP_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: "http/protobuf",
              OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: "cumulative",
            };
          function f(e, t, r) {
            if (void 0 !== r[e]) {
              var n = String(r[e]);
              t[e] = "true" === n.toLowerCase();
            }
          }
          function m(e, t, r, n, a) {
            if (
              (void 0 === n && (n = -1 / 0),
              void 0 === a && (a = 1 / 0),
              void 0 !== r[e])
            ) {
              var i = Number(r[e]);
              isNaN(i) || (t[e] = i < n ? n : i > a ? a : i);
            }
          }
          function v(e, t, r, n) {
            void 0 === n && (n = ",");
            var a = r[e];
            "string" == typeof a &&
              (t[e] = a.split(n).map(function (e) {
                return e.trim();
              }));
          }
          var g = {
            ALL: n.n.ALL,
            VERBOSE: n.n.VERBOSE,
            DEBUG: n.n.DEBUG,
            INFO: n.n.INFO,
            WARN: n.n.WARN,
            ERROR: n.n.ERROR,
            NONE: n.n.NONE,
          };
          function y(e, t, r) {
            var n = r[e];
            if ("string" == typeof n) {
              var a = g[n.toUpperCase()];
              null != a && (t[e] = a);
            }
          }
          function b(e) {
            var t = {};
            for (var r in _) {
              var n = r;
              if ("OTEL_LOG_LEVEL" === n) y(n, t, e);
              else if (o(n)) f(n, t, e);
              else if (d(n)) m(n, t, e);
              else if (l(n)) v(n, t, e);
              else {
                var a = e[n];
                null != a && (t[n] = String(a));
              }
            }
            return t;
          }
          function x() {
            return "undefined" != typeof process && process && process.env
              ? b(process.env)
              : b(i.E);
          }
        },
        6018: (e, t, r) => {
          "use strict";
          var n;
          r.d(t, { J: () => n }),
            (function (e) {
              (e.AlwaysOff = "always_off"),
                (e.AlwaysOn = "always_on"),
                (e.ParentBasedAlwaysOff = "parentbased_always_off"),
                (e.ParentBasedAlwaysOn = "parentbased_always_on"),
                (e.ParentBasedTraceIdRatio = "parentbased_traceidratio"),
                (e.TraceIdRatio = "traceidratio");
            })(n || (n = {}));
        },
        4951: (e, t, r) => {
          "use strict";
          r.r(t),
            r.d(t, {
              AlwaysOffSampler: () => A.AlwaysOffSampler,
              AlwaysOnSampler: () => A.AlwaysOnSampler,
              BasicTracerProvider: () => A.BasicTracerProvider,
              BatchSpanProcessor: () => A.BatchSpanProcessor,
              ConsoleSpanExporter: () => A.ConsoleSpanExporter,
              ForceFlushState: () => A.ForceFlushState,
              InMemorySpanExporter: () => A.InMemorySpanExporter,
              NoopSpanProcessor: () => A.NoopSpanProcessor,
              ParentBasedSampler: () => A.ParentBasedSampler,
              PerformanceTimingNames: () => a,
              RandomIdGenerator: () => A.RandomIdGenerator,
              SamplingDecision: () => A.SamplingDecision,
              SimpleSpanProcessor: () => A.SimpleSpanProcessor,
              Span: () => A.Span,
              StackContextManager: () => d,
              TraceIdRatioBasedSampler: () => A.TraceIdRatioBasedSampler,
              Tracer: () => A.Tracer,
              WebTracerProvider: () => l,
              addSpanNetworkEvent: () => R,
              addSpanNetworkEvents: () => P,
              getElementXPath: () => L,
              getResource: () => k,
              hasKey: () => w,
              normalizeUrl: () => I,
              parseUrl: () => C,
              shouldPropagateTraceHeaders: () => D,
              sortResources: () => O,
            });
          var n,
            a,
            i = r(5984),
            s = r(5834),
            o = function (e, t) {
              var r = "function" == typeof Symbol && e[Symbol.iterator];
              if (!r) return e;
              var n,
                a,
                i = r.call(e),
                s = [];
              try {
                for (; (void 0 === t || t-- > 0) && !(n = i.next()).done; )
                  s.push(n.value);
              } catch (e) {
                a = { error: e };
              } finally {
                try {
                  n && !n.done && (r = i.return) && r.call(i);
                } finally {
                  if (a) throw a.error;
                }
              }
              return s;
            },
            c = function (e, t, r) {
              if (r || 2 === arguments.length)
                for (var n, a = 0, i = t.length; a < i; a++)
                  (!n && a in t) ||
                    (n || (n = Array.prototype.slice.call(t, 0, a)),
                    (n[a] = t[a]));
              return e.concat(n || Array.prototype.slice.call(t));
            },
            d = (function () {
              function e() {
                (this._enabled = !1), (this._currentContext = s.I);
              }
              return (
                (e.prototype._bindFunction = function (e, t) {
                  void 0 === e && (e = s.I);
                  var r = this,
                    n = function () {
                      for (
                        var n = this, a = [], i = 0;
                        i < arguments.length;
                        i++
                      )
                        a[i] = arguments[i];
                      return r.with(e, function () {
                        return t.apply(n, a);
                      });
                    };
                  return (
                    Object.defineProperty(n, "length", {
                      enumerable: !1,
                      configurable: !0,
                      writable: !1,
                      value: t.length,
                    }),
                    n
                  );
                }),
                (e.prototype.active = function () {
                  return this._currentContext;
                }),
                (e.prototype.bind = function (e, t) {
                  return (
                    void 0 === e && (e = this.active()),
                    "function" == typeof t ? this._bindFunction(e, t) : t
                  );
                }),
                (e.prototype.disable = function () {
                  return (
                    (this._currentContext = s.I), (this._enabled = !1), this
                  );
                }),
                (e.prototype.enable = function () {
                  return (
                    this._enabled ||
                      ((this._enabled = !0), (this._currentContext = s.I)),
                    this
                  );
                }),
                (e.prototype.with = function (e, t, r) {
                  for (var n = [], a = 3; a < arguments.length; a++)
                    n[a - 3] = arguments[a];
                  var i = this._currentContext;
                  this._currentContext = e || s.I;
                  try {
                    return t.call.apply(t, c([r], o(n), !1));
                  } finally {
                    this._currentContext = i;
                  }
                }),
                e
              );
            })(),
            u =
              ((n = function (e, t) {
                return (
                  (n =
                    Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array &&
                      function (e, t) {
                        e.__proto__ = t;
                      }) ||
                    function (e, t) {
                      for (var r in t)
                        Object.prototype.hasOwnProperty.call(t, r) &&
                          (e[r] = t[r]);
                    }),
                  n(e, t)
                );
              }),
              function (e, t) {
                if ("function" != typeof t && null !== t)
                  throw new TypeError(
                    "Class extends value " +
                      String(t) +
                      " is not a constructor or null"
                  );
                function r() {
                  this.constructor = e;
                }
                n(e, t),
                  (e.prototype =
                    null === t
                      ? Object.create(t)
                      : ((r.prototype = t.prototype), new r()));
              }),
            l = (function (e) {
              function t(t) {
                void 0 === t && (t = {});
                var r = e.call(this, t) || this;
                if (t.contextManager)
                  throw "contextManager should be defined in register method not in constructor";
                if (t.propagator)
                  throw "propagator should be defined in register method not in constructor";
                return r;
              }
              return (
                u(t, e),
                (t.prototype.register = function (t) {
                  void 0 === t && (t = {}),
                    void 0 === t.contextManager && (t.contextManager = new d()),
                    t.contextManager && t.contextManager.enable(),
                    e.prototype.register.call(this, t);
                }),
                t
              );
            })(i.u);
          !(function (e) {
            (e.CONNECT_END = "connectEnd"),
              (e.CONNECT_START = "connectStart"),
              (e.DECODED_BODY_SIZE = "decodedBodySize"),
              (e.DOM_COMPLETE = "domComplete"),
              (e.DOM_CONTENT_LOADED_EVENT_END = "domContentLoadedEventEnd"),
              (e.DOM_CONTENT_LOADED_EVENT_START = "domContentLoadedEventStart"),
              (e.DOM_INTERACTIVE = "domInteractive"),
              (e.DOMAIN_LOOKUP_END = "domainLookupEnd"),
              (e.DOMAIN_LOOKUP_START = "domainLookupStart"),
              (e.ENCODED_BODY_SIZE = "encodedBodySize"),
              (e.FETCH_START = "fetchStart"),
              (e.LOAD_EVENT_END = "loadEventEnd"),
              (e.LOAD_EVENT_START = "loadEventStart"),
              (e.NAVIGATION_START = "navigationStart"),
              (e.REDIRECT_END = "redirectEnd"),
              (e.REDIRECT_START = "redirectStart"),
              (e.REQUEST_START = "requestStart"),
              (e.RESPONSE_END = "responseEnd"),
              (e.RESPONSE_START = "responseStart"),
              (e.SECURE_CONNECTION_START = "secureConnectionStart"),
              (e.UNLOAD_EVENT_END = "unloadEventEnd"),
              (e.UNLOAD_EVENT_START = "unloadEventStart");
          })(a || (a = {}));
          var p = performance,
            h = Math.pow(10, 6),
            _ = Math.pow(10, 9);
          function f(e) {
            var t = e / 1e3;
            return [Math.trunc(t), Math.round((e % 1e3) * h)];
          }
          function m() {
            var e = p.timeOrigin;
            if ("number" != typeof e) {
              var t = p;
              e = t.timing && t.timing.fetchStart;
            }
            return e;
          }
          function v(e) {
            return (function (e, t) {
              var r = [e[0] + t[0], e[1] + t[1]];
              r[1] >= _ && ((r[1] -= _), (r[0] += 1));
              return r;
            })(f(m()), f("number" == typeof e ? e : p.now()));
          }
          function g(e) {
            if (b(e)) return e;
            if ("number" == typeof e) return e < m() ? v(e) : f(e);
            if (e instanceof Date) return f(e.getTime());
            throw TypeError("Invalid input type");
          }
          function y(e) {
            return e[0] * _ + e[1];
          }
          function b(e) {
            return (
              Array.isArray(e) &&
              2 === e.length &&
              "number" == typeof e[0] &&
              "number" == typeof e[1]
            );
          }
          function x(e, t) {
            return "string" == typeof t ? e === t : !!e.match(t);
          }
          var E,
            T = "http.response_content_length",
            S = "http.response_content_length_uncompressed";
          function w(e, t) {
            return t in e;
          }
          function R(e, t, r) {
            if (w(r, t) && "number" == typeof r[t])
              return e.addEvent(t, r[t]), e;
          }
          function P(e, t) {
            R(e, a.FETCH_START, t),
              R(e, a.DOMAIN_LOOKUP_START, t),
              R(e, a.DOMAIN_LOOKUP_END, t),
              R(e, a.CONNECT_START, t),
              w(t, "name") &&
                t.name.startsWith("https:") &&
                R(e, a.SECURE_CONNECTION_START, t),
              R(e, a.CONNECT_END, t),
              R(e, a.REQUEST_START, t),
              R(e, a.RESPONSE_START, t),
              R(e, a.RESPONSE_END, t);
            var r = t[a.ENCODED_BODY_SIZE];
            void 0 !== r && e.setAttribute(T, r);
            var n = t[a.DECODED_BODY_SIZE];
            void 0 !== n && r !== n && e.setAttribute(S, n);
          }
          function O(e) {
            return e.slice().sort(function (e, t) {
              var r = e[a.FETCH_START],
                n = t[a.FETCH_START];
              return r > n ? 1 : r < n ? -1 : 0;
            });
          }
          function k(e, t, r, n, i, s) {
            void 0 === i && (i = new WeakSet());
            var o = C(e),
              c = (function (e, t, r, n, i, s) {
                var o = y(t),
                  c = y(r),
                  d = n.filter(function (t) {
                    var r = y(g(t[a.FETCH_START])),
                      n = y(g(t[a.RESPONSE_END]));
                    return (
                      t.initiatorType.toLowerCase() ===
                        (s || "xmlhttprequest") &&
                      t.name === e &&
                      r >= o &&
                      n <= c
                    );
                  });
                d.length > 0 &&
                  (d = d.filter(function (e) {
                    return !i.has(e);
                  }));
                return d;
              })((e = o.toString()), t, r, n, i, s);
            if (0 === c.length) return { mainRequest: void 0 };
            if (1 === c.length) return { mainRequest: c[0] };
            var d = O(c);
            if (o.origin !== location.origin && d.length > 1) {
              var u = d[0],
                l = (function (e, t, r) {
                  for (
                    var n, i = y(r), s = y(g(t)), o = e[1], c = e.length, d = 1;
                    d < c;
                    d++
                  ) {
                    var u = e[d],
                      l = y(g(u[a.FETCH_START])),
                      p = i - y(g(u[a.RESPONSE_END]));
                    l >= s && (!n || p < n) && ((n = p), (o = u));
                  }
                  return o;
                })(d, u[a.RESPONSE_END], r),
                p = u[a.RESPONSE_END];
              return (
                l[a.FETCH_START] < p && ((l = u), (u = void 0)),
                { corsPreFlightRequest: u, mainRequest: l }
              );
            }
            return { mainRequest: c[0] };
          }
          function C(e) {
            if ("function" == typeof URL)
              return new URL(
                e,
                "undefined" != typeof document
                  ? document.baseURI
                  : "undefined" != typeof location
                  ? location.href
                  : void 0
              );
            var t = (E || (E = document.createElement("a")), E);
            return (t.href = e), t;
          }
          function I(e) {
            return C(e).href;
          }
          function L(e, t) {
            if (e.nodeType === Node.DOCUMENT_NODE) return "/";
            var r = (function (e, t) {
              var r = e.nodeType,
                n = (function (e) {
                  if (!e.parentNode) return 0;
                  var t = [e.nodeType];
                  e.nodeType === Node.CDATA_SECTION_NODE &&
                    t.push(Node.TEXT_NODE);
                  var r = Array.from(e.parentNode.childNodes);
                  if (
                    (r = r.filter(function (r) {
                      var n = r.localName;
                      return t.indexOf(r.nodeType) >= 0 && n === e.localName;
                    })).length >= 1
                  )
                    return r.indexOf(e) + 1;
                  return 0;
                })(e),
                a = "";
              if (r === Node.ELEMENT_NODE) {
                var i = e.getAttribute("id");
                if (t && i) return '//*[@id="' + i + '"]';
                a = e.localName;
              } else if (r === Node.TEXT_NODE || r === Node.CDATA_SECTION_NODE)
                a = "text()";
              else {
                if (r !== Node.COMMENT_NODE) return "";
                a = "comment()";
              }
              if (a && n > 1) return "/" + a + "[" + n + "]";
              return "/" + a;
            })(e, t);
            if (t && r.indexOf("@id") > 0) return r;
            var n = "";
            return e.parentNode && (n += L(e.parentNode, !1)), (n += r);
          }
          function D(e, t) {
            var r = t || [];
            return (
              ("string" == typeof r || r instanceof RegExp) && (r = [r]),
              C(e).origin === location.origin ||
                r.some(function (t) {
                  return x(e, t);
                })
            );
          }
          var A = r(5239);
        },
        4180: (e) => {
          self,
            (e.exports = (() => {
              var e = {
                  43: function (e, t, r) {
                    var n, a;
                    !(function (i, s) {
                      "use strict";
                      (n = function () {
                        var e = function () {},
                          t = "undefined",
                          r =
                            typeof window !== t &&
                            typeof window.navigator !== t &&
                            /Trident\/|MSIE /.test(window.navigator.userAgent),
                          n = ["trace", "debug", "info", "warn", "error"];
                        function a(e, t) {
                          var r = e[t];
                          if ("function" == typeof r.bind) return r.bind(e);
                          try {
                            return Function.prototype.bind.call(r, e);
                          } catch (t) {
                            return function () {
                              return Function.prototype.apply.apply(r, [
                                e,
                                arguments,
                              ]);
                            };
                          }
                        }
                        function i() {
                          console.log &&
                            (console.log.apply
                              ? console.log.apply(console, arguments)
                              : Function.prototype.apply.apply(console.log, [
                                  console,
                                  arguments,
                                ])),
                            console.trace && console.trace();
                        }
                        function s(n) {
                          return (
                            "debug" === n && (n = "log"),
                            typeof console !== t &&
                              ("trace" === n && r
                                ? i
                                : void 0 !== console[n]
                                ? a(console, n)
                                : void 0 !== console.log
                                ? a(console, "log")
                                : e)
                          );
                        }
                        function o(t, r) {
                          for (var a = 0; a < n.length; a++) {
                            var i = n[a];
                            this[i] = a < t ? e : this.methodFactory(i, t, r);
                          }
                          this.log = this.debug;
                        }
                        function c(e, r, n) {
                          return function () {
                            typeof console !== t &&
                              (o.call(this, r, n),
                              this[e].apply(this, arguments));
                          };
                        }
                        function d(e, t, r) {
                          return s(e) || c.apply(this, arguments);
                        }
                        function u(e, r, a) {
                          var i,
                            s = this,
                            c = "loglevel";
                          function u() {
                            var e;
                            if (typeof window !== t && c) {
                              try {
                                e = window.localStorage[c];
                              } catch (e) {}
                              if (typeof e === t)
                                try {
                                  var r = window.document.cookie,
                                    n = r.indexOf(encodeURIComponent(c) + "=");
                                  -1 !== n &&
                                    (e = /^([^;]+)/.exec(r.slice(n))[1]);
                                } catch (e) {}
                              return void 0 === s.levels[e] && (e = void 0), e;
                            }
                          }
                          "string" == typeof e
                            ? (c += ":" + e)
                            : "symbol" == typeof e && (c = void 0),
                            (s.name = e),
                            (s.levels = {
                              TRACE: 0,
                              DEBUG: 1,
                              INFO: 2,
                              WARN: 3,
                              ERROR: 4,
                              SILENT: 5,
                            }),
                            (s.methodFactory = a || d),
                            (s.getLevel = function () {
                              return i;
                            }),
                            (s.setLevel = function (r, a) {
                              if (
                                ("string" == typeof r &&
                                  void 0 !== s.levels[r.toUpperCase()] &&
                                  (r = s.levels[r.toUpperCase()]),
                                !(
                                  "number" == typeof r &&
                                  r >= 0 &&
                                  r <= s.levels.SILENT
                                ))
                              )
                                throw (
                                  "log.setLevel() called with invalid level: " +
                                  r
                                );
                              if (
                                ((i = r),
                                !1 !== a &&
                                  (function (e) {
                                    var r = (n[e] || "silent").toUpperCase();
                                    if (typeof window !== t && c) {
                                      try {
                                        return void (window.localStorage[c] =
                                          r);
                                      } catch (e) {}
                                      try {
                                        window.document.cookie =
                                          encodeURIComponent(c) + "=" + r + ";";
                                      } catch (e) {}
                                    }
                                  })(r),
                                o.call(s, r, e),
                                typeof console === t && r < s.levels.SILENT)
                              )
                                return "No console available for logging";
                            }),
                            (s.setDefaultLevel = function (e) {
                              u() || s.setLevel(e, !1);
                            }),
                            (s.enableAll = function (e) {
                              s.setLevel(s.levels.TRACE, e);
                            }),
                            (s.disableAll = function (e) {
                              s.setLevel(s.levels.SILENT, e);
                            });
                          var l = u();
                          null == l && (l = null == r ? "WARN" : r),
                            s.setLevel(l, !1);
                        }
                        var l = new u(),
                          p = {};
                        l.getLogger = function (e) {
                          if (
                            ("symbol" != typeof e && "string" != typeof e) ||
                            "" === e
                          )
                            throw new TypeError(
                              "You must supply a name when creating a logger."
                            );
                          var t = p[e];
                          return (
                            t ||
                              (t = p[e] =
                                new u(e, l.getLevel(), l.methodFactory)),
                            t
                          );
                        };
                        var h = typeof window !== t ? window.log : void 0;
                        return (
                          (l.noConflict = function () {
                            return (
                              typeof window !== t &&
                                window.log === l &&
                                (window.log = h),
                              l
                            );
                          }),
                          (l.getLoggers = function () {
                            return p;
                          }),
                          (l.default = l),
                          l
                        );
                      }),
                        void 0 === (a = n.call(t, r, t, e)) || (e.exports = a);
                    })();
                  },
                },
                t = {};
              function r(n) {
                var a = t[n];
                if (void 0 !== a) return a.exports;
                var i = (t[n] = { exports: {} });
                return e[n].call(i.exports, i, i.exports, r), i.exports;
              }
              (r.d = (e, t) => {
                for (var n in t)
                  r.o(t, n) &&
                    !r.o(e, n) &&
                    Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
              }),
                (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
                (r.r = (e) => {
                  "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                      value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
                });
              var n = {};
              return (
                (() => {
                  "use strict";
                  r.r(n), r.d(n, { VideoSDKMetrics: () => ae });
                  const e = "inbound",
                    t = "outbound",
                    a = {
                      codec_id_in: "",
                      codec_in: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_in: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      timestamp_in: null,
                      ssrc: "",
                      total_concealment_events: 0,
                      delta_concealment_events: 0,
                      total_inserted_samples_for_decelaration: 0,
                      delta_inserted_samples_for_decelaration: 0,
                      total_removed_samples_for_accelaration: 0,
                      delta_removed_samples_for_accelaration: 0,
                      direction: e,
                    },
                    i = {
                      codec_id_out: "",
                      codec_out: {
                        mime_type: null,
                        clock_rate: null,
                        sdp_fmtp_line: null,
                      },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    s = {
                      codec_id_in: "",
                      size_in: { width: null, height: null, framerate: null },
                      codec_in: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_in: 0,
                      percent_packets_lost_in: 0,
                      delta_packets_in: 0,
                      delta_packets_lost_in: 0,
                      total_packets_in: 0,
                      total_packets_lost_in: 0,
                      total_KBytes_in: 0,
                      delta_KBytes_in: 0,
                      delta_kbs_in: 0,
                      ssrc: "",
                      direction: e,
                    },
                    o = {
                      codec_id_out: "",
                      size_out: { width: null, height: null, framerate: null },
                      codec_out: { mime_type: null, clock_rate: null },
                      delta_jitter_ms_out: 0,
                      delta_rtt_ms_out: null,
                      percent_packets_lost_out: 0,
                      delta_packets_out: 0,
                      delta_packets_lost_out: 0,
                      total_packets_out: 0,
                      total_packets_lost_out: 0,
                      total_KBytes_out: 0,
                      delta_KBytes_out: 0,
                      delta_kbs_out: 0,
                      limitation_out: {
                        reason: null,
                        durations: null,
                        resolutionChanges: 0,
                      },
                      timestamp_out: null,
                      ssrc: "",
                      direction: t,
                    },
                    c = "inbound-rtp",
                    d = "bytesReceived",
                    u = "bytesSent",
                    l = "currentRoundTripTime",
                    p = "roundTripTime",
                    h = "fractionLost",
                    _ = "frameHeight",
                    f = "frameWidth",
                    m = "qualityLimitationReason",
                    v = "qualityLimitationDurations",
                    g = "qualityLimitationResolutionChanges",
                    y = "jitter",
                    b = "packetsLost",
                    x = "packetsReceived",
                    E = "packetsSent",
                    T = "responsesReceived",
                    S = "selected",
                    w = "totalRoundTripTime",
                    R = "roundTripTimeMeasurements",
                    P = "framesDecoded",
                    O = "framesEncoded",
                    k = "totalDecodeTime",
                    C = "totalEncodeTime",
                    I = "pliCount",
                    L = "nackCount",
                    D = "audio",
                    A = "video",
                    M = {
                      0: "ETHERNET",
                      2: "CELLULAR_5G",
                      3: "WIFI",
                      5: "CELLULAR_4G",
                      10: "CELLULAR",
                    },
                    N = "audio",
                    j = "video",
                    B = "network",
                    U = "data";
                  var F = r(43);
                  const G = () => `${new Date().toISOString()} | metrics`,
                    V = (e, t, r) => `${e} | ${t} | ${r}`;
                  F.setDefaultLevel(F.levels.TRACE);
                  const Z = (e, t, r) => {
                      r ? F.debug(V(G(), e, t), r) : F.debug(V(G(), e, t));
                    },
                    H = (e, t) => {
                      F.warn(V(G(), e, t));
                    },
                    W = (e, t) => {
                      F.error(V(G(), e, t));
                    },
                    z = "extractor   ",
                    K = (t, r, n) => {
                      if (!r) return null;
                      const c = {};
                      let d = r.audio[t];
                      d || (d = n === e ? { ...a } : { ...i }), (c.audio = d);
                      let u = r.video[t];
                      return (
                        u || (u = n === e ? { ...s } : { ...o }),
                        (c.video = u),
                        c
                      );
                    },
                    X = (e, t, r, n) => {
                      let a = !1;
                      const i = n[t].total_rtt_ms_out,
                        s = n[t].total_rtt_measure_out,
                        o = r ? r[t].total_rtt_ms_out : 0,
                        c = r ? r[t].total_rtt_measure_out : 0,
                        d = { rtt: null, totalRTT: i, totalRTTMeasurements: s };
                      if (e.timestamp === n[t].timestamp_out) return d;
                      if (!Object.prototype.hasOwnProperty.call(e, p)) return d;
                      if (
                        Object.prototype.hasOwnProperty.call(e, R) &&
                        ((a = !0),
                        0 === Number(e.roundTripTimeMeasurements) ||
                          Number(e.roundTripTimeMeasurements) - c === s)
                      )
                        return d;
                      const u = Number(1e3) * Number(e.roundTripTime);
                      let l = i + u,
                        h = s + 1;
                      return (
                        a &&
                          ((l = Number(1e3) * Number(e.totalRoundTripTime) - o),
                          (h = Number(e.roundTripTimeMeasurements) - c)),
                        { rtt: u, totalRTT: l, totalRTTMeasurements: h }
                      );
                    },
                    q = (e, t, r) =>
                      e.timestamp === r[t].timestamp_out
                        ? null
                        : Object.prototype.hasOwnProperty.call(e, y)
                        ? Number(1e3) * (Number(e.jitter) || 0)
                        : null,
                    $ = (e, t, r, n) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, E) ||
                        !Object.prototype.hasOwnProperty.call(e, u)
                      )
                        return {
                          packetsSent: r[t].total_packets_out,
                          packetsLost: r[t].total_packets_lost_out,
                          bytesSent: r[t].total_KBytes_out,
                        };
                      const a =
                          Number(e.packetsSent) ||
                          0 - (n ? n[t].total_packets_out : 0),
                        i = a - r[t].total_packets_out,
                        s =
                          Number(e.bytesSent) / 1024 -
                          (n ? n[t].total_KBytes_out : 0),
                        o = s - r[t].total_KBytes_out,
                        c = e.timestamp || Date.now(),
                        d = n ? n.timestamp : null;
                      let l = r.timestamp;
                      !l && d && (l = d);
                      const p = l ? c - l : 0;
                      return {
                        packetsSent: a,
                        deltaPacketsSent: i,
                        KBytesSent: s,
                        deltaKBytesSent: o,
                        kbsSent: p > 0 ? ((0.008 * o * 1024) / p) * 1e3 : 0,
                      };
                    },
                    J = (e, t, r, n) => {
                      let a = r[t].total_packets_lost_out,
                        i = 0,
                        s = 0;
                      return (
                        Object.prototype.hasOwnProperty.call(e, b) &&
                          ((a =
                            Number(e.packetsLost) ||
                            0 - (n ? n[t].total_packets_lost_out : 0)),
                          (i = a - r[t].total_packets_lost_out)),
                        Object.prototype.hasOwnProperty.call(e, h) &&
                          (s = Number(100 * e.fractionLost)),
                        { packetsLost: a, deltaPacketsLost: i, fractionLost: s }
                      );
                    },
                    Y = (e, t, r, n) => {
                      if (
                        !Object.prototype.hasOwnProperty.call(e, x) ||
                        !Object.prototype.hasOwnProperty.call(e, b) ||
                        !Object.prototype.hasOwnProperty.call(e, d)
                      )
                        return {
                          percent_packets_lost: r[t].percent_packets_lost_in,
                          packetsReceived: r[t].total_packets_in,
                          packetsLost: r[t].total_packets_lost_in,
                          bytesReceived: r[t].total_KBytes_in,
                        };
                      const a =
                          (Number(e.packetsReceived) || 0) -
                          (n ? n[t].total_packets_in : 0),
                        i =
                          (Number(e.packetsLost) || 0) -
                          (n ? n[t].total_packets_lost_in : 0),
                        s = i - r[t].total_packets_lost_in,
                        o = a - r[t].total_packets_in,
                        c =
                          a !== r[t].total_packets_in ? (100 * s) / (s + o) : 0,
                        u =
                          Number(e.bytesReceived) / 1024 -
                          (n ? n[t].total_KBytes_in : 0),
                        l = u - r[t].total_KBytes_in,
                        p = e.timestamp || Date.now(),
                        h = n ? n.timestamp : null;
                      let _ = r.timestamp;
                      !_ && h && (_ = h);
                      const f = _ ? p - _ : 0;
                      return {
                        percentPacketsLost: c,
                        packetsReceived: a,
                        deltaPacketsReceived: o,
                        packetsLost: i,
                        deltaPacketsLost: s,
                        KBytesReceived: u,
                        deltaKBytesReceived: l,
                        kbsReceived: f > 0 ? ((0.008 * l * 1024) / f) * 1e3 : 0,
                      };
                    },
                    Q = (e) =>
                      "relay" !== e.candidateType ? "" : e.relayProtocol || "",
                    ee = (e) =>
                      Object.prototype.hasOwnProperty.call(e, _) &&
                      Object.prototype.hasOwnProperty.call(e, f)
                        ? {
                            width: e.frameWidth || null,
                            height: e.frameHeight || null,
                            framerate: e.framesPerSecond,
                          }
                        : { width: null, height: null, framerate: null };
                  class te {
                    constructor(e, t) {
                      (this._callbacks = { onStatsCollected: null }),
                        (this._id = `collector-${t}`),
                        (this._moduleName = this._id),
                        (this._probeId = t),
                        (this._config = e),
                        (this._state = "idle"),
                        (this._statsReports = []);
                    }
                    registerCallback(e, t, r) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = { callback: t, context: r }),
                          Z(this._moduleName, `registered callback '${e}'`))
                        : W(
                            this._moduleName,
                            `can't register callback for '${e}' - not found`
                          );
                    }
                    unregisterCallback(e) {
                      e in this._callbacks
                        ? ((this._callbacks[e] = null),
                          delete this._callbacks[e],
                          Z(this._moduleName, `unregistered callback '${e}'`))
                        : W(
                            this._moduleName,
                            `can't unregister callback for '${e}' - not found`
                          );
                    }
                    analyze(r, n) {
                      const d = ((e) => {
                        const t = {
                          name: "",
                          meetingId: "",
                          peerId: "",
                          timestamp: null,
                          count: 0,
                          audio: {},
                          video: {},
                          network: { infrastructure: 3 },
                          data: {
                            delta_kbs_bandwidth_in: 0,
                            delta_kbs_bandwidth_out: 0,
                            delta_rtt_connectivity_ms: null,
                            total_rtt_connectivity_ms: 0,
                          },
                        };
                        if (e) {
                          const t = {
                            ...e,
                            audio: {},
                            video: {},
                            data: { ...e.data },
                            network: { ...e.network },
                          };
                          return (
                            Object.keys(e.audio).forEach((r) => {
                              t.audio[r] = { ...e.audio[r] };
                            }),
                            Object.keys(e.video).forEach((r) => {
                              t.video[r] = { ...e.video[r] };
                            }),
                            t
                          );
                        }
                        return {
                          ...t,
                          audio: {},
                          video: {},
                          data: { ...t.data },
                          network: { ...t.network },
                        };
                      })(n);
                      (d.name = this._config.name),
                        (d.meetingId = this._config.meetingId),
                        (d.peerId = this._config.peerId),
                        (d.count = n ? n.count + 1 : 1);
                      let u = null;
                      return (
                        r.forEach((r) => {
                          !u && r.timestamp && (u = r.timestamp),
                            ((r, n, a, i) => {
                              if (!r) return [];
                              switch (r.type) {
                                case "candidate-pair":
                                  let s = !1;
                                  if (
                                    (r.nominated &&
                                      "succeeded" === r.state &&
                                      ((s = !0),
                                      Z(
                                        z,
                                        `analyze() - got stats ${r.type} for ${a}`,
                                        r
                                      ),
                                      S in r && !r.selected && (s = !1)),
                                    s)
                                  ) {
                                    r.localCandidateId, r.remoteCandidateId;
                                    const e = ((e, t, r) => {
                                        const n =
                                            (e.bytesReceived || 0) / 1024 -
                                            (r ? r.data.total_KBytes_in : 0),
                                          a =
                                            (e.bytesSent || 0) / 1024 -
                                            (r ? r.data.total_KBytes_out : 0),
                                          i = e.timestamp || Date.now(),
                                          s = n - t.data.total_KBytes_in,
                                          o = a - t.data.total_KBytes_out,
                                          c = r ? r.timestamp : null;
                                        let d = t.timestamp;
                                        !d && c && (d = c);
                                        const u = d ? i - d : 0;
                                        return {
                                          total_KBytes_received: n,
                                          total_KBytes_sent: a,
                                          delta_KBytes_received: s,
                                          delta_KBytes_sent: o,
                                          kbs_speed_received:
                                            u > 0
                                              ? ((0.008 * s * 1024) / u) * 1e3
                                              : 0,
                                          kbs_speed_sent:
                                            u > 0
                                              ? ((0.008 * o * 1024) / u) * 1e3
                                              : 0,
                                        };
                                      })(r, n, i),
                                      t =
                                        (((e) => {
                                          e.availableIncomingBitrate,
                                            e.availableOutgoingBitrate;
                                        })(r),
                                        ((e, t, r, n) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              l
                                            )
                                          )
                                            return {
                                              rtt: null,
                                              totalRTT:
                                                n.data
                                                  .total_rtt_connectivity_ms,
                                              totalRTTMeasurements:
                                                n.data
                                                  .total_rtt_connectivity_measure,
                                            };
                                          const a =
                                            Number(1e3) *
                                            Number(e.currentRoundTripTime);
                                          let i =
                                              n.data.total_rtt_connectivity_ms +
                                              a,
                                            s =
                                              n.data
                                                .total_rtt_connectivity_measure +
                                              1;
                                          return (
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              w
                                            ) &&
                                              (i =
                                                Number(1e3) *
                                                  Number(e.totalRoundTripTime) -
                                                (r
                                                  ? r.data
                                                      .total_rtt_connectivity_ms
                                                  : 0)),
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              T
                                            ) &&
                                              (s =
                                                Number(e.responsesReceived) -
                                                (r
                                                  ? r.data
                                                      .total_rtt_connectivity_measure
                                                  : 0)),
                                            {
                                              rtt: a,
                                              totalRTT: i,
                                              totalRTTMeasurements: s,
                                            }
                                          );
                                        })(r, 0, i, n));
                                    return [
                                      {
                                        type: U,
                                        value: {
                                          total_KBytes_in:
                                            e.total_KBytes_received,
                                        },
                                      },
                                      {
                                        type: U,
                                        value: {
                                          total_KBytes_out: e.total_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: U,
                                        value: {
                                          delta_KBytes_in:
                                            e.delta_KBytes_received,
                                        },
                                      },
                                      {
                                        type: U,
                                        value: {
                                          delta_KBytes_out: e.delta_KBytes_sent,
                                        },
                                      },
                                      {
                                        type: U,
                                        value: {
                                          delta_kbs_in: e.kbs_speed_received,
                                        },
                                      },
                                      {
                                        type: U,
                                        value: {
                                          delta_kbs_out: e.kbs_speed_sent,
                                        },
                                      },
                                      {
                                        type: U,
                                        value: {
                                          delta_rtt_connectivity_ms: t.rtt,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                case "local-candidate":
                                  if (r.id === n.network.local_candidate_id)
                                    return [
                                      {
                                        type: B,
                                        value: {
                                          infrastructure: r.networkType,
                                        },
                                      },
                                      {
                                        type: B,
                                        value: {
                                          local_candidate_protocol:
                                            r.protocol || "",
                                        },
                                      },
                                      {
                                        type: B,
                                        value: {
                                          local_candidate_relay_protocol: Q(r),
                                        },
                                      },
                                    ];
                                  break;
                                case c: {
                                  Z(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const t = r.ssrc,
                                    s = K(t, n, e);
                                  s && (s.timestamp = n.timestamp);
                                  const o = K(t, i, e);
                                  if (
                                    (o && (o.timestamp = i.timestamp),
                                    r.mediaType === D)
                                  ) {
                                    const e = Y(r, D, s, o),
                                      n = q(r, D, s),
                                      a = r.codecId || "",
                                      i = ((e, t, r, n) => {
                                        const a =
                                            Number(e.concealmentEvents) || 0,
                                          i =
                                            a -
                                            (r.audio.total_concealment_events ||
                                              0),
                                          s =
                                            Number(
                                              e.insertedSamplesForDeceleration
                                            ) || 0,
                                          o =
                                            s -
                                            (r.audio
                                              .total_inserted_samples_for_decelaration ||
                                              0),
                                          c =
                                            Number(
                                              e.removedSamplesForAcceleration
                                            ) || 0;
                                        return {
                                          totalConcealmentEvents: a,
                                          deltaConcealmentEvents: i,
                                          totalInsertedSamplesForDecelaration:
                                            s,
                                          deltaInsertedSamplesForDecelaration:
                                            o,
                                          totalRemovedSamplesForAccelaration: c,
                                          deltaRemovedSampleForAccelaration:
                                            c -
                                            (r.audio
                                              .total_removed_samples_for_accelaration ||
                                              0),
                                        };
                                      })(r, 0, s);
                                    return [
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: { codec_id_in: a },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          total_packets_in: e.packetsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          delta_packets_in:
                                            e.deltaPacketsReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          total_packets_lost_in: e.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          delta_packets_lost_in:
                                            e.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          percent_packets_lost_in:
                                            e.percentPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          total_KBytes_in: e.KBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          delta_KBytes_in:
                                            e.deltaKBytesReceived,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: { delta_kbs_in: e.kbsReceived },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: { delta_jitter_ms_in: n },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          total_concealment_events:
                                            i.totalConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          delta_concealment_events:
                                            i.deltaConcealmentEvents,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          total_inserted_samples_for_decelaration:
                                            i.totalInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          delta_inserted_samples_for_decelaration:
                                            i.deltaInsertedSamplesForDecelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          total_removed_samples_for_accelaration:
                                            i.totalRemovedSamplesForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          delta_removed_samples_for_accelaration:
                                            i.deltaRemovedSampleForAccelaration,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: { track_in: r.trackId },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          track_id_in: r.trackIdentifier,
                                        },
                                      },
                                      {
                                        ssrc: t,
                                        type: N,
                                        value: {
                                          media_source_id: r.mediaSourceId,
                                        },
                                      },
                                    ];
                                  }
                                  if (r.mediaType === A) {
                                    ((e, t) => {
                                      if (
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          P
                                        ) ||
                                        !Object.prototype.hasOwnProperty.call(
                                          e,
                                          k
                                        )
                                      )
                                        return {
                                          delta_ms_decode_frame:
                                            t.video.delta_ms_decode_frame_in,
                                          frames_decoded:
                                            t.video.total_frames_decoded_in,
                                          total_decode_time:
                                            t.video.total_time_decoded_in,
                                        };
                                      e.framesDecoded,
                                        e.totalDecodeTime,
                                        t.video.total_time_decoded_in,
                                        t.video.total_frames_decoded_in;
                                    })(r, s);
                                    const e = Y(r, A, s, o),
                                      n = q(r, A, s),
                                      a =
                                        (r.decoderImplementation,
                                        r.codecId || null),
                                      i = ee(r);
                                    return (
                                      ((e, t, r) => {
                                        if (
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            I
                                          ) ||
                                          !Object.prototype.hasOwnProperty.call(
                                            e,
                                            L
                                          )
                                        )
                                          return {
                                            pliCount: t.total_pli_sent_in,
                                            nackCount: t.total_nack_sent_in,
                                            deltaPliCount: 0,
                                            deltaNackCount: 0,
                                          };
                                        e.pliCount,
                                          r && r.video.total_pli_sent_in,
                                          e.nackCount,
                                          r && r.video.total_nack_sent_in,
                                          t.video.total_pli_sent_in,
                                          t.video.total_nack_sent_in;
                                      })(r, s, o),
                                      [
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: { codec_id_in: a },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            total_packets_in: e.packetsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            delta_packets_in:
                                              e.deltaPacketsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            total_packets_lost_in:
                                              e.packetsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            delta_packets_lost_in:
                                              e.deltaPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            percent_packets_lost_in:
                                              e.percentPacketsLost,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            total_KBytes_in: e.KBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            delta_KBytes_in:
                                              e.deltaKBytesReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            delta_kbs_in: e.kbsReceived,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: { delta_jitter_ms_in: n },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: { size_in: i },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: { track_in: r.trackId },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            track_id_in: r.trackIdentifier,
                                          },
                                        },
                                        {
                                          ssrc: t,
                                          type: j,
                                          value: {
                                            media_source_id: r.mediaSourceId,
                                          },
                                        },
                                      ]
                                    );
                                  }
                                  break;
                                }
                                case "outbound-rtp": {
                                  Z(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = r.ssrc,
                                    s = K(e, n, t);
                                  s && (s.timestamp = n.timestamp);
                                  const o = K(e, i, t);
                                  if (
                                    (o && (o.timestamp = i.timestamp),
                                    r.mediaType === D)
                                  ) {
                                    const t = r.codecId || null,
                                      n = $(r, D, s, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          total_packets_out: n.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          delta_packets_out: n.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          total_KBytes_out: n.KBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          delta_KBytes_out: n.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_kbs_out: n.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { track_out: r.trackId },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          track_id_out: r.trackIdentifier,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          media_source_id: r.mediaSourceId,
                                        },
                                      },
                                    ];
                                  }
                                  if (r.mediaType === A) {
                                    r.encoderImplementation;
                                    const t = r.codecId || null,
                                      n =
                                        (((e, t) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              O
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              C
                                            )
                                          )
                                            return {
                                              delta_ms_encode_frame:
                                                t.video
                                                  .delta_ms_encode_frame_out,
                                              frames_encoded:
                                                t.video
                                                  .total_frames_encoded_out,
                                              total_encode_time:
                                                t.video.total_time_encoded_out,
                                            };
                                          e.framesEncoded,
                                            e.totalEncodeTime,
                                            t.video.total_time_encoded_out,
                                            t.video.total_frames_encoded_out;
                                        })(r, s),
                                        ee(r)),
                                      a = ((e) => {
                                        const t =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              m
                                            )
                                              ? e.qualityLimitationReason
                                              : null,
                                          r =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              g
                                            )
                                              ? e.qualityLimitationResolutionChanges
                                              : null,
                                          n =
                                            Object.prototype.hasOwnProperty.call(
                                              e,
                                              v
                                            )
                                              ? e.qualityLimitationDurations
                                              : null;
                                        return (
                                          n &&
                                            Object.keys(n).forEach((e) => {
                                              n[e] > 1e3 &&
                                                (n[e] = Number(n[e] / 1e3));
                                            }),
                                          {
                                            reason: t,
                                            durations: n,
                                            resolutionChanges: r,
                                          }
                                        );
                                      })(r),
                                      i =
                                        (((e, t, r) => {
                                          if (
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              I
                                            ) ||
                                            !Object.prototype.hasOwnProperty.call(
                                              e,
                                              L
                                            )
                                          )
                                            return {
                                              pliCount:
                                                t.total_pli_received_out,
                                              nackCount:
                                                t.total_nack_received_out,
                                              deltaPliCount: 0,
                                              deltaNackCount: 0,
                                            };
                                          e.pliCount,
                                            r && r.video.total_pli_received_out,
                                            e.nackCount,
                                            r &&
                                              r.video.total_nack_received_out,
                                            t.video.total_pli_received_out,
                                            t.video.total_nack_received_out;
                                        })(r, s, o),
                                        $(r, A, s, o));
                                    return [
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { codec_id_out: t },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          total_packets_out: i.packetsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          delta_packets_out: i.deltaPacketsSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          total_KBytes_out: i.KBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          delta_KBytes_out: i.deltaKBytesSent,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_kbs_out: i.kbsSent },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { size_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { limitation_out: a },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { track_out: r.trackId },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          track_id_out: r.trackIdentifier,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          media_source_id: r.mediaSourceId,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "media-source": {
                                  Z(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(n.audio).forEach((t) => {
                                      const i = n.audio[t];
                                      if (i.media_source_id === r.id) {
                                        Z(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        e.push({
                                          ssrc: i.ssrc,
                                          type: N,
                                          value: { track_id_out: s },
                                        });
                                      }
                                    }),
                                    Object.keys(n.video).forEach((t) => {
                                      const i = n.video[t];
                                      if (i.media_source_id === r.id) {
                                        Z(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        e.push({
                                          ssrc: i.ssrc,
                                          type: j,
                                          value: { track_id_out: s },
                                        });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "track": {
                                  Z(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = [];
                                  return (
                                    Object.keys(n.audio).forEach((t) => {
                                      const i = n.audio[t];
                                      if (
                                        i.track_in === r.id ||
                                        i.track_out === r.id
                                      ) {
                                        Z(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        r.id === i.track_in
                                          ? e.push({
                                              ssrc: i.ssrc,
                                              type: N,
                                              value: { track_id_in: s },
                                            })
                                          : e.push({
                                              ssrc: i.ssrc,
                                              type: N,
                                              value: { track_id_out: s },
                                            });
                                      }
                                    }),
                                    Object.keys(n.video).forEach((t) => {
                                      const i = n.video[t];
                                      if (
                                        i.track_in === r.id ||
                                        i.track_out === r.id
                                      ) {
                                        Z(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        var s = r.trackIdentifier;
                                        r.id === i.track_in
                                          ? e.push({
                                              ssrc: i.ssrc,
                                              type: j,
                                              value: { track_id_in: s },
                                            })
                                          : e.push({
                                              ssrc: i.ssrc,
                                              type: j,
                                              value: { track_id_out: s },
                                            });
                                      }
                                    }),
                                    e
                                  );
                                }
                                case "codec":
                                  const o = [];
                                  return (
                                    Object.keys(n.audio).forEach((e) => {
                                      const t = n.audio[e];
                                      if (
                                        t.codec_id_in === r.id ||
                                        t.codec_id_out === r.id
                                      ) {
                                        Z(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          channels: e.channels || null,
                                          clock_rate: e.clockRate || null,
                                          mime_type: e.mimeType || null,
                                          sdp_fmtp_line: e.sdpFmtpLine || null,
                                        }))(r);
                                        r.id === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: N,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: N,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    Object.keys(n.video).forEach((e) => {
                                      const t = n.video[e];
                                      if (
                                        t.codec_id_in === r.id ||
                                        t.codec_id_out === r.id
                                      ) {
                                        Z(
                                          z,
                                          `analyze() - got stats ${r.type} for ${a}`,
                                          r
                                        );
                                        const e = ((e) => ({
                                          clock_rate: e.clockRate || null,
                                          mime_type: e.mimeType || null,
                                        }))(r);
                                        r.id === t.codec_id_in
                                          ? o.push({
                                              ssrc: t.ssrc,
                                              type: j,
                                              value: { codec_in: e },
                                            })
                                          : o.push({
                                              ssrc: t.ssrc,
                                              type: j,
                                              value: { codec_out: e },
                                            });
                                      }
                                    }),
                                    o
                                  );
                                case "remote-inbound-rtp": {
                                  Z(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = r.ssrc,
                                    s = K(e, n, t),
                                    o = K(e, i, t);
                                  if (r.kind === D) {
                                    const t = X(r, D, o, s),
                                      n = q(r, D, s),
                                      a = J(r, D, s, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_jitter_ms_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { timestamp_out: r.timestamp },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          total_packets_lost_out: a.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          delta_packets_lost_out:
                                            a.deltaPacketsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: {
                                          percent_packets_lost_out:
                                            a.fractionLost,
                                        },
                                      },
                                    ];
                                  }
                                  if (r.kind === A) {
                                    const t = X(r, A, o, s),
                                      n = q(r, A, s),
                                      a = J(r, A, s, o);
                                    return [
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_rtt_ms_out: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { delta_jitter_ms_out: n },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: { timestamp_out: r.timestamp },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          total_packets_lost_out: a.packetsLost,
                                        },
                                      },
                                      {
                                        ssrc: e,
                                        type: j,
                                        value: {
                                          delta_packets_lost_out:
                                            a.deltaPacketsLost,
                                        },
                                      },
                                    ];
                                  }
                                  break;
                                }
                                case "remote-outbound-rtp": {
                                  Z(
                                    z,
                                    `analyze() - got stats ${r.type} for ${a}`,
                                    r
                                  );
                                  const e = r.ssrc,
                                    s = K(e, n, t),
                                    o = K(e, i, t);
                                  if (r.kind === D) {
                                    const t = X(r, D, o, s);
                                    return [
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { delta_rtt_ms_in: t.rtt },
                                      },
                                      {
                                        ssrc: e,
                                        type: N,
                                        value: { timestamp_in: r.timestamp },
                                      },
                                    ];
                                  }
                                  break;
                                }
                              }
                              return [];
                            })(r, d, d.name, null).forEach((e) => {
                              if (e.value && e.type)
                                if (e.ssrc) {
                                  let u = d[e.type][e.ssrc];
                                  u ||
                                    ((t = e.type),
                                    (n = r.type),
                                    (u =
                                      t === D
                                        ? n === c
                                          ? { ...a }
                                          : { ...i }
                                        : n === c
                                        ? { ...s }
                                        : { ...o }),
                                    (u.ssrc = e.ssrc),
                                    (d[e.type][e.ssrc] = u)),
                                    Object.keys(e.value).forEach((t) => {
                                      void 0 !== e.value[t] &&
                                        (u[t] = e.value[t]);
                                    });
                                } else
                                  Object.keys(e.value).forEach((t) => {
                                    void 0 !== e.value[t] &&
                                      (d[e.type][t] = e.value[t]);
                                  });
                              var t, n;
                            });
                        }),
                        (d.timestamp = u),
                        d
                      );
                    }
                    async collectStats() {
                      try {
                        const e =
                            await this._config.monitoringObject.getStats(),
                          t = this.analyze(
                            e,
                            this._statsReports.slice().pop() || null
                          );
                        return (
                          this._statsReports.push(t),
                          this.fireOnStatsCollected(t),
                          e
                        );
                      } catch (e) {
                        return W(this._moduleName, `got error ${e}`), null;
                      }
                    }
                    fireOnStatsCollected(r) {
                      if (this._callbacks.onStatsCollected) {
                        const n = {};
                        (n.meetingId = r.meetingId),
                          (n.peerId = r.peerId),
                          (n.name = r.name),
                          (n.audio = []),
                          (n.video = []),
                          Object.values(r.audio).forEach((a) => {
                            const i = {};
                            (i.network = M[r.network.infrastructure]),
                              (i.timestamp = r.timestamp),
                              a.direction == e
                                ? ((i.codec = a.codec_in.mime_type),
                                  (i.jitter = a.delta_jitter_ms_in),
                                  (i.bitrate = a.delta_kbs_in),
                                  (i.packetsLost = a.delta_packets_lost_in),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_in),
                                  (i.concealmentEvents =
                                    a.delta_concealment_events),
                                  (i.removedSampleForAccelaration =
                                    a.delta_removed_samples_for_accelaration),
                                  (i.insertedSamplesForDecelaration =
                                    a.delta_inserted_samples_for_decelaration),
                                  (i.trackId = a.track_id_in))
                                : a.direction == t &&
                                  ((i.codec = a.codec_out.mime_type),
                                  (i.jitter = a.delta_jitter_ms_out),
                                  (i.bitrate = a.delta_kbs_out),
                                  (i.packetsLost = a.delta_packets_lost_out),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_out),
                                  (i.trackId = a.track_id_out)),
                              n.audio.push(i);
                          }),
                          Object.values(r.video).forEach((a) => {
                            const i = {};
                            (i.network = M[r.network.infrastructure]),
                              (i.timestamp = r.timestamp),
                              a.direction == e
                                ? ((i.codec = a.codec_in.mime_type),
                                  (i.jitter = a.delta_jitter_ms_in),
                                  (i.bitrate = a.delta_kbs_in),
                                  (i.packetsLost = a.delta_packets_lost_in),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_in),
                                  (i.size = a.size_in),
                                  (i.trackId = a.track_id_in))
                                : a.direction == t &&
                                  ((i.codec = a.codec_out.mime_type),
                                  (i.jitter = a.delta_jitter_ms_out),
                                  (i.bitrate = a.delta_kbs_out),
                                  (i.packetsLost = a.delta_packets_lost_out),
                                  (i.rtt =
                                    r.data.delta_rtt_connectivity_ms || 0),
                                  (i.totalPackets = a.delta_packets_out),
                                  (i.limitation = a.limitation_out),
                                  (i.size = a.size_out),
                                  (i.trackId = a.track_id_out)),
                              n.video.push(i);
                          }),
                          this._callbacks.onStatsCollected.callback(n);
                      }
                    }
                  }
                  class re {
                    constructor(e) {
                      (this._id =
                        e.name && e.name.substr(0, 12).padEnd(12, " ")),
                        (this._moduleName = this._id),
                        (this._config = e),
                        (this._collector = new te(this._config, this._id));
                    }
                    get id() {
                      return this._id;
                    }
                    start() {
                      this._collectorIntervalId
                        ? H("Probe already started.")
                        : (Z(this._moduleName, "Probe Started"),
                          (this._collectorIntervalId = setInterval(() => {
                            Z(this._moduleName, "Collector collecting stats"),
                              this._collector.collectStats();
                          }, this._config.refreshEvery)));
                    }
                    stop() {
                      this._collectorIntervalId
                        ? (clearInterval(this._collectorIntervalId),
                          Z(this._moduleName, "Probe Stopped"))
                        : H("Probe not running, Please start first.");
                    }
                    set onStatsCollected(e) {
                      e
                        ? this._collector.registerCallback(
                            "onStatsCollected",
                            e
                          )
                        : this._collector.unregisterCallback(
                            "onStatsCollected"
                          );
                    }
                  }
                  const ne = {
                    refreshEvery: 2e3,
                    startAfter: 0,
                    stopAfter: -1,
                    verbose: !1,
                    peerId: "peerId",
                    meetingId: "meetingId",
                    name: "name",
                  };
                  class ae {
                    constructor(e) {
                      var t;
                      (this._config = { defaultConfig: ne, ...e }),
                        (this._probes = []),
                        (t = this._config.verbose || !1),
                        F.setLevel(t ? F.levels.TRACE : F.levels.INFO),
                        Z("VideoSDKMetrics", "VideoSDKMetrics initialized");
                    }
                    get probes() {
                      return this._probes;
                    }
                    addNewProbe(e, t) {
                      if (!e) throw new Error("undefined monitoring object");
                      const r = { monitoringObject: e, ...t, ...this._config },
                        n = new re(r);
                      return this._probes.push(n), n;
                    }
                    removeExistingProbe(e) {
                      if (!e) throw new Error("undefined probe");
                      e.stop(),
                        (this._probes = this._probes.filter(
                          (t) => e.id !== t.id
                        ));
                    }
                    startAllProbes() {
                      this._probes.forEach((e, t) => {
                        e.start();
                      });
                    }
                    stopAllProbes() {
                      this._probes.forEach((e) => e.stop());
                    }
                  }
                })(),
                n
              );
            })());
        },
        2186: function (e, t) {
          "use strict";
          var r =
            (this && this.__awaiter) ||
            function (e, t, r, n) {
              return new (r || (r = Promise))(function (a, i) {
                function s(e) {
                  try {
                    c(n.next(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function o(e) {
                  try {
                    c(n.throw(e));
                  } catch (e) {
                    i(e);
                  }
                }
                function c(e) {
                  var t;
                  e.done
                    ? a(e.value)
                    : ((t = e.value),
                      t instanceof r
                        ? t
                        : new r(function (e) {
                            e(t);
                          })).then(s, o);
                }
                c((n = n.apply(e, t || [])).next());
              });
            };
          Object.defineProperty(t, "__esModule", { value: !0 });
          t.AwaitQueue = class {
            constructor(
              { ClosedErrorClass: e = Error, StoppedErrorClass: t = Error } = {
                ClosedErrorClass: Error,
                StoppedErrorClass: Error,
              }
            ) {
              (this.closed = !1),
                (this.pendingTasks = []),
                (this.ClosedErrorClass = Error),
                (this.StoppedErrorClass = Error),
                (this.ClosedErrorClass = e),
                (this.StoppedErrorClass = t);
            }
            get size() {
              return this.pendingTasks.length;
            }
            close() {
              if (!this.closed) {
                this.closed = !0;
                for (const e of this.pendingTasks)
                  (e.stopped = !0),
                    e.reject(new this.ClosedErrorClass("AwaitQueue closed"));
                this.pendingTasks.length = 0;
              }
            }
            push(e, t) {
              return r(this, void 0, void 0, function* () {
                if (this.closed)
                  throw new this.ClosedErrorClass("AwaitQueue closed");
                if ("function" != typeof e)
                  throw new TypeError("given task is not a function");
                if (!e.name && t)
                  try {
                    Object.defineProperty(e, "name", { value: t });
                  } catch (e) {}
                return new Promise((r, n) => {
                  const a = {
                    task: e,
                    name: t,
                    resolve: r,
                    reject: n,
                    stopped: !1,
                    enqueuedAt: new Date(),
                    executedAt: void 0,
                  };
                  this.pendingTasks.push(a),
                    1 === this.pendingTasks.length && this.next();
                });
              });
            }
            stop() {
              if (!this.closed) {
                for (const e of this.pendingTasks)
                  (e.stopped = !0),
                    e.reject(new this.StoppedErrorClass("AwaitQueue stopped"));
                this.pendingTasks.length = 0;
              }
            }
            dump() {
              const e = new Date();
              return this.pendingTasks.map((t) => ({
                task: t.task,
                name: t.name,
                enqueuedTime: t.executedAt
                  ? t.executedAt.getTime() - t.enqueuedAt.getTime()
                  : e.getTime() - t.enqueuedAt.getTime(),
                executingTime: t.executedAt
                  ? e.getTime() - t.executedAt.getTime()
                  : 0,
              }));
            }
            next() {
              return r(this, void 0, void 0, function* () {
                const e = this.pendingTasks[0];
                e &&
                  (yield this.executeTask(e),
                  this.pendingTasks.shift(),
                  this.next());
              });
            }
            executeTask(e) {
              return r(this, void 0, void 0, function* () {
                if (!e.stopped) {
                  e.executedAt = new Date();
                  try {
                    const t = yield e.task();
                    if (e.stopped) return;
                    e.resolve(t);
                  } catch (t) {
                    if (e.stopped) return;
                    e.reject(t);
                  }
                }
              });
            }
          };
        },
        8962: (e, t, r) => {
          "use strict";
          r.d(t, { v: () => n });
          var n = {
            networkPriorities: {
              audio: "high",
              dominatingVideo: "high",
              otherVideos: "medium",
              screenShare: "medium",
            },
            aspectRatios: {
              fourThree: { label: "fourThree", value: 1.333 },
              oneSixNine: { label: "oneSixNine", value: 1.777 },
            },
            audioProfiles: {
              speech_low_quality: {
                sampleRate: 16e3,
                bitRate: 24,
                sampleSize: 16,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 16e3,
                packetTime: 20,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              speech_standard: {
                sampleRate: 32e3,
                bitRate: 24,
                sampleSize: 24,
                stereo: !1,
                dtx: !0,
                fec: !0,
                maxPlaybackRate: 32e3,
                packetTime: 30,
                autoGainControl: !0,
                echoCancellation: !0,
                noiseSuppression: !0,
                channelCount: 1,
              },
              music_standard: {
                sampleRate: 48e3,
                bitRate: 40,
                sampleSize: 32,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              standard_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 64,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 40,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
              high_quality: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 128,
                stereo: !1,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 1,
              },
              high_quality_stereo: {
                sampleRate: 48e3,
                sampleSize: 32,
                bitRate: 192,
                stereo: !0,
                dtx: !1,
                fec: !0,
                maxPlaybackRate: 48e3,
                packetTime: 60,
                autoGainControl: !1,
                echoCancellation: !1,
                noiseSuppression: !1,
                channelCount: 2,
              },
            },
            videoProfiles: {
              h90p_w160p: {
                width: 160,
                height: 90,
                bitRate: 6e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h180p_w320p: {
                width: 320,
                height: 180,
                bitRate: 12e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h216p_w384p: {
                width: 384,
                height: 216,
                bitRate: 18e4,
                frameRate: 15,
                aspectRatio: "oneSixNine",
              },
              h360p_w640p: {
                width: 640,
                height: 360,
                bitRate: 3e5,
                frameRate: 20,
                aspectRatio: "oneSixNine",
              },
              h540p_w960p: {
                width: 960,
                height: 540,
                bitRate: 6e5,
                frameRate: 25,
                aspectRatio: "oneSixNine",
              },
              h720p_w1280p: {
                width: 1280,
                height: 720,
                bitRate: 2e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1080p_w1920p: {
                width: 1920,
                height: 1080,
                bitRate: 3e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h1440p_w2560p: {
                width: 2560,
                height: 1440,
                bitRate: 5e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h2160p_w3840p: {
                width: 3840,
                height: 2160,
                bitRate: 8e6,
                frameRate: 30,
                aspectRatio: "oneSixNine",
              },
              h120p_w160p: {
                width: 160,
                height: 120,
                bitRate: 8e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h180p_w240p: {
                width: 240,
                height: 180,
                bitRate: 1e5,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h240p_w320p: {
                width: 320,
                height: 240,
                bitRate: 15e4,
                frameRate: 15,
                aspectRatio: "fourThree",
              },
              h360p_w480p: {
                width: 480,
                height: 360,
                bitRate: 225e3,
                frameRate: 20,
                aspectRatio: "fourThree",
              },
              h480p_w640p: {
                width: 640,
                height: 480,
                bitRate: 3e5,
                frameRate: 25,
                aspectRatio: "fourThree",
              },
              h540p_w720p: {
                width: 720,
                height: 540,
                bitRate: 45e4,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h720p_w960p: {
                width: 960,
                height: 720,
                bitRate: 15e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1080p_w1440p: {
                width: 1440,
                height: 1080,
                bitRate: 25e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
              h1440p_w1920p: {
                width: 1920,
                height: 1440,
                bitRate: 35e5,
                frameRate: 30,
                aspectRatio: "fourThree",
              },
            },
            screenShareProfiles: {
              h360p_30fps: {
                width: 640,
                height: 360,
                bitRate: 2e5,
                frameRate: 3,
              },
              h720p_5fps: {
                width: 1280,
                height: 720,
                bitRate: 4e5,
                frameRate: 5,
              },
              h720p_15fps: {
                width: 1280,
                height: 720,
                bitRate: 1e6,
                frameRate: 15,
              },
              h1080p_15fps: {
                width: 1920,
                height: 1080,
                bitRate: 15e5,
                frameRate: 15,
              },
              h1080p_30fps: {
                width: 1920,
                height: 1080,
                bitRate: 1e6,
                frameRate: 15,
              },
            },
            simulcastProfiles: {
              3840: [
                { scaleResolutionDownBy: 12, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 6, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 1e7 },
              ],
              1920: [
                { scaleResolutionDownBy: 6, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 3, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 35e5 },
              ],
              1280: [
                { scaleResolutionDownBy: 4, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 2, maxBitRate: 5e5 },
                { scaleResolutionDownBy: 1, maxBitRate: 12e5 },
              ],
              640: [
                { scaleResolutionDownBy: 2, maxBitRate: 15e4 },
                { scaleResolutionDownBy: 1, maxBitRate: 5e5 },
              ],
              320: [{ scaleResolutionDownBy: 1, maxBitRate: 15e4 }],
            },
            requestTimeout: 2e4,
            requestRetries: 3,
            transportOptions: { tcp: !0 },
            videoKSVCEncodings: [{ scalabilityMode: "S3T3_KEY" }],
            videoSVCEncodings: [{ scalabilityMode: "S3T3", dtx: !0 }],
          };
        },
        6900: (e, t, r) => {
          "use strict";
          r.d(t, { H: () => a, R: () => n });
          var n = {
              INVALID_API_KEY: 4001,
              INVALID_TOKEN: 4002,
              INVALID_MEETING_ID: 4003,
              INVALID_PARTICIPANT_ID: 4004,
              DUPLICATE_PARTICIPANT: 4005,
              ACCOUNT_DEACTIVATED: 4006,
              ACCOUNT_DISCONTINUED: 4007,
              INVALID_PERMISSIONS: 4008,
              MAX_PARTCIPANT_REACHED: 4009,
              MAX_SPEAKER_REACHED: 4010,
              START_RECORDING_FAILED: 4011,
              STOP_RECORDING_FAILED: 4012,
              START_LIVESTREAM_FAILED: 4013,
              STOP_LIVESTREAM_FAILED: 4014,
              INVALID_LIVESTREAM_CONFIG: 4015,
              START_HLS_FAILED: 4016,
              STOP_HLS_FAILED: 4017,
              RECORDING_FAILED: 5001,
              LIVESTREAM_FAILED: 5002,
              HLS_FAILED: 5003,
              ERROR_GET_VIDEO_MEDIA: 3011,
              ERROR_GET_AUDIO_MEDIA: 3012,
              ERROR_GET_DISPLAY_MEDIA: 3013,
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: 3014,
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: 3015,
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: 3016,
            },
            a = {
              ERROR_GET_VIDEO_MEDIA: {
                code: 3011,
                message: "Your browser/Device does not support Video.",
              },
              ERROR_GET_AUDIO_MEDIA: {
                code: 3012,
                message: "Your browser/Device does not support Audio.",
              },
              ERROR_GET_DISPLAY_MEDIA: {
                code: 3013,
                message: "Your browser/Device does not support Screen Sharing.",
              },
              ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED: {
                code: 3014,
                message: "Video capture permission denied.",
              },
              ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED: {
                code: 3015,
                message: "Audio capture permission denied.",
              },
              ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED: {
                code: 3016,
                message: "Screen sharing permission denied.",
              },
            };
        },
        6380: (e, t, r) => {
          "use strict";
          r.d(t, { o: () => n });
          var n = {
            HLS_STARTING: "HLS_STARTING",
            HLS_STARTED: "HLS_STARTED",
            HLS_PLAYABLE: "HLS_PLAYABLE",
            HLS_STOPPING: "HLS_STOPPING",
            HLS_STOPPED: "HLS_STOPPED",
          };
        },
        3430: (e, t, r) => {
          "use strict";
          r.d(t, { S: () => n });
          var n = { CONFERENCE: "CONFERENCE", VIEWER: "VIEWER" };
        },
        8508: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { VideoSDK: () => Et, ZujoSDK: () => Tt });
          var n = r(5861),
            a = r(1002),
            i = r(5671),
            s = r(3144),
            o = r(4942),
            c = r(7757),
            d = r.n(c),
            u = r(1206),
            l = r.n(u);
          function p(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function h(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? p(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : p(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          function _(e) {
            return (
              "Minified Redux error #" +
              e +
              "; visit https://redux.js.org/Errors?code=" +
              e +
              " for the full message or use the non-minified dev environment for full errors. "
            );
          }
          var f =
              ("function" == typeof Symbol && Symbol.observable) ||
              "@@observable",
            m = function () {
              return Math.random()
                .toString(36)
                .substring(7)
                .split("")
                .join(".");
            },
            v = {
              INIT: "@@redux/INIT" + m(),
              REPLACE: "@@redux/REPLACE" + m(),
              PROBE_UNKNOWN_ACTION: function () {
                return "@@redux/PROBE_UNKNOWN_ACTION" + m();
              },
            };
          function g(e) {
            if ("object" != typeof e || null === e) return !1;
            for (var t = e; null !== Object.getPrototypeOf(t); )
              t = Object.getPrototypeOf(t);
            return Object.getPrototypeOf(e) === t;
          }
          function y(e, t, r) {
            var n;
            if (
              ("function" == typeof t && "function" == typeof r) ||
              ("function" == typeof r && "function" == typeof arguments[3])
            )
              throw new Error(_(0));
            if (
              ("function" == typeof t &&
                void 0 === r &&
                ((r = t), (t = void 0)),
              void 0 !== r)
            ) {
              if ("function" != typeof r) throw new Error(_(1));
              return r(y)(e, t);
            }
            if ("function" != typeof e) throw new Error(_(2));
            var a = e,
              i = t,
              s = [],
              o = s,
              c = !1;
            function d() {
              o === s && (o = s.slice());
            }
            function u() {
              if (c) throw new Error(_(3));
              return i;
            }
            function l(e) {
              if ("function" != typeof e) throw new Error(_(4));
              if (c) throw new Error(_(5));
              var t = !0;
              return (
                d(),
                o.push(e),
                function () {
                  if (t) {
                    if (c) throw new Error(_(6));
                    (t = !1), d();
                    var r = o.indexOf(e);
                    o.splice(r, 1), (s = null);
                  }
                }
              );
            }
            function p(e) {
              if (!g(e)) throw new Error(_(7));
              if (void 0 === e.type) throw new Error(_(8));
              if (c) throw new Error(_(9));
              try {
                (c = !0), (i = a(i, e));
              } finally {
                c = !1;
              }
              for (var t = (s = o), r = 0; r < t.length; r++) {
                (0, t[r])();
              }
              return e;
            }
            function h(e) {
              if ("function" != typeof e) throw new Error(_(10));
              (a = e), p({ type: v.REPLACE });
            }
            function m() {
              var e,
                t = l;
              return (
                ((e = {
                  subscribe: function (e) {
                    if ("object" != typeof e || null === e)
                      throw new Error(_(11));
                    function r() {
                      e.next && e.next(u());
                    }
                    return r(), { unsubscribe: t(r) };
                  },
                })[f] = function () {
                  return this;
                }),
                e
              );
            }
            return (
              p({ type: v.INIT }),
              ((n = {
                dispatch: p,
                subscribe: l,
                getState: u,
                replaceReducer: h,
              })[f] = m),
              n
            );
          }
          function b() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
              t[r] = arguments[r];
            return 0 === t.length
              ? function (e) {
                  return e;
                }
              : 1 === t.length
              ? t[0]
              : t.reduce(function (e, t) {
                  return function () {
                    return e(t.apply(void 0, arguments));
                  };
                });
          }
          function x() {
            for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
              t[r] = arguments[r];
            return function (e) {
              return function () {
                var r = e.apply(void 0, arguments),
                  n = function () {
                    throw new Error(_(15));
                  },
                  a = {
                    getState: r.getState,
                    dispatch: function () {
                      return n.apply(void 0, arguments);
                    },
                  },
                  i = t.map(function (e) {
                    return e(a);
                  });
                return (
                  (n = b.apply(void 0, i)(r.dispatch)),
                  h(h({}, r), {}, { dispatch: n })
                );
              };
            };
          }
          function E(e) {
            return function (t) {
              var r = t.dispatch,
                n = t.getState;
              return function (t) {
                return function (a) {
                  return "function" == typeof a ? a(r, n, e) : t(a);
                };
              };
            };
          }
          var T = E();
          T.withExtraArgument = E;
          const S = T;
          var w = r(3196),
            R = r.n(w);
          function P(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function O(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? P(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : P(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var k = {
            url: null,
            state: "new",
            activeSpeakerId: null,
            statsPeerId: null,
            faceDetection: !1,
          };
          const C = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : k,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_URL":
                var r = t.payload.url;
                return O(O({}, e), {}, { url: r });
              case "SET_ROOM_STATE":
                var n = t.payload.state;
                return O(
                  O({}, e),
                  {},
                  "connected" === n
                    ? { state: n }
                    : { state: n, activeSpeakerId: null, statsPeerId: null }
                );
              case "SET_ROOM_ACTIVE_SPEAKER":
                var a = t.payload.peerId;
                return O(O({}, e), {}, { activeSpeakerId: a });
              case "SET_ROOM_STATS_PEER_ID":
                var i = t.payload.peerId;
                return e.statsPeerId === i
                  ? O(O({}, e), {}, { statsPeerId: null })
                  : O(O({}, e), {}, { statsPeerId: i });
              case "SET_FACE_DETECTION":
                var s = t.payload;
                return O(O({}, e), {}, { faceDetection: s });
              case "REMOVE_PEER":
                var o = t.payload.peerId,
                  c = O({}, e);
                return (
                  o && o === e.activeSpeakerId && (c.activeSpeakerId = null),
                  o && o === e.statsPeerId && (c.statsPeerId = null),
                  c
                );
              default:
                return e;
            }
          };
          function I(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function L(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? I(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : I(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var D = {
            id: null,
            displayName: null,
            displayNameSet: !1,
            device: null,
            canSendMic: !1,
            canSendWebcam: !1,
            canChangeWebcam: !1,
            webcamInProgress: !1,
            shareInProgress: !1,
            audioOnly: !1,
            audioOnlyInProgress: !1,
            audioMuted: !1,
            restartIceInProgress: !1,
          };
          const A = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : D,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                var r = t.payload.state;
                return "closed" === r
                  ? L(
                      L({}, e),
                      {},
                      {
                        webcamInProgress: !1,
                        shareInProgress: !1,
                        audioOnly: !1,
                        audioOnlyInProgress: !1,
                        audioMuted: !1,
                        restartIceInProgress: !1,
                      }
                    )
                  : e;
              case "SET_ME":
                var n = t.payload,
                  a = n.peerId,
                  i = n.displayName,
                  s = n.displayNameSet,
                  o = n.device;
                return L(
                  L({}, e),
                  {},
                  { id: a, displayName: i, displayNameSet: s, device: o }
                );
              case "SET_MEDIA_CAPABILITIES":
                var c = t.payload,
                  d = c.canSendMic,
                  u = c.canSendWebcam;
                return L(L({}, e), {}, { canSendMic: d, canSendWebcam: u });
              case "SET_CAN_CHANGE_WEBCAM":
                var l = t.payload;
                return L(L({}, e), {}, { canChangeWebcam: l });
              case "SET_WEBCAM_IN_PROGRESS":
                var p = t.payload.flag;
                return L(L({}, e), {}, { webcamInProgress: p });
              case "SET_SHARE_IN_PROGRESS":
                var h = t.payload.flag;
                return L(L({}, e), {}, { shareInProgress: h });
              case "SET_DISPLAY_NAME":
                var _ = t.payload.displayName;
                return (
                  _ || (_ = e.displayName),
                  L(L({}, e), {}, { displayName: _, displayNameSet: !0 })
                );
              case "SET_AUDIO_ONLY_STATE":
                var f = t.payload.enabled;
                return L(L({}, e), {}, { audioOnly: f });
              case "SET_AUDIO_ONLY_IN_PROGRESS":
                var m = t.payload.flag;
                return L(L({}, e), {}, { audioOnlyInProgress: m });
              case "SET_AUDIO_MUTED_STATE":
                var v = t.payload.enabled;
                return L(L({}, e), {}, { audioMuted: v });
              case "SET_RESTART_ICE_IN_PROGRESS":
                var g = t.payload.flag;
                return L(L({}, e), {}, { restartIceInProgress: g });
              default:
                return e;
            }
          };
          function M(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function N(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? M(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : M(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var j = {};
          const B = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : j,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                var r = t.payload.state;
                return "closed" === r ? {} : e;
              case "ADD_PRODUCER":
                var n = t.payload.producer;
                return N(N({}, e), {}, (0, o.Z)({}, n.id, n));
              case "REMOVE_PRODUCER":
                var a = t.payload.producerId,
                  i = N({}, e);
                return delete i[a], i;
              case "SET_PRODUCER_PAUSED":
                var s = t.payload.producerId,
                  c = e[s],
                  d = N(N({}, c), {}, { paused: !0 });
                return N(N({}, e), {}, (0, o.Z)({}, s, d));
              case "SET_PRODUCER_RESUMED":
                var u = t.payload.producerId,
                  l = e[u],
                  p = N(N({}, l), {}, { paused: !1 });
                return N(N({}, e), {}, (0, o.Z)({}, u, p));
              case "SET_PRODUCER_TRACK":
                var h = t.payload,
                  _ = h.producerId,
                  f = h.track,
                  m = e[_],
                  v = N(N({}, m), {}, { track: f });
                return N(N({}, e), {}, (0, o.Z)({}, _, v));
              case "SET_PRODUCER_SCORE":
                var g = t.payload,
                  y = g.producerId,
                  b = g.score,
                  x = e[y];
                if (!x) return e;
                var E = N(N({}, x), {}, { score: b });
                return N(N({}, e), {}, (0, o.Z)({}, y, E));
              default:
                return e;
            }
          };
          function U(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function F(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? U(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : U(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var G = {};
          const V = function () {
            var e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : G,
              t = arguments.length > 1 ? arguments[1] : void 0;
            switch (t.type) {
              case "SET_ROOM_STATE":
                var r = t.payload.state;
                return "closed" === r ? {} : e;
              case "ADD_DATA_PRODUCER":
                var n = t.payload.dataProducer;
                return F(F({}, e), {}, (0, o.Z)({}, n.id, n));
              case "REMOVE_DATA_PRODUCER":
                var a = t.payload.dataProducerId,
                  i = F({}, e);
                return delete i[a], i;
              default:
                return e;
            }
          };
          var Z = r(2982);
          function H(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function W(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? H(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : H(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var z = {};
          function K(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function X(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? K(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : K(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var q = {};
          function $(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function J(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? $(Object(r), !0).forEach(function (t) {
                    (0, o.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : $(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Y = {};
          var Q = [];
          const ee = (function (e) {
            for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) {
              var a = t[n];
              0, "function" == typeof e[a] && (r[a] = e[a]);
            }
            var i,
              s = Object.keys(r);
            try {
              !(function (e) {
                Object.keys(e).forEach(function (t) {
                  var r = e[t];
                  if (void 0 === r(void 0, { type: v.INIT }))
                    throw new Error(_(12));
                  if (void 0 === r(void 0, { type: v.PROBE_UNKNOWN_ACTION() }))
                    throw new Error(_(13));
                });
              })(r);
            } catch (e) {
              i = e;
            }
            return function (e, t) {
              if ((void 0 === e && (e = {}), i)) throw i;
              for (var n = !1, a = {}, o = 0; o < s.length; o++) {
                var c = s[o],
                  d = r[c],
                  u = e[c],
                  l = d(u, t);
                if (void 0 === l) {
                  t && t.type;
                  throw new Error(_(14));
                }
                (a[c] = l), (n = n || l !== u);
              }
              return (n = n || s.length !== Object.keys(e).length) ? a : e;
            };
          })({
            room: C,
            me: A,
            producers: B,
            dataProducers: V,
            peers: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : z,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "SET_ROOM_STATE":
                  var r = t.payload.state;
                  return "closed" === r ? {} : e;
                case "ADD_PEER":
                  var n = t.payload.peer;
                  return W(W({}, e), {}, (0, o.Z)({}, n.id, n));
                case "REMOVE_PEER":
                  var a = t.payload.peerId,
                    i = W({}, e);
                  return delete i[a], i;
                case "SET_PEER_DISPLAY_NAME":
                  var s = t.payload,
                    c = s.displayName,
                    d = s.peerId,
                    u = e[d];
                  if (!u) throw new Error("no Peer found");
                  var l = W(W({}, u), {}, { displayName: c });
                  return W(W({}, e), {}, (0, o.Z)({}, l.id, l));
                case "ADD_CONSUMER":
                  var p = t.payload,
                    h = p.consumer,
                    _ = p.peerId,
                    f = e[_];
                  if (!f) throw new Error("no Peer found for new Consumer");
                  var m = [].concat((0, Z.Z)(f.consumers), [h.id]),
                    v = W(W({}, f), {}, { consumers: m });
                  return W(W({}, e), {}, (0, o.Z)({}, v.id, v));
                case "REMOVE_CONSUMER":
                  var g = t.payload,
                    y = g.consumerId,
                    b = g.peerId,
                    x = e[b];
                  if (!x) return e;
                  var E = x.consumers.indexOf(y);
                  if (-1 === E) throw new Error("Consumer not found");
                  var T = x.consumers.slice();
                  T.splice(E, 1);
                  var S = W(W({}, x), {}, { consumers: T });
                  return W(W({}, e), {}, (0, o.Z)({}, S.id, S));
                case "ADD_DATA_CONSUMER":
                  var w = t.payload,
                    R = w.dataConsumer,
                    P = w.peerId;
                  if (!P) return e;
                  var O = e[P];
                  if (!O) throw new Error("no Peer found for new DataConsumer");
                  var k = [].concat((0, Z.Z)(O.dataConsumers), [R.id]),
                    C = W(W({}, O), {}, { dataConsumers: k });
                  return W(W({}, e), {}, (0, o.Z)({}, C.id, C));
                case "REMOVE_DATA_CONSUMER":
                  var I = t.payload,
                    L = I.dataConsumerId,
                    D = I.peerId;
                  if (!D) return e;
                  var A = e[D];
                  if (!A) return e;
                  var M = A.dataConsumers.indexOf(L);
                  if (-1 === M) throw new Error("DataConsumer not found");
                  var N = A.dataConsumers.slice();
                  N.splice(M, 1);
                  var j = W(W({}, A), {}, { dataConsumers: N });
                  return W(W({}, e), {}, (0, o.Z)({}, j.id, j));
                default:
                  return e;
              }
            },
            consumers: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : q,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "SET_ROOM_STATE":
                  var r = t.payload.state;
                  return "closed" === r ? {} : e;
                case "ADD_CONSUMER":
                  var n = t.payload.consumer;
                  return X(X({}, e), {}, (0, o.Z)({}, n.id, n));
                case "REMOVE_CONSUMER":
                  var a = t.payload.consumerId,
                    i = X({}, e);
                  return delete i[a], i;
                case "SET_CONSUMER_PAUSED":
                  var s,
                    c = t.payload,
                    d = c.consumerId,
                    u = c.originator,
                    l = e[d];
                  return (
                    (s = X(
                      X({}, l),
                      {},
                      "local" === u
                        ? { locallyPaused: !0 }
                        : { remotelyPaused: !0 }
                    )),
                    X(X({}, e), {}, (0, o.Z)({}, d, s))
                  );
                case "SET_CONSUMER_RESUMED":
                  var p,
                    h = t.payload,
                    _ = h.consumerId,
                    f = h.originator,
                    m = e[_];
                  return (
                    (p = X(
                      X({}, m),
                      {},
                      "local" === f
                        ? { locallyPaused: !1 }
                        : { remotelyPaused: !1 }
                    )),
                    X(X({}, e), {}, (0, o.Z)({}, _, p))
                  );
                case "SET_CONSUMER_CURRENT_LAYERS":
                  var v = t.payload,
                    g = v.consumerId,
                    y = v.spatialLayer,
                    b = v.temporalLayer,
                    x = e[g],
                    E = X(
                      X({}, x),
                      {},
                      { currentSpatialLayer: y, currentTemporalLayer: b }
                    );
                  return X(X({}, e), {}, (0, o.Z)({}, g, E));
                case "SET_CONSUMER_PREFERRED_LAYERS":
                  var T = t.payload,
                    S = T.consumerId,
                    w = T.spatialLayer,
                    R = T.temporalLayer,
                    P = e[S],
                    O = X(
                      X({}, P),
                      {},
                      { preferredSpatialLayer: w, preferredTemporalLayer: R }
                    );
                  return X(X({}, e), {}, (0, o.Z)({}, S, O));
                case "SET_CONSUMER_PRIORITY":
                  var k = t.payload,
                    C = k.consumerId,
                    I = k.priority,
                    L = e[C],
                    D = X(X({}, L), {}, { priority: I });
                  return X(X({}, e), {}, (0, o.Z)({}, C, D));
                case "SET_CONSUMER_TRACK":
                  var A = t.payload,
                    M = A.consumerId,
                    N = A.track,
                    j = e[M],
                    B = X(X({}, j), {}, { track: N });
                  return X(X({}, e), {}, (0, o.Z)({}, M, B));
                case "SET_CONSUMER_SCORE":
                  var U = t.payload,
                    F = U.consumerId,
                    G = U.score,
                    V = e[F];
                  if (!V) return e;
                  var Z = X(X({}, V), {}, { score: G });
                  return X(X({}, e), {}, (0, o.Z)({}, F, Z));
                default:
                  return e;
              }
            },
            dataConsumers: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : Y,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "SET_ROOM_STATE":
                  var r = t.payload.state;
                  return "closed" === r ? {} : e;
                case "ADD_DATA_CONSUMER":
                  var n = t.payload.dataConsumer;
                  return J(J({}, e), {}, (0, o.Z)({}, n.id, n));
                case "REMOVE_DATA_CONSUMER":
                  var a = t.payload.dataConsumerId,
                    i = J({}, e);
                  return delete i[a], i;
                default:
                  return e;
              }
            },
            notifications: function () {
              var e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : Q,
                t = arguments.length > 1 ? arguments[1] : void 0;
              switch (t.type) {
                case "ADD_NOTIFICATION":
                  var r = t.payload.notification;
                  return [].concat((0, Z.Z)(e), [r]);
                case "REMOVE_NOTIFICATION":
                  var n = t.payload.notificationId;
                  return e.filter(function (e) {
                    return e.id !== n;
                  });
                case "REMOVE_ALL_NOTIFICATIONS":
                  return [];
                default:
                  return e;
              }
            },
          });
          var te = r(1800);
          function re(e, t, r) {
            if (!t.has(e))
              throw new TypeError(
                "attempted to " + r + " private field on non-instance"
              );
            return t.get(e);
          }
          function ne(e, t) {
            return (function (e, t) {
              return t.get ? t.get.call(e) : t.value;
            })(e, re(e, t, "get"));
          }
          function ae(e, t, r) {
            return (
              (function (e, t, r) {
                if (t.set) t.set.call(e, r);
                else {
                  if (!t.writable)
                    throw new TypeError(
                      "attempted to set read only private field"
                    );
                  t.value = r;
                }
              })(e, re(e, t, "set"), r),
              r
            );
          }
          var ie = r(7187),
            se = r(885),
            oe =
              (r(1800).default,
              (0, s.Z)(function e() {
                (0, i.Z)(this, e), (this.roomClient = null);
              })),
            ce = new ((function () {
              function e() {
                (0, i.Z)(this, e), e.instance || (e.instance = new oe());
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "getInstance",
                    value: function () {
                      return e.instance;
                    },
                  },
                ]),
                e
              );
            })())();
          Object.freeze(ce);
          var de = ce.getInstance(),
            ue = (function () {
              function e(t) {
                (0, i.Z)(this, e),
                  (this.id = t.id),
                  (this.kind = t.track.kind),
                  (this.codec = t.codec),
                  (this.track = t.track),
                  (this.producerOrConsumer = t.instance),
                  t.appData &&
                    !0 === t.appData.share &&
                    "video" === t.track.kind &&
                    (this.kind = "share"),
                  t.appData &&
                    !0 === t.appData.share &&
                    "audio" === t.track.kind &&
                    (this.kind = "shareAudio");
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "pause",
                    value: function () {
                      de.roomClient._pauseConsumer(this.producerOrConsumer);
                    },
                  },
                  {
                    key: "resume",
                    value: function () {
                      de.roomClient._resumeConsumer(this.producerOrConsumer);
                    },
                  },
                  {
                    key: "paused",
                    get: function () {
                      return this.producerOrConsumer.paused;
                    },
                  },
                ]),
                e
              );
            })();
          function le(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return pe(e, t);
                  var r = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === r && e.constructor && (r = e.constructor.name);
                  if ("Map" === r || "Set" === r) return Array.from(e);
                  if (
                    "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  )
                    return pe(e, t);
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  a = function () {};
                return {
                  s: a,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: a,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              s = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (s = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  s || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function pe(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          var he = "stream-enabled",
            _e = "stream-disabled",
            fe = "media-status-changed",
            me = "video-quality-changed",
            ve = (function () {
              function e(t) {
                (0, i.Z)(this, e),
                  (this.id = t.id),
                  (this.displayName = t.displayName),
                  (this.streams = new Map()),
                  (this.quality = "low"),
                  (this.local = t.local || !1),
                  (this.pinState = { cam: !1, share: !1 }),
                  (this.webcamOn = !1),
                  (this.micOn = !1),
                  (this.mode = t.mode),
                  (this.metaData = t.metaData),
                  (this.eventEmitter = new ie.EventEmitter());
              }
              var t, r, a, o;
              return (
                (0, s.Z)(e, [
                  {
                    key: "_setPinState",
                    value: function (e) {
                      null != e.cam && (this.pinState.cam = e.cam),
                        null != e.share && (this.pinState.share = e.share);
                    },
                  },
                  {
                    key: "remove",
                    value: function () {
                      de.roomClient.removePeer(this.id);
                    },
                  },
                  {
                    key: "enableMic",
                    value: function () {
                      de.roomClient.enablePeerMic(this.id);
                    },
                  },
                  {
                    key: "disableMic",
                    value: function () {
                      de.roomClient.disablePeerMic(this.id);
                    },
                  },
                  {
                    key: "enableWebcam",
                    value: function () {
                      de.roomClient.enablePeerWebcam(this.id);
                    },
                  },
                  {
                    key: "disableWebcam",
                    value: function () {
                      de.roomClient.disablePeerWebcam(this.id);
                    },
                  },
                  {
                    key: "addStream",
                    value: function (e) {
                      this.streams.set(e.id, e),
                        "video" !== e.kind ||
                          this.local ||
                          de.roomClient.setConsumerQuality(e.id, this.quality),
                        this.eventEmitter.emit(he, e);
                    },
                  },
                  {
                    key: "updateStream",
                    value: function (e) {
                      this.streams.set(e.id, e), this.eventEmitter.emit(he, e);
                    },
                  },
                  {
                    key: "deleteStream",
                    value: function (e) {
                      var t = this.streams.get(e);
                      if (null != t)
                        return (
                          this.streams.delete(e),
                          this.eventEmitter.emit(_e, t),
                          t
                        );
                    },
                  },
                  {
                    key: "updateParticipantMediaState",
                    value: function (e, t) {
                      "audio" == e
                        ? (this.micOn = t)
                        : "video" == e && (this.webcamOn = t),
                        this.eventEmitter.emit(fe, {
                          peerId: this.id,
                          kind: e,
                          newStatus: t,
                        });
                    },
                  },
                  {
                    key: "videoQualityChanged",
                    value: function (e, t) {
                      this.eventEmitter.emit(me, {
                        peerId: this.id,
                        prevQuality: e,
                        currentQuality: t,
                      });
                    },
                  },
                  {
                    key: "setQuality",
                    value: function (e) {
                      this.quality === e ||
                        this.local ||
                        ((this.quality = e),
                        (0, Z.Z)(this.streams.entries()).forEach(function (t) {
                          var r = t[1];
                          "video" === r.kind &&
                            de.roomClient.setConsumerQuality(r.id, e);
                        }));
                    },
                  },
                  {
                    key: "setViewPort",
                    value: function (e, t) {
                      (0, Z.Z)(this.streams.entries()).forEach(function (r) {
                        var n = r[1];
                        "video" === n.kind &&
                          de.roomClient.setViewPort(n.producerOrConsumer, e, t);
                      });
                    },
                  },
                  {
                    key: "pin",
                    value: function (e) {
                      switch (e) {
                        case "SHARE_AND_CAM":
                        case void 0:
                          this._setPinState({ cam: !0, share: !0 });
                          break;
                        case "CAM":
                          this._setPinState({ cam: !0 });
                          break;
                        case "SHARE":
                          this._setPinState({ share: !0 });
                          break;
                        default:
                          throw new Error("Unknown pin type");
                      }
                      de.roomClient.pinStateChange({
                        peerId: this.id,
                        state: this.pinState,
                      });
                    },
                  },
                  {
                    key: "unpin",
                    value: function (e) {
                      switch (e) {
                        case "SHARE_AND_CAM":
                        case void 0:
                          this._setPinState({ cam: !1, share: !1 });
                          break;
                        case "CAM":
                          this._setPinState({ cam: !1 });
                          break;
                        case "SHARE":
                          this._setPinState({ share: !1 });
                          break;
                        default:
                          throw new Error("Unknown unpin type");
                      }
                      de.roomClient.pinStateChange({
                        peerId: this.id,
                        state: this.pinState,
                      });
                    },
                  },
                  {
                    key: "switchTo",
                    value:
                      ((o = (0, n.Z)(
                        d().mark(function e(t) {
                          var r, n, a;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.meetingId),
                                      (n = t.payload),
                                      (a = t.token),
                                      (e.next = 3),
                                      de.roomClient.switchPeerRoom({
                                        peerId: this.id,
                                        roomId: r,
                                        payload: n,
                                        token: a,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return o.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getVideoStats",
                    value:
                      ((a = (0, n.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this.local) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      (e.next = 3),
                                      de.roomClient.getVideoRemoteStats()
                                    );
                                  case 3:
                                    return e.abrupt("return", e.sent);
                                  case 6:
                                    (t = (0, Z.Z)(this.streams.entries())),
                                      (r = le(t)),
                                      (e.prev = 8),
                                      r.s();
                                  case 10:
                                    if ((n = r.n()).done) {
                                      e.next = 18;
                                      break;
                                    }
                                    if (
                                      ((a = (0, se.Z)(n.value, 2)),
                                      (i = a[0]),
                                      "video" != a[1].kind)
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (e.next = 15),
                                      de.roomClient.getConsumerRemoteStats(i)
                                    );
                                  case 15:
                                    return e.abrupt("return", e.sent);
                                  case 16:
                                    e.next = 10;
                                    break;
                                  case 18:
                                    e.next = 23;
                                    break;
                                  case 20:
                                    (e.prev = 20),
                                      (e.t0 = e.catch(8)),
                                      r.e(e.t0);
                                  case 23:
                                    return (e.prev = 23), r.f(), e.finish(23);
                                  case 26:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[8, 20, 23, 26]]
                          );
                        })
                      )),
                      function () {
                        return a.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getShareStats",
                    value:
                      ((r = (0, n.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this.local) {
                                      e.next = 6;
                                      break;
                                    }
                                    return (
                                      (e.next = 3),
                                      de.roomClient.getShareRemoteStats()
                                    );
                                  case 3:
                                    return e.abrupt("return", e.sent);
                                  case 6:
                                    (t = (0, Z.Z)(this.streams.entries())),
                                      (r = le(t)),
                                      (e.prev = 8),
                                      r.s();
                                  case 10:
                                    if ((n = r.n()).done) {
                                      e.next = 18;
                                      break;
                                    }
                                    if (
                                      ((a = (0, se.Z)(n.value, 2)),
                                      (i = a[0]),
                                      "share" != a[1].kind)
                                    ) {
                                      e.next = 16;
                                      break;
                                    }
                                    return (
                                      (e.next = 15),
                                      de.roomClient.getConsumerRemoteStats(i)
                                    );
                                  case 15:
                                    return e.abrupt("return", e.sent);
                                  case 16:
                                    e.next = 10;
                                    break;
                                  case 18:
                                    e.next = 23;
                                    break;
                                  case 20:
                                    (e.prev = 20),
                                      (e.t0 = e.catch(8)),
                                      r.e(e.t0);
                                  case 23:
                                    return (e.prev = 23), r.f(), e.finish(23);
                                  case 26:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[8, 20, 23, 26]]
                          );
                        })
                      )),
                      function () {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getAudioStats",
                    value:
                      ((t = (0, n.Z)(
                        d().mark(function e() {
                          var t, r, n, a, i;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (this.micOn) {
                                      e.next = 2;
                                      break;
                                    }
                                    return e.abrupt("return", []);
                                  case 2:
                                    if (!this.local) {
                                      e.next = 8;
                                      break;
                                    }
                                    return (
                                      (e.next = 5),
                                      de.roomClient.getAudioRemoteStats()
                                    );
                                  case 5:
                                    return e.abrupt("return", e.sent);
                                  case 8:
                                    (t = (0, Z.Z)(this.streams.entries())),
                                      (r = le(t)),
                                      (e.prev = 10),
                                      r.s();
                                  case 12:
                                    if ((n = r.n()).done) {
                                      e.next = 20;
                                      break;
                                    }
                                    if (
                                      ((a = (0, se.Z)(n.value, 2)),
                                      (i = a[0]),
                                      "audio" != a[1].kind)
                                    ) {
                                      e.next = 18;
                                      break;
                                    }
                                    return (
                                      (e.next = 17),
                                      de.roomClient.getConsumerRemoteStats(i)
                                    );
                                  case 17:
                                    return e.abrupt("return", e.sent);
                                  case 18:
                                    e.next = 12;
                                    break;
                                  case 20:
                                    e.next = 25;
                                    break;
                                  case 22:
                                    (e.prev = 22),
                                      (e.t0 = e.catch(10)),
                                      r.e(e.t0);
                                  case 25:
                                    return (e.prev = 25), r.f(), e.finish(25);
                                  case 28:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this,
                            [[10, 22, 25, 28]]
                          );
                        })
                      )),
                      function () {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "consumeMicStreams",
                    value: function () {
                      de.roomClient.consumeMicStreams(this.id);
                    },
                  },
                  {
                    key: "consumeWebcamStreams",
                    value: function () {
                      de.roomClient.consumeWebcamStreams(this.id);
                    },
                  },
                  {
                    key: "stopConsumingWebcamStreams",
                    value: function () {
                      de.roomClient.stopConsumingWebcamStreams(this.id);
                    },
                  },
                  {
                    key: "stopConsumingMicStreams",
                    value: function () {
                      de.roomClient.stopConsumingMicStreams(this.id);
                    },
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      switch (e) {
                        case he:
                        case _e:
                        case fe:
                        case me:
                          this.eventEmitter.on(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      switch (e) {
                        case he:
                        case _e:
                        case fe:
                        case me:
                          this.eventEmitter.off(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                ]),
                e
              );
            })();
          function ge(e, t, r) {
            !(function (e, t) {
              if (t.has(e))
                throw new TypeError(
                  "Cannot initialize the same private elements twice on an object"
                );
            })(e, t),
              t.set(e, r);
          }
          var ye = new WeakMap(),
            be = (function () {
              function e(t, r) {
                var n = t.id,
                  a = t.displayName;
                (0, i.Z)(this, e),
                  ge(this, ye, { writable: !0, value: void 0 }),
                  (this.id = n),
                  (this.displayName = a),
                  ae(this, ye, r);
              }
              var t;
              return (
                (0, s.Z)(e, [
                  {
                    key: "switchTo",
                    value:
                      ((t = (0, n.Z)(
                        d().mark(function e(t) {
                          var r, n, a;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.meetingId),
                                      (n = t.payload),
                                      (a = t.token),
                                      (e.next = 3),
                                      de.roomClient.connectionSwitchPeerRoom({
                                        roomId: r,
                                        connectionRoomId: ne(this, ye),
                                        payload: n,
                                        peerId: this.id,
                                        token: a,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                ]),
                e
              );
            })(),
            xe = "participant-joined",
            Ee = "participant-left",
            Te = "chat-message",
            Se = (function () {
              function e(t, r) {
                var n = this;
                (0, i.Z)(this, e),
                  (this.eventEmitter = new ie.EventEmitter()),
                  (this.id = t),
                  (this.participants = new Map()),
                  r.forEach(function (e) {
                    n.participants.set(e.id, new be(e, n.id));
                  });
              }
              var t;
              return (
                (0, s.Z)(e, [
                  {
                    key: "participantJoin",
                    value: function (e) {
                      var t = new be(e, this.id);
                      this.participants.set(e.id, t),
                        this.eventEmitter.emit(xe, t);
                    },
                  },
                  {
                    key: "participantLeft",
                    value: function (e) {
                      this.participants.delete(e),
                        this.eventEmitter.emit(Ee, e);
                    },
                  },
                  {
                    key: "sendChatMessage",
                    value: function (e) {
                      de.roomClient.connectionSendChatMessage({
                        roomId: this.id,
                        message: e,
                      });
                    },
                  },
                  {
                    key: "sendChatMessageEvent",
                    value: function (e) {
                      var t = e.participantId,
                        r = e.message;
                      this.eventEmitter.emit(Te, {
                        participantId: t,
                        message: r,
                      });
                    },
                  },
                  {
                    key: "end",
                    value:
                      ((t = (0, n.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2),
                                      de.roomClient.connectionEndMeeting({
                                        roomId: this.id,
                                      })
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      switch (e) {
                        case xe:
                        case Ee:
                        case Te:
                          this.eventEmitter.on(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      switch (e) {
                        case xe:
                        case Ee:
                        case Te:
                          this.eventEmitter.off(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                ]),
                e
              );
            })(),
            we = (function () {
              function e(t) {
                var r = t.roomId,
                  n = t.peers,
                  a = t.payload;
                (0, i.Z)(this, e),
                  (this.id = r),
                  (this.payload = a),
                  (this.meeting = new Se(r, n));
              }
              return (
                (0, s.Z)(e, [
                  {
                    key: "close",
                    value: function () {
                      de.roomClient.closeConnection(this.id);
                    },
                  },
                ]),
                e
              );
            })();
          function Re(e, t) {
            Pe(e, t), t.add(e);
          }
          function Pe(e, t) {
            if (t.has(e))
              throw new TypeError(
                "Cannot initialize the same private elements twice on an object"
              );
          }
          function Oe(e, t, r) {
            if (!t.has(e))
              throw new TypeError(
                "attempted to get private field on non-instance"
              );
            return r;
          }
          var ke = "error",
            Ce = "meeting-joined",
            Ie = "meeting-left",
            Le = "participant-mode-changed",
            De = "participant-joined",
            Ae = "participant-left",
            Me = "speaker-changed",
            Ne = "presenter-changed",
            je = "main-participant-changed",
            Be = "chat-message",
            Ue = "entry-requested",
            Fe = "entry-responded",
            Ge = "recording-state-changed",
            Ve = "recording-started",
            Ze = "recording-stopped",
            He = "livestream-state-changed",
            We = "livestream-started",
            ze = "livestream-stopped",
            Ke = "hls-state-changed",
            Xe = "hls-started",
            qe = "hls-stopped",
            $e = "whiteboard-started",
            Je = "whiteboard-stopped",
            Ye = "video-state-changed",
            Qe = "video-seeked",
            et = "mic-requested",
            tt = "webcam-requested",
            rt = "stream-enabled",
            nt = "stream-disabled",
            at = "pin-state-changed",
            it = "connection-open",
            st = "connection-close",
            ot = "switch-meeting",
            ct = "meeting-state-changed",
            dt = new WeakMap(),
            ut = new WeakSet(),
            lt = new WeakSet(),
            pt = (function () {
              function e(t, r, s) {
                var c,
                  u,
                  l,
                  p,
                  h,
                  _,
                  f = this;
                (0, i.Z)(this, e),
                  Re(this, lt),
                  Re(this, ut),
                  (l = { writable: !0, value: void 0 }),
                  Pe((c = this), (u = dt)),
                  u.set(c, l),
                  (0, o.Z)(this, "pubSub", {
                    publish:
                      ((_ = (0, n.Z)(
                        d().mark(function e(t, r, n, i) {
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (null == i) {
                                    e.next = 3;
                                    break;
                                  }
                                  if ("object" == (0, a.Z)(i)) {
                                    e.next = 3;
                                    break;
                                  }
                                  throw new Error(
                                    '"payload" can only be object.'
                                  );
                                case 3:
                                  return (
                                    (e.next = 5),
                                    f.roomClient.pubsubPublish(t, r, n, i)
                                  );
                                case 5:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t, r, n) {
                        return _.apply(this, arguments);
                      }),
                    subscribe:
                      ((h = (0, n.Z)(
                        d().mark(function e(t, r) {
                          var n;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (!ne(f, dt).listeners(t).includes(r)) {
                                    e.next = 2;
                                    break;
                                  }
                                  return e.abrupt("return");
                                case 2:
                                  return (
                                    (e.next = 4),
                                    f.roomClient.pubsubSubscribe(t)
                                  );
                                case 4:
                                  return (
                                    (n = e.sent),
                                    ne(f, dt).on(t, r),
                                    e.abrupt("return", n)
                                  );
                                case 7:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return h.apply(this, arguments);
                      }),
                    unsubscribe:
                      ((p = (0, n.Z)(
                        d().mark(function e(t, r) {
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    (ne(f, dt).off(t, r),
                                    0 != ne(f, dt).listeners(t).length)
                                  ) {
                                    e.next = 4;
                                    break;
                                  }
                                  return (
                                    (e.next = 4),
                                    f.roomClient.pubsubUnsubscribe(t)
                                  );
                                case 4:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e, t) {
                        return p.apply(this, arguments);
                      }),
                  }),
                  (this.id = t),
                  (this.roomClient = s),
                  (this.activeSpeakerId = null),
                  (this.activePresenterId = null),
                  (this.mainParticipantId = null),
                  (this.connections = new Map()),
                  (this.localParticipant = r),
                  (this.participants = new Map()),
                  (this.baseUrl = null),
                  (this.livestreamState = "LIVESTREAM_STOPPED"),
                  (this.recordingState = "RECORDING_STOPPED"),
                  (this.hlsState = "HLS_STOPPED"),
                  (this.hlsUrls = {
                    downstreamUrl: null,
                    playbackHlsUrl: null,
                    livestreamUrl: null,
                  }),
                  (this.messages = []),
                  (this.eventEmitter = new ie.EventEmitter()),
                  ae(this, dt, new ie.EventEmitter()),
                  this.eventEmitter.setMaxListeners(9999),
                  ne(this, dt).setMaxListeners(9999),
                  this.roomClient.on("ERROR", function (e) {
                    return f.handleError(e);
                  }),
                  this.roomClient.on("ADD_PEER", function (e) {
                    return f.handlePeerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_PEER", function (e) {
                    return f.handlePeerRemove(e);
                  }),
                  this.roomClient.on("ADD_PRODUCER", function (e) {
                    return f.handleProducerAdd(e);
                  }),
                  this.roomClient.on("UPDATE_PRODUCER", function (e) {
                    return f.handleUpdateProducer(e);
                  }),
                  this.roomClient.on("REMOVE_PRODUCER", function (e) {
                    return f.handleProducerRemove(e);
                  }),
                  this.roomClient.on("ADD_CONSUMER", function (e) {
                    return f.handleConsumerAdd(e);
                  }),
                  this.roomClient.on("REMOVE_CONSUMER", function (e) {
                    return f.handleConsumerRemove(e);
                  }),
                  this.roomClient.on(
                    "PARTICIPANT_MEDIA_STATE_CHANGED",
                    function (e) {
                      return f.handleParticipantMediaStateChanged(e);
                    }
                  ),
                  this.roomClient.on("CHAT_MESSAGE", function (e) {
                    return f.handleNewChatMessage(e);
                  }),
                  this.roomClient.on("SET_ROOM_ACTIVE_SPEAKER", function (e) {
                    return f.handleSpeakerChange(e);
                  }),
                  this.roomClient.on("ENTRY_REQUESTED", function (e) {
                    return f.handleEntryRequested(e);
                  }),
                  this.roomClient.on("ENTRY_RESPONDED", function (e) {
                    return f.handleEntryResponded(e);
                  }),
                  this.roomClient.on("MEETING_JOINED", function (e) {
                    return f.handleMeetingJoined(e);
                  }),
                  this.roomClient.on("MEETING_LEFT", function (e) {
                    return f.handleMeetingLeft(e);
                  }),
                  this.roomClient.on("RECORDING_STATE_CHANGED", function (e) {
                    f.handleRecordingStateChanged(e);
                  }),
                  this.roomClient.on("RECORDING_STARTED", function (e) {
                    return f.handleRecordingStarted(e);
                  }),
                  this.roomClient.on("RECORDING_STOPPED", function (e) {
                    return f.handleRecordingStopped(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STATE_CHANGED", function (e) {
                    f.handleLivestreamStateChanged(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STARTED", function (e) {
                    return f.handleLivestreamStarted(e);
                  }),
                  this.roomClient.on("LIVESTREAM_STOPPED", function (e) {
                    return f.handleLivestreamStopped(e);
                  }),
                  this.roomClient.on("HLS_STATE_CHANGED", function (e) {
                    f.handleHlsStateChanged(e);
                  }),
                  this.roomClient.on("HLS_STARTED", function (e) {
                    f.handleHlsStarted(e);
                  }),
                  this.roomClient.on("HLS_STOPPED", function (e) {
                    f.handleHlsStopped(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STARTED", function (e) {
                    return f.handleWhiteboardStarted(e);
                  }),
                  this.roomClient.on("WHITEBOARD_STOPPED", function (e) {
                    return f.handleWhiteboardStopped(e);
                  }),
                  this.roomClient.on("VIDEO_STATE_CHANGED", function (e) {
                    return f.handleVideoStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_SEEKED", function (e) {
                    return f.handleVideoSeeked(e);
                  }),
                  this.roomClient.on("PIN_STATE_CHANGED", function (e) {
                    f.handlePinStateChanged(e);
                  }),
                  this.roomClient.on("MIC_REQUESTED", function (e) {
                    return f.handleMicRequested(e);
                  }),
                  this.roomClient.on("WEBCAM_REQUESTED", function (e) {
                    return f.handleWebcamRequested(e);
                  }),
                  this.roomClient.on("CONNECTION_OPEN", function (e) {
                    return f.handleConnectionOpen(e);
                  }),
                  this.roomClient.on("CONNECTION_CLOSE", function (e) {
                    return f.handleConnectionClose(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_JOIN",
                    function (e) {
                      return f.handleConnectionParticipantJoin(e);
                    }
                  ),
                  this.roomClient.on("SWITCH_ROOM", function (e) {
                    return f.handleSwitchMeeting(e);
                  }),
                  this.roomClient.on("CONNECTION_CHAT_MESSAGE", function (e) {
                    return f.handleConnectionChatMessage(e);
                  }),
                  this.roomClient.on(
                    "CONNECTION_PARTICIPANT_LEFT",
                    function (e) {
                      f.handleConnectionParticipantLeft(e);
                    }
                  ),
                  this.roomClient.on("PUBSUB_MESSAGE", function (e) {
                    return Oe(f, ut, ht).call(f, e);
                  }),
                  this.roomClient.on("PEER_MODE_CHANGED", function (e) {
                    return Oe(f, lt, _t).call(f, e);
                  }),
                  this.updateMainParticipant(this.localParticipant.id),
                  this.roomClient.on("MEETING_STATE_CHANGED", function (e) {
                    return f.handleMeetingStateChanged(e);
                  }),
                  this.roomClient.on("VIDEO_QUALITY_CHANGED", function (e) {
                    return f.handleVideoQualityChanged(e);
                  });
              }
              var t, r, c, u, l, p, h, _;
              return (
                (0, s.Z)(e, [
                  {
                    key: "handleError",
                    value: function (e) {
                      this.eventEmitter.emit(ke, e);
                    },
                  },
                  {
                    key: "join",
                    value: function () {
                      this.roomClient.join();
                    },
                  },
                  {
                    key: "changeMode",
                    value: function (e) {
                      this.roomClient.changeMode(e);
                    },
                  },
                  {
                    key: "leave",
                    value: function () {
                      this.roomClient.close({ sendLeft: !0 });
                    },
                  },
                  {
                    key: "end",
                    value: function () {
                      this.roomClient.closeRoom();
                    },
                  },
                  {
                    key: "respondEntry",
                    value: function (e, t) {
                      this.roomClient.respondEntry(e, t);
                    },
                  },
                  {
                    key: "pinnedParticipants",
                    get: function () {
                      return this.roomClient._pinnedParticipants;
                    },
                  },
                  {
                    key: "muteMic",
                    value: function () {
                      this.roomClient.disableMic();
                    },
                  },
                  {
                    key: "unmuteMic",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableMic(e);
                    },
                  },
                  {
                    key: "publishAudio",
                    value:
                      ((_ = (0, n.Z)(
                        d().mark(function e() {
                          var t,
                            r = arguments;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t =
                                        r.length > 0 && void 0 !== r[0]
                                          ? r[0]
                                          : void 0),
                                      (e.next = 3),
                                      this.roomClient.enableMic(t)
                                    );
                                  case 3:
                                    return e.abrupt("return");
                                  case 4:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return _.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unpublishAudio",
                    value:
                      ((h = (0, n.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.disableMic()
                                    );
                                  case 2:
                                    return e.abrupt("return");
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return h.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableWebcam",
                    value: function () {
                      this.roomClient.disableWebcam();
                    },
                  },
                  {
                    key: "enableWebcam",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableWebcam(e);
                    },
                  },
                  {
                    key: "publishVideo",
                    value:
                      ((p = (0, n.Z)(
                        d().mark(function e() {
                          var t,
                            r = arguments;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (t =
                                        r.length > 0 && void 0 !== r[0]
                                          ? r[0]
                                          : void 0),
                                      this.roomClient.enableWebcam(t),
                                      e.abrupt("return")
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return p.apply(this, arguments);
                      }),
                  },
                  {
                    key: "unpublishVideo",
                    value:
                      ((l = (0, n.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      this.roomClient.disableWebcam(),
                                      e.abrupt("return")
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return l.apply(this, arguments);
                      }),
                  },
                  {
                    key: "disableScreenShare",
                    value: function () {
                      this.roomClient.disableShare();
                    },
                  },
                  {
                    key: "enableScreenShare",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableShare(e);
                    },
                  },
                  {
                    key: "pubblishScreenShare",
                    value: function () {
                      var e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : void 0;
                      this.roomClient.enableShare(e);
                    },
                  },
                  {
                    key: "unpublishScreenShare",
                    value: function () {
                      this.roomClient.disableShare();
                    },
                  },
                  {
                    key: "sendChatMessage",
                    value: function (e) {
                      this.roomClient.sendChatMessage(e);
                      var t = {
                        text: e,
                        timestamp: new Date().getTime(),
                        senderId: this.localParticipant.id,
                        senderName: this.localParticipant.displayName,
                      };
                      this.handleNewChatMessage(t);
                    },
                  },
                  {
                    key: "startRecording",
                    value: function (e, t, r) {
                      this.roomClient.startRecording(e, t, r);
                    },
                  },
                  {
                    key: "stopRecording",
                    value: function () {
                      this.roomClient.stopRecording();
                    },
                  },
                  {
                    key: "startLivestream",
                    value: function (e, t) {
                      this.roomClient.startLivestream(e, t);
                    },
                  },
                  {
                    key: "stopLivestream",
                    value: function () {
                      this.roomClient.stopLivestream();
                    },
                  },
                  {
                    key: "startHls",
                    value:
                      ((u = (0, n.Z)(
                        d().mark(function e(t) {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.startHls(t)
                                    );
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return u.apply(this, arguments);
                      }),
                  },
                  {
                    key: "stopHls",
                    value: function () {
                      this.roomClient.stopHls();
                    },
                  },
                  {
                    key: "getMics",
                    value:
                      ((c = (0, n.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.getMics()
                                    );
                                  case 2:
                                    return e.abrupt("return", e.sent);
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return c.apply(this, arguments);
                      }),
                  },
                  {
                    key: "getWebcams",
                    value:
                      ((r = (0, n.Z)(
                        d().mark(function e() {
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (e.next = 2), this.roomClient.getWebcams()
                                    );
                                  case 2:
                                    return e.abrupt("return", e.sent);
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "changeMic",
                    value: function (e) {
                      this.roomClient.changeMic(e);
                    },
                  },
                  {
                    key: "changeWebcam",
                    value: function (e) {
                      this.roomClient.changeWebcam(e);
                    },
                  },
                  {
                    key: "replaceWebcamStream",
                    value: function (e) {
                      this.roomClient.replaceWebcamStream(e);
                    },
                  },
                  {
                    key: "setWebcamQuality",
                    value: function (e) {
                      this.roomClient.setWebcamQuality(e);
                    },
                  },
                  {
                    key: "startWhiteboard",
                    value: function () {
                      this.roomClient.startWhiteboard();
                    },
                  },
                  {
                    key: "stopWhiteboard",
                    value: function () {
                      this.roomClient.stopWhiteboard();
                    },
                  },
                  {
                    key: "startVideo",
                    value: function (e) {
                      var t = e.link;
                      this.roomClient.startVideo({ link: t });
                    },
                  },
                  {
                    key: "stopVideo",
                    value: function () {
                      this.roomClient.stopVideo();
                    },
                  },
                  {
                    key: "resumeVideo",
                    value: function () {
                      this.roomClient.resumeVideo();
                    },
                  },
                  {
                    key: "refreshConnection",
                    value: function () {
                      this.roomClient.restartIce();
                    },
                  },
                  {
                    key: "pauseVideo",
                    value: function (e) {
                      var t = e.currentTime;
                      this.roomClient.pauseVideo(t);
                    },
                  },
                  {
                    key: "seekVideo",
                    value: function (e) {
                      var t = e.currentTime;
                      this.roomClient.seekVideo(t);
                    },
                  },
                  {
                    key: "handlePeerAdd",
                    value: function (e) {
                      var t = e.peer,
                        r = new ve(t);
                      this.participants.set(r.id, r),
                        this.eventEmitter.emit(De, r),
                        1 === this.participants.size &&
                          this.updateMainParticipant(r.id);
                    },
                  },
                  {
                    key: "handlePeerRemove",
                    value: function (e) {
                      var t = e.peerId,
                        r = this.participants.get(t);
                      null != r &&
                        (this.participants.delete(t),
                        this.eventEmitter.emit(Ae, r),
                        this.activePresenterId === r.id &&
                          ((this.activePresenterId = null),
                          this.eventEmitter.emit(Ne, this.activePresenterId)),
                        this.mainParticipantId === r.id &&
                          (this.participants.size > 0
                            ? this.updateMainParticipant(
                                this.participants.entries().next().value[1].id
                              )
                            : this.updateMainParticipant(
                                this.localParticipant.id
                              )));
                    },
                  },
                  {
                    key: "handleProducerAdd",
                    value: function (e) {
                      var t = e.producer,
                        r = new ue(t);
                      this.localParticipant.addStream(r),
                        "share" === r.kind &&
                          ((this.activePresenterId = this.localParticipant.id),
                          this.eventEmitter.emit(Ne, this.activePresenterId),
                          this.updateMainParticipant(this.localParticipant.id));
                    },
                  },
                  {
                    key: "handleUpdateProducer",
                    value: function (e) {
                      var t = e.producer,
                        r = new ue(t);
                      this.localParticipant.updateStream(r);
                    },
                  },
                  {
                    key: "handleProducerRemove",
                    value: function (e) {
                      var t = e.producerId,
                        r = this.localParticipant.deleteStream(t);
                      if (r && "share" === r.kind) {
                        (this.activePresenterId = null),
                          this.eventEmitter.emit(Ne, this.activePresenterId);
                        var n =
                          this.participants.size > 0
                            ? this.participants.entries().next().value[1].id
                            : null;
                        this.updateMainParticipant(
                          this.activeSpeakerId || n || this.localParticipant.id
                        );
                      }
                    },
                  },
                  {
                    key: "handleConsumerAdd",
                    value: function (e) {
                      var t = e.consumer,
                        r = e.peerId,
                        n = this.participants.get(r);
                      if (n) {
                        var a = new ue(t);
                        n.addStream(a),
                          this.eventEmitter.emit(rt, a),
                          "share" === a.kind &&
                            ((this.activePresenterId = n.id),
                            this.eventEmitter.emit(Ne, this.activePresenterId),
                            this.updateMainParticipant(n.id));
                      }
                    },
                  },
                  {
                    key: "handleConsumerRemove",
                    value: function (e) {
                      var t = e.consumerId,
                        r = e.peerId,
                        n = this.participants.get(r);
                      if (null != n && n) {
                        var a = n.deleteStream(t);
                        if (
                          (this.eventEmitter.emit(nt, a),
                          a && "share" === a.kind)
                        ) {
                          (this.activePresenterId = null),
                            this.eventEmitter.emit(Ne, this.activePresenterId);
                          var i =
                            this.participants.size > 0
                              ? this.participants.entries().next().value[1].id
                              : null;
                          this.updateMainParticipant(
                            this.activeSpeakerId ||
                              i ||
                              this.localParticipant.id
                          );
                        }
                      }
                    },
                  },
                  {
                    key: "handleParticipantMediaStateChanged",
                    value: function (e) {
                      var t = e.peerId,
                        r = e.kind,
                        n = e.newState,
                        a = this.participants.get(t);
                      a &&
                        a &&
                        ("audio" == r
                          ? (a.micOn = n)
                          : "video" == r && (a.webcamOn = n),
                        a.updateParticipantMediaState(r, n));
                    },
                  },
                  {
                    key: "handleSpeakerChange",
                    value: function (e) {
                      var t = e.peerId;
                      this.activeSpeakerId !== t &&
                        ((this.activeSpeakerId = t),
                        this.eventEmitter.emit(Me, t),
                        t &&
                          t !== this.localParticipant.id &&
                          this.activePresenterId !== this.mainParticipantId &&
                          t !== this.mainParticipantId &&
                          this.updateMainParticipant(t));
                    },
                  },
                  {
                    key: "handleNewChatMessage",
                    value: function (e) {
                      var t = e.senderId,
                        r = {
                          senderId: t,
                          text: e.text,
                          timestamp: e.timestamp,
                        };
                      if (this.localParticipant.id === t)
                        r.senderName = this.localParticipant.displayName;
                      else {
                        var n = this.participants.get(t);
                        n && (r.senderName = n.displayName);
                      }
                      this.messages.push(r), this.eventEmitter.emit(Be, r);
                    },
                  },
                  {
                    key: "updateMainParticipant",
                    value: function (e) {
                      this.mainParticipantId = e;
                      var t = null;
                      (t =
                        e === this.localParticipant.id
                          ? this.localParticipant
                          : this.participants.get(this.mainParticipantId)),
                        this.eventEmitter.emit(je, t);
                    },
                  },
                  {
                    key: "handleEntryRequested",
                    value: function (e) {
                      var t = this,
                        r = e.id,
                        n = e.name;
                      this.eventEmitter.emit(Ue, {
                        participantId: r,
                        name: n,
                        allow: function () {
                          t.roomClient.respondEntry(r, "allowed");
                        },
                        deny: function () {
                          t.roomClient.respondEntry(r, "denied");
                        },
                      });
                    },
                  },
                  {
                    key: "handleEntryResponded",
                    value: function (e) {
                      var t = e.id,
                        r = e.decision;
                      this.eventEmitter.emit(Fe, t, r);
                    },
                  },
                  {
                    key: "handleMeetingJoined",
                    value: function (e) {
                      var t = e.peers,
                        r = e.poll,
                        n = e.messages,
                        a = e.baseUrl;
                      (this.baseUrl = a),
                        n.length > 0 && (this.messages = n),
                        this.eventEmitter.emit(Ce, {
                          peers: t,
                          poll: r,
                          messages: n,
                        });
                    },
                  },
                  {
                    key: "handleMeetingLeft",
                    value: function (e) {
                      this.eventEmitter.emit(Ie, e);
                    },
                  },
                  {
                    key: "handleRecordingStateChanged",
                    value: function (e) {
                      (this.recordingState = e.status),
                        this.eventEmitter.emit(Ge, e);
                    },
                  },
                  {
                    key: "handleLivestreamStateChanged",
                    value: function (e) {
                      (this.livestreamState = e.status),
                        this.eventEmitter.emit(He, e);
                    },
                  },
                  {
                    key: "handleHlsStateChanged",
                    value: function (e) {
                      (this.hlsState = e.status),
                        "HLS_PLAYABLE" == e.status
                          ? (this.hlsUrls = {
                              downstreamUrl: e.downstreamUrl,
                              playbackHlsUrl: e.playbackHlsUrl,
                              livestreamUrl: e.livestreamUrl,
                            })
                          : "HLS_STOPPED" == e.status &&
                            (this.hlsUrls = {
                              downstreamUrl: null,
                              playbackHlsUrl: null,
                              livestreamUrl: null,
                            }),
                        this.eventEmitter.emit(Ke, e);
                    },
                  },
                  {
                    key: "handleRecordingStarted",
                    value: function () {
                      this.eventEmitter.emit(Ve);
                    },
                  },
                  {
                    key: "handleRecordingStopped",
                    value: function () {
                      this.eventEmitter.emit(Ze);
                    },
                  },
                  {
                    key: "handleLivestreamStarted",
                    value: function () {
                      this.eventEmitter.emit(We);
                    },
                  },
                  {
                    key: "handleLivestreamStopped",
                    value: function () {
                      this.eventEmitter.emit(ze);
                    },
                  },
                  {
                    key: "handleHlsStarted",
                    value: function (e) {
                      this.eventEmitter.emit(Xe, e);
                    },
                  },
                  {
                    key: "handleHlsStopped",
                    value: function () {
                      this.eventEmitter.emit(qe);
                    },
                  },
                  {
                    key: "handleWhiteboardStarted",
                    value: function (e) {
                      var t = e.state;
                      this.eventEmitter.emit($e, t);
                    },
                  },
                  {
                    key: "handleWhiteboardStopped",
                    value: function (e) {
                      !(function (e) {
                        if (null == e)
                          throw new TypeError("Cannot destructure undefined");
                      })(e),
                        this.eventEmitter.emit(Je);
                    },
                  },
                  {
                    key: "handleVideoStateChanged",
                    value: function (e) {
                      this.eventEmitter.emit(Ye, e);
                    },
                  },
                  {
                    key: "handleVideoSeeked",
                    value: function (e) {
                      var t = e.currentTime;
                      this.eventEmitter.emit(Qe, { currentTime: t });
                    },
                  },
                  {
                    key: "handlePinStateChanged",
                    value: function (e) {
                      var t = e.peerId,
                        r = e.state,
                        n = e.pinnedBy;
                      this.eventEmitter.emit(at, {
                        participantId: t,
                        state: r,
                        pinnedBy: n,
                      });
                    },
                  },
                  {
                    key: "handleMeetingStateChanged",
                    value: function (e) {
                      var t = e.state;
                      this.eventEmitter.emit(ct, { state: t });
                    },
                  },
                  {
                    key: "handleVideoQualityChanged",
                    value: function (e) {
                      var t = e.peerId,
                        r = e.prevQuality,
                        n = e.currentQuality,
                        a = this.participants.get(t);
                      a && a && a.videoQualityChanged(r, n);
                    },
                  },
                  {
                    key: "handleMicRequested",
                    value: function (e) {
                      var t = this,
                        r = e.peerId;
                      this.eventEmitter.emit(et, {
                        participantId: r,
                        accept: function () {
                          return t.unmuteMic();
                        },
                        reject: function () {},
                      });
                    },
                  },
                  {
                    key: "handleWebcamRequested",
                    value: function (e) {
                      var t = this,
                        r = e.peerId;
                      this.eventEmitter.emit(tt, {
                        participantId: r,
                        accept: function () {
                          return t.enableWebcam();
                        },
                        reject: function () {},
                      });
                    },
                  },
                  {
                    key: "handleConnectionParticipantJoin",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.peer,
                        n = this.connections.get(t);
                      null != n && n.meeting.participantJoin(r);
                    },
                  },
                  {
                    key: "handleConnectionParticipantLeft",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.peerId,
                        n = this.connections.get(t);
                      null != n && n.meeting.participantLeft(r);
                    },
                  },
                  {
                    key: "handleConnectionOpen",
                    value: function (e) {
                      var t = e.peers,
                        r = e.roomId,
                        n = e.payload,
                        a = new we({ roomId: r, peers: t, payload: n });
                      this.connections.set(a.id, a),
                        this.eventEmitter.emit(it, a);
                    },
                  },
                  {
                    key: "handleConnectionClose",
                    value: function (e) {
                      var t = e.roomId;
                      null != this.connections.get(t) &&
                        (this.connections.delete(t),
                        this.eventEmitter.emit(st, t));
                    },
                  },
                  {
                    key: "handleSwitchMeeting",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.token,
                        n = e.payload,
                        a = e.peerId,
                        i = e.connectionPeerId,
                        s = e.connectionRoomId,
                        o = a
                          ? {
                              meetingId: t,
                              payload: n,
                              token: r,
                              participantId: a,
                            }
                          : {
                              meetingId: t,
                              payload: n,
                              token: r,
                              connectionParticipantId: i,
                              connectionMeetingId: s,
                            };
                      this.eventEmitter.emit(ot, o);
                    },
                  },
                  {
                    key: "handleConnectionChatMessage",
                    value: function (e) {
                      var t = e.roomId,
                        r = e.peerId,
                        n = e.message,
                        a = this.connections.get(t);
                      null != a &&
                        a.meeting.sendChatMessageEvent({
                          participantId: r,
                          message: n,
                        });
                    },
                  },
                  {
                    key: "connectTo",
                    value:
                      ((t = (0, n.Z)(
                        d().mark(function e(t) {
                          var r, n;
                          return d().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    return (
                                      (r = t.meetingId),
                                      (n = t.payload),
                                      (e.next = 3),
                                      this.roomClient.openConnection({
                                        roomId: r,
                                        payload: n,
                                      })
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                  {
                    key: "on",
                    value: function (e, t) {
                      switch (e) {
                        case De:
                        case Ae:
                        case Me:
                        case Ne:
                        case je:
                        case Be:
                        case Ue:
                        case Fe:
                        case Ge:
                        case Ve:
                        case Ze:
                        case He:
                        case We:
                        case ze:
                        case Xe:
                        case qe:
                        case Ke:
                        case rt:
                        case nt:
                        case $e:
                        case Je:
                        case Ce:
                        case Ie:
                        case Ye:
                        case Qe:
                        case et:
                        case tt:
                        case at:
                        case it:
                        case st:
                        case ot:
                        case ct:
                        case Le:
                        case ke:
                          this.eventEmitter.on(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                  {
                    key: "off",
                    value: function (e, t) {
                      switch (e) {
                        case De:
                        case Ae:
                        case Me:
                        case Ne:
                        case je:
                        case Be:
                        case Ue:
                        case Fe:
                        case Ge:
                        case Ve:
                        case Ze:
                        case He:
                        case We:
                        case ze:
                        case Ke:
                        case Xe:
                        case qe:
                        case rt:
                        case nt:
                        case $e:
                        case Je:
                        case Ce:
                        case Ie:
                        case Ye:
                        case Qe:
                        case et:
                        case tt:
                        case at:
                        case it:
                        case st:
                        case ot:
                        case ct:
                        case ke:
                        case Le:
                          this.eventEmitter.off(e, t);
                          break;
                        default:
                          throw new Error("Invalid event type");
                      }
                    },
                  },
                ]),
                e
              );
            })();
          function ht(e) {
            var t = e.topic,
              r = e.message,
              n = e.senderId,
              a = e.timestamp,
              i = e.senderName,
              s = e.id,
              o = e.payload;
            t &&
              r &&
              ne(this, dt).emit(t, {
                message: r,
                senderId: n,
                timestamp: a,
                topic: t,
                senderName: i,
                id: s,
                payload: o,
              });
          }
          function _t(e) {
            var t = e.peerId,
              r = e.mode;
            t === this.localParticipant.id
              ? (this.localParticipant.mode = r)
              : (this.participants.get(t).mode = r),
              this.eventEmitter.emit(Le, { participantId: t, mode: r });
          }
          var ft = r(6900),
            mt = r(6380),
            vt = r(3430),
            gt = r(8962),
            yt = (function () {
              var e = (0, n.Z)(
                d().mark(function e(t) {
                  return d().wrap(function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            void 0 === navigator.mediaDevices &&
                              (navigator.mediaDevices = {}),
                            void 0 === navigator.mediaDevices.getUserMedia &&
                              (navigator.mediaDevices.getUserMedia = function (
                                e
                              ) {
                                var t =
                                  navigator.webkitGetUserMedia ||
                                  navigator.mozGetUserMedia;
                                return t
                                  ? new Promise(function (r, n) {
                                      t.call(navigator, e, r, n);
                                    })
                                  : Promise.reject(
                                      new Error(
                                        "getUserMedia is not implemented in this browser"
                                      )
                                    );
                              }),
                            (e.next = 4),
                            navigator.mediaDevices.getUserMedia(t)
                          );
                        case 4:
                          return e.abrupt("return", e.sent);
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  }, e);
                })
              );
              return function (t) {
                return e.apply(this, arguments);
              };
            })(),
            bt = (function () {
              var e = (0, n.Z)(
                d().mark(function e(t) {
                  return d().wrap(function (e) {
                    for (;;)
                      switch ((e.prev = e.next)) {
                        case 0:
                          return (
                            void 0 === navigator.mediaDevices &&
                              (navigator.mediaDevices = {}),
                            void 0 === navigator.mediaDevices.getDisplayMedia &&
                              (navigator.mediaDevices.getDisplayMedia =
                                function (e) {
                                  var t =
                                    navigator.webkitGetDisplayMedia ||
                                    navigator.mozGetDisplayMedia;
                                  return t
                                    ? new Promise(function (r, n) {
                                        t.call(navigator, e, r, n);
                                      })
                                    : Promise.reject(
                                        new Error(
                                          "getDisplayMedia is not implemented in this browser"
                                        )
                                      );
                                }),
                            (e.next = 4),
                            navigator.mediaDevices.getDisplayMedia(t)
                          );
                        case 4:
                          return e.abrupt("return", e.sent);
                        case 5:
                        case "end":
                          return e.stop();
                      }
                  }, e);
                })
              );
              return function (t) {
                return e.apply(this, arguments);
              };
            })();
          var xt = [S],
            Et = (function () {
              function e() {
                (0, i.Z)(this, e);
              }
              var t, r, o;
              return (
                (0, s.Z)(e, null, [
                  {
                    key: "config",
                    value: function (e) {
                      if (!e)
                        throw new Error(
                          "'token' is empty, please provide it in config"
                        );
                      this.apiKey = e;
                      var t = y(ee, void 0, x.apply(void 0, xt));
                      (window.STORE = t), te.default.init({ store: t });
                    },
                  },
                  {
                    key: "analytics",
                    value: function (e) {
                      var t, r, n, a;
                      !e &&
                        navigator &&
                        navigator.userAgent &&
                        ((n = navigator.userAgent),
                        delete (a = l().parse(n)).engine);
                      try {
                        var i;
                        (null !== (i = e) &&
                          void 0 !== i &&
                          i.browserUserAgent) ||
                          ((n = navigator.userAgent),
                          delete (a = l().parse(n)).engine);
                      } catch (e) {}
                      e &&
                        e.rawUserAgent &&
                        ((n = e.rawUserAgent),
                        delete (a = l().parse(n)).engine),
                        e || (e = {});
                      var s = {};
                      (s.sdkType = e.sdkType || "javascript"),
                        (s.sdkVersion = e.sdkVersion || "0.0.74"),
                        (s.platform =
                          e.platform ||
                          (null === (t = a) ||
                          void 0 === t ||
                          null === (r = t.platform) ||
                          void 0 === r
                            ? void 0
                            : r.type) ||
                          ""),
                        "null" == e.browserUserAgent
                          ? (s.browserUserAgent = void 0)
                          : (s.browserUserAgent = a),
                        e.deviceUserAgent &&
                          (s.deviceUserAgent = e.deviceUserAgent),
                        (this._deviceInfo = s);
                    },
                  },
                  {
                    key: "initMeeting",
                    value: function (e) {
                      var t,
                        r = e.meetingId,
                        n = e.customCameraVideoTrack,
                        i = void 0 === n ? void 0 : n,
                        s = e.customMicrophoneAudioTrack,
                        o = void 0 === s ? void 0 : s,
                        c = e.autoConsume,
                        d = void 0 === c || c,
                        u = e.preferredProtocol,
                        l = e.mode,
                        p = e.multiStream,
                        h = void 0 === p || p,
                        _ = e.participantId,
                        f = e.name,
                        m = e.micEnabled,
                        v = e.webcamEnabled,
                        g = e.maxResolution,
                        y = e.metaData,
                        b = e.chatEnabled,
                        x = e.useSpartialLayerAnalytics,
                        E = e.signalingBaseUrl;
                      if (!r)
                        throw new Error(
                          "'meetingId' is empty, please verify it or generate new meetingId using the API."
                        );
                      var T = _
                          ? _.toString()
                          : R()({ length: 8 }).toLowerCase(),
                        S = f || R()({ length: 6 }).toLowerCase();
                      switch (
                        (this._deviceInfo || this.analytics(),
                        "string" != typeof u && (u = "UDP_ONLY"),
                        null === (t = u) || void 0 === t
                          ? void 0
                          : t.toUpperCase())
                      ) {
                        case "UDP_ONLY":
                        case "UDP_OVER_TCP":
                          u = u.toUpperCase();
                          break;
                        default:
                          u = "UDP_ONLY";
                      }
                      if (
                        (l || (l = vt.S.CONFERENCE),
                        l !== vt.S.CONFERENCE && l !== vt.S.VIEWER)
                      )
                        throw new Error(
                          '"mode" can only be either '
                            .concat(vt.S.CONFERENCE, " or ")
                            .concat(vt.S.VIEWER)
                        );
                      if (null != y && "object" != (0, a.Z)(y))
                        throw new Error('"metaData" can only be object.');
                      var w = new te.default({
                        roomId: r,
                        peerId: T,
                        secret: this.apiKey,
                        device: "unknown",
                        displayName: S,
                        mode: l,
                        useSimulcast: h,
                        produce: !0,
                        consume: !0,
                        useSharingSimulcast: !0,
                        datachannel: !1 !== b,
                        micEnabled: !1 !== m,
                        webcamEnabled: !1 !== v,
                        maxResolution: g || "hd",
                        useSpartialLayerAnalytics: x,
                        _deviceInfo: this._deviceInfo,
                        customCameraVideoTrack: i,
                        customMicrophoneAudioTrack: o,
                        autoConsume: d,
                        preferredProtocol: u,
                        signalingBaseUrl: E,
                        metaData: y,
                      });
                      de.roomClient = w;
                      var P = new ve({
                        id: T,
                        displayName: S,
                        local: !0,
                        mode: l,
                        metaData: y,
                      });
                      return new pt(r, P, w);
                    },
                  },
                  {
                    key: "createCameraVideoTrack",
                    value:
                      ((o = (0, n.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c, u, l, p, h, _, f;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.cameraId),
                                    (n = void 0 === r ? void 0 : r),
                                    (a = t.encoderConfig),
                                    (i = void 0 === a ? void 0 : a),
                                    (s = t.facingMode),
                                    (o = void 0 === s ? void 0 : s),
                                    (c = t.optimizationMode),
                                    (u = void 0 === c ? void 0 : c),
                                    (l = t.multiStream),
                                    (p = void 0 === l || l),
                                    (h = i
                                      ? gt.v.videoProfiles[i]
                                      : gt.v.videoProfiles.h360p_w640p),
                                    (_ = {
                                      video: {
                                        deviceId: n || void 0,
                                        facingMode: o || void 0,
                                        width: h.width,
                                        height: h.height,
                                        frameRate: h.frameRate,
                                      },
                                    }),
                                    (e.next = 5),
                                    yt(_)
                                  );
                                case 5:
                                  return (
                                    (f = e.sent),
                                    u && (f.contentHint = u),
                                    (f.encoderConfig = i || "h360p_w640p"),
                                    (f.contentHint = u || ""),
                                    (f.multiStream = p),
                                    e.abrupt("return", f)
                                  );
                                case 11:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return o.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createScreenShareVideoTrack",
                    value:
                      ((r = (0, n.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c, u, l;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.encoderConfig),
                                    (n = void 0 === r ? void 0 : r),
                                    (a = t.optimizationMode),
                                    (i = void 0 === a ? void 0 : a),
                                    (s = t.withAudio),
                                    (o = void 0 === s ? "enable" : s),
                                    (c = n
                                      ? gt.v.screenShareProfiles[n]
                                      : gt.v.screenShareProfiles.h720p_15fps),
                                    (u = {
                                      audio: "enable" === o,
                                      video: {
                                        width: c.width,
                                        height: c.height,
                                        frameRate: c.frameRate,
                                      },
                                    }),
                                    (e.next = 5),
                                    bt(u)
                                  );
                                case 5:
                                  return (
                                    (l = e.sent),
                                    i && (l.contentHint = i),
                                    e.abrupt("return", l)
                                  );
                                case 8:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return r.apply(this, arguments);
                      }),
                  },
                  {
                    key: "createMicrophoneAudioTrack",
                    value:
                      ((t = (0, n.Z)(
                        d().mark(function e(t) {
                          var r, n, a, i, s, o, c, u, l;
                          return d().wrap(function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  return (
                                    (r = t.noiseConfig),
                                    (n = void 0 === r ? void 0 : r),
                                    (a = t.encoderConfig),
                                    (i = void 0 === a ? void 0 : a),
                                    (s = t.microphoneId),
                                    (o = void 0 === s ? void 0 : s),
                                    (c = i
                                      ? gt.v.audioProfiles[i]
                                      : gt.v.audioProfiles.speech_standard),
                                    (u = {
                                      audio: {
                                        deviceId: o,
                                        sampleRate: c.sampleRate,
                                        echoCancellation: n
                                          ? n && n.acousticEchoCancellation
                                          : c.echoCancellation,
                                        autoGainControl: n
                                          ? n && n.autoGainControl
                                          : c.autoGainControl,
                                        noiseSuppression: n
                                          ? n && n.noiseSuppression
                                          : c.noiseSuppression,
                                        channelCount: c.channelCount,
                                      },
                                    }),
                                    (e.next = 5),
                                    yt(u)
                                  );
                                case 5:
                                  return (
                                    ((l = e.sent).encoderConfig =
                                      i || "speech_standard"),
                                    e.abrupt("return", l)
                                  );
                                case 8:
                                case "end":
                                  return e.stop();
                              }
                          }, e);
                        })
                      )),
                      function (e) {
                        return t.apply(this, arguments);
                      }),
                  },
                ]),
                e
              );
            })();
          (0, o.Z)(Et, "Constants", {
            errors: ft.R,
            recordingEvents: {
              RECORDING_STARTING: "RECORDING_STARTING",
              RECORDING_STARTED: "RECORDING_STARTED",
              RECORDING_STOPPING: "RECORDING_STOPPING",
              RECORDING_STOPPED: "RECORDING_STOPPED",
            },
            livestreamEvents: {
              LIVESTREAM_STARTING: "LIVESTREAM_STARTING",
              LIVESTREAM_STARTED: "LIVESTREAM_STARTED",
              LIVESTREAM_STOPPING: "LIVESTREAM_STOPPING",
              LIVESTREAM_STOPPED: "LIVESTREAM_STOPPED",
            },
            hlsEvents: mt.o,
            modes: vt.S,
          });
          var Tt = Et;
        },
        1800: (e, t, r) => {
          "use strict";
          r.r(t), r.d(t, { default: () => ze });
          var n = r(1002),
            a = r(2982),
            i = r(5861),
            s = r(5671),
            o = r(3144),
            c = r(4942),
            d = r(7757),
            u = r.n(d),
            l = r(9293),
            p = r(960),
            h = r(1227),
            _ = r.n(h),
            f = "mediasoup-demo",
            m = (function () {
              function e(t) {
                (0, s.Z)(this, e),
                  t
                    ? ((this._debug = _()("".concat(f, ":").concat(t))),
                      (this._warn = _()("".concat(f, ":WARN:").concat(t))),
                      (this._error = _()("".concat(f, ":ERROR:").concat(t))))
                    : ((this._debug = _()(f)),
                      (this._warn = _()("".concat(f, ":WARN"))),
                      (this._error = _()("".concat(f, ":ERROR")))),
                  _().disable(),
                  (this._debug.log = console.info.bind(console)),
                  (this._warn.log = console.warn.bind(console)),
                  (this._error.log = console.error.bind(console));
              }
              return (
                (0, o.Z)(e, [
                  {
                    key: "debug",
                    get: function () {
                      return this._debug;
                    },
                  },
                  {
                    key: "warn",
                    get: function () {
                      return this._warn;
                    },
                  },
                  {
                    key: "error",
                    get: function () {
                      return this._error;
                    },
                  },
                ]),
                e
              );
            })(),
            v = r(1354),
            g = v.enc.Latin1.parse(
              "6gf9Oz5Y(6fOWPP@3XPv0Mwp51yfJ0HiZW^0*!9NdUuZ*VdKmRC@f))&^!Iriw)q"
            ),
            y = v.enc.Latin1.parse("BHrabik^$W^y*HL@A*$4YKj(");
          function b(e) {
            return x.apply(this, arguments);
          }
          function x() {
            return (x = (0, i.Z)(
              u().mark(function e(t) {
                var r, n, a, i, s, o, c, d, l, p, h, _, f;
                return u().wrap(function (e) {
                  for (;;)
                    switch ((e.prev = e.next)) {
                      case 0:
                        return (
                          (r = t.roomId),
                          (n = t.secret),
                          (a = t.signalingBaseUrl),
                          (i = "call-api.videosdk.live"),
                          (s = []),
                          (o = null),
                          (c = {}),
                          (d = {}),
                          (l = {}),
                          (p = null),
                          (e.next = 10),
                          fetch(
                            "https://".concat(
                              a,
                              "/infra/v1/meetings/init-config"
                            ),
                            {
                              method: "POST",
                              headers: {
                                Authorization: n,
                                "Content-Type": "application/json",
                              },
                              body: JSON.stringify({ roomId: r }),
                            }
                          )
                            .then(function (e) {
                              return e.json();
                            })
                            .catch(function (e) {
                              return {};
                            })
                        );
                      case 10:
                        return (
                          (h = e.sent),
                          (_ = h.data) &&
                            ((i = _.baseUrl),
                            (f = _.observability),
                            (s = E(_.iceServers)),
                            (o = f.jwt),
                            (c = f.traces),
                            (d = f.logs),
                            (l = f.metaData),
                            (p = _.signalingUrl)),
                          e.abrupt("return", {
                            baseUrl: i,
                            iceServers: s,
                            observabilityJwt: o,
                            traces: c,
                            logs: d,
                            metaData: l,
                            signalingUrl: p,
                          })
                        );
                      case 14:
                      case "end":
                        return e.stop();
                    }
                }, e);
              })
            )).apply(this, arguments);
          }
          function E(e) {
            try {
              var t = v.AES.decrypt(e, g, {
                iv: y,
                mode: v.mode.CBC,
                padding: v.pad.ZeroPadding,
              }).toString(v.enc.Utf8);
              return JSON.parse(t);
            } catch (e) {
              return [];
            }
          }
          var T = r(6808),
            S = r.n(T),
            w = "mediasoup-demo.user",
            R = "mediasoup-demo.devices";
          function P(e) {
            var t = e.displayName;
            S().set(w, { displayName: t });
          }
          function O() {
            return S().getJSON(R);
          }
          var k = r(3196),
            C = r.n(k),
            I = function (e) {
              return { type: "SET_ROOM_STATE", payload: { state: e } };
            },
            L = function (e) {
              return {
                type: "SET_ROOM_ACTIVE_SPEAKER",
                payload: { peerId: e },
              };
            },
            D = function (e) {
              return { type: "SET_ROOM_STATS_PEER_ID", payload: { peerId: e } };
            },
            A = function (e) {
              return {
                type: "SET_MEDIA_CAPABILITIES",
                payload: {
                  canSendMic: e.canSendMic,
                  canSendWebcam: e.canSendWebcam,
                },
              };
            },
            M = function (e) {
              return { type: "SET_CAN_CHANGE_WEBCAM", payload: e };
            },
            N = function (e) {
              return { type: "SET_DISPLAY_NAME", payload: { displayName: e } };
            },
            j = function (e) {
              return { type: "SET_AUDIO_ONLY_STATE", payload: { enabled: e } };
            },
            B = function (e) {
              return {
                type: "SET_AUDIO_ONLY_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            U = function (e) {
              return { type: "SET_AUDIO_MUTED_STATE", payload: { enabled: e } };
            },
            F = function (e) {
              return {
                type: "SET_RESTART_ICE_IN_PROGRESS",
                payload: { flag: e },
              };
            },
            G = function (e) {
              return { type: "ADD_PRODUCER", payload: { producer: e } };
            },
            V = function (e) {
              return { type: "REMOVE_PRODUCER", payload: { producerId: e } };
            },
            Z = function (e, t) {
              return {
                type: "SET_PRODUCER_TRACK",
                payload: { producerId: e, track: t },
              };
            },
            H = function (e, t) {
              return {
                type: "SET_PRODUCER_SCORE",
                payload: { producerId: e, score: t },
              };
            },
            W = function (e) {
              return {
                type: "ADD_DATA_PRODUCER",
                payload: { dataProducer: e },
              };
            },
            z = function (e) {
              return { type: "SET_WEBCAM_IN_PROGRESS", payload: { flag: e } };
            },
            K = function (e) {
              return { type: "SET_SHARE_IN_PROGRESS", payload: { flag: e } };
            },
            X = function (e) {
              return { type: "ADD_PEER", payload: { peer: e } };
            },
            q = function (e) {
              return { type: "REMOVE_PEER", payload: { peerId: e } };
            },
            $ = function (e, t) {
              return {
                type: "SET_PEER_DISPLAY_NAME",
                payload: { displayName: e, peerId: t },
              };
            },
            J = function (e, t) {
              return {
                type: "ADD_CONSUMER",
                payload: { consumer: e, peerId: t },
              };
            },
            Y = function (e, t) {
              return {
                type: "REMOVE_CONSUMER",
                payload: { consumerId: e, peerId: t },
              };
            },
            Q = function (e, t) {
              return {
                type: "SET_CONSUMER_PAUSED",
                payload: { consumerId: e, originator: t },
              };
            },
            ee = function (e, t) {
              return {
                type: "SET_CONSUMER_RESUMED",
                payload: { consumerId: e, originator: t },
              };
            },
            te = function (e, t, r) {
              return {
                type: "SET_CONSUMER_CURRENT_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            re = function (e, t, r) {
              return {
                type: "SET_CONSUMER_PREFERRED_LAYERS",
                payload: { consumerId: e, spatialLayer: t, temporalLayer: r },
              };
            },
            ne = function (e, t) {
              return {
                type: "SET_CONSUMER_PRIORITY",
                payload: { consumerId: e, priority: t },
              };
            },
            ae = function (e, t) {
              return {
                type: "SET_CONSUMER_SCORE",
                payload: { consumerId: e, score: t },
              };
            },
            ie = function (e, t) {
              return {
                type: "ADD_DATA_CONSUMER",
                payload: { dataConsumer: e, peerId: t },
              };
            },
            se = function (e, t) {
              return {
                type: "REMOVE_DATA_CONSUMER",
                payload: { dataConsumerId: e, peerId: t },
              };
            },
            oe = function (e) {
              var t = e.type,
                r = void 0 === t ? "info" : t,
                n = e.text,
                a = e.title,
                i = e.timeout;
              if (!i)
                switch (r) {
                  case "info":
                    i = 3e3;
                    break;
                  case "error":
                    i = 5e3;
                }
              var s = {
                id: C()({ length: 6 }).toLowerCase(),
                type: r,
                title: a,
                text: n,
                timeout: i,
              };
              return function (e) {
                e(
                  (function (e) {
                    return {
                      type: "ADD_NOTIFICATION",
                      payload: { notification: e },
                    };
                  })(s)
                ),
                  setTimeout(function () {
                    e({
                      type: "REMOVE_NOTIFICATION",
                      payload: { notificationId: s.id },
                    });
                  }, i);
              };
            },
            ce = r(7187),
            de = r(885),
            ue = r(8962),
            le = {},
            pe = {},
            he = {};
          for (var _e in ue.v.videoProfiles)
            "oneSixNine" == ue.v.videoProfiles[_e].aspectRatio &&
              ((le[_e] = ue.v.videoProfiles[_e]),
              (le[_e].encoding = {
                maxBitrate: le[_e].bitRate,
                maxFramerate: le[_e].frameRate,
              })),
              "fourThree" == ue.v.videoProfiles[_e].aspectRatio &&
                ((pe[_e] = ue.v.videoProfiles[_e]),
                (pe[_e].encoding = {
                  maxBitrate: pe[_e].bitRate,
                  maxFramerate: pe[_e].frameRate,
                }));
          for (var _e in ue.v.screenShareProfiles)
            (he[_e] = ue.v.screenShareProfiles[_e]),
              (he[_e].encoding = {
                maxBitrate: he[_e].bitRate,
                maxFramerate: he[_e].frameRate,
              });
          var fe = Object.values(le),
            me = Object.values(pe),
            ve = Object.values(he),
            ge = [le.h180p_w320p, le.h360p_w640p],
            ye = [pe.h180p_w240p, pe.h360p_w480p],
            be = ["q", "h", "f"];
          function xe(e, t, r, n) {
            var a = n && n.videoEncoding;
            e && (a = n && n.screenShareEncoding);
            var i = null == n ? void 0 : n.simulcast;
            if (
              (a ||
                (a = (function (e, t, r) {
                  for (
                    var n = (function (e, t, r) {
                        if (e) return ve;
                        var n = t > r ? t / r : r / t;
                        if (Math.abs(n - 16 / 9) < Math.abs(n - 4 / 3))
                          return fe;
                        return me;
                      })(e, t, r),
                      a = n[0].encoding,
                      i = Math.max(t, r),
                      s = 0;
                    s < n.length;
                    s += 1
                  ) {
                    var o = n[s];
                    if (((a = o.encoding), o.width >= i)) break;
                  }
                  return a;
                })(e, t, r)),
              !i)
            )
              return [a];
            var s,
              o = {
                width: t,
                height: r,
                encoding: {
                  maxBitrate: a.maxBitrate,
                  maxFramerate: a.maxFramerate,
                },
              },
              c = [],
              d = (c = Ee(e, o))[0];
            if (c.length > 1) {
              var u = c;
              s = (0, de.Z)(u, 2)[1];
            }
            var l = Math.max(t, r);
            return Te(
              t,
              r,
              l >= 960 && s ? [d, s, o] : l >= 480 ? [d, o] : [o]
            );
          }
          function Ee(e, t) {
            if (e)
              (r = t),
                [{ scaleResolutionDownBy: 2, fps: 3 }].map(function (e) {
                  var t;
                  return {
                    width: Math.floor(r.width / e.scaleResolutionDownBy),
                    height: Math.floor(r.height / e.scaleResolutionDownBy),
                    encodings: {
                      maxBitrate: Math.max(
                        15e4,
                        Math.floor(
                          r.encoding.maxBitrate /
                            (Math.pow(e.scaleResolutionDownBy, 2) *
                              ((null !== (t = r.encoding.maxFramerate) &&
                              void 0 !== t
                                ? t
                                : 30) /
                                e.fps))
                        )
                      ),
                      maxFramerate: e.fps,
                    },
                  };
                });
            var r,
              n = t.width,
              a = t.height,
              i = n > a ? n / a : a / n;
            return Math.abs(i - 16 / 9) < Math.abs(i - 4 / 3) ? ge : ye;
          }
          function Te(e, t, r) {
            var n = [];
            return (
              r.forEach(function (r, a) {
                if (!(a >= be.length)) {
                  var i = Math.min(e, t),
                    s = {
                      rid: be[a],
                      scaleResolutionDownBy: i / Math.min(r.width, r.height),
                      maxBitrate: r.encoding.maxBitrate,
                      maxFramerate: r.encoding.maxFramerate,
                    };
                  n.push(s);
                }
              }),
              n
            );
          }
          function Se(e, t, r) {
            if (!e) return {};
            var n = e.id,
              a =
                (e.preferredSpatialLayer, e.preferredTemporalLayer, e.appData),
              i = a.width,
              s = a.height,
              o = a.encodings;
            try {
              var c = (function (e) {
                var t = [];
                if (e && 0 != e.length) {
                  if (1 === e.length) {
                    for (var r = 0; r < 3; r++) t.push(Math.pow(2, 3 - r - 1));
                    return t;
                  }
                  var n = !1;
                  return (
                    e.forEach(function (e) {
                      void 0 !== e.scaleResolutionDownBy
                        ? ((n = !0),
                          t.push(Math.max(1, e.scaleResolutionDownBy)))
                        : t.push(1);
                    }),
                    n ||
                      e.forEach(function (r, n) {
                        t[n] = Math.pow(2, e.length - n - 1);
                      }),
                    t
                  );
                }
              })(o);
              if (!c) return {};
              for (
                var d = Math.min(
                    Math.max(ue.v.adaptiveScalingFactor || 0.75, 0.5),
                    1
                  ),
                  u = 0,
                  l = 0;
                l < c.length;
                l++
              ) {
                var p = (d * i) / c[l],
                  h = (d * s) / c[l];
                if (!(t >= p && r >= h)) break;
                u = l;
              }
              var _ = (e.temporalLayers ? e.temporalLayers : 3) - 1;
              if (0 === u && _ > 0) {
                var f = i / c[0],
                  m = s / c[0];
                t < 0.5 * f && r < 0.5 * m && (_ -= 1),
                  _ > 0 && t < 0.25 * f && r < 0.25 * m && (_ -= 1);
              }
              return {
                consumerId: n,
                newPreferredSpatialLayer: u,
                newPreferredTemporalLayer: _,
              };
            } catch (e) {
              return {};
            }
          }
          var we = r(6900),
            Re = r(8508),
            Pe = r(4180),
            Oe = r(3430),
            ke = r(6380),
            Ce = (function () {
              function e(t) {
                var n = t.roomId,
                  a = t.peerId,
                  i = t.sdkName,
                  o = t.logs,
                  c = t.observabilityJwt,
                  d = t.traces,
                  u = t.metaData;
                (0, s.Z)(this, e),
                  (this._peerId = a),
                  (this._roomId = n),
                  (this._logs = o),
                  (this._tracesEnabled = d.enabled),
                  (this._observabilityJwt = c),
                  (this._sdkName = i);
                var l = r(4951).WebTracerProvider,
                  p = r(9648).OTLPTraceExporter,
                  h = r(5239).BatchSpanProcessor,
                  _ = r(8009).ZoneContextManager,
                  f = r(4284).ROOT_CONTEXT;
                (this.opentelemetry = r(4284)), (this.rootContext = f);
                var m = r(168).Resource;
                if ("react-native" != i && this._tracesEnabled) {
                  var v = new p({
                    url: d.endPoint,
                    headers: { Authorization: this._observabilityJwt },
                  });
                  (this._provider = new l({
                    resource: new m({
                      "service.name": "videosdk-otel",
                      "sdk-version": "0.0.1",
                    }),
                  })),
                    (this._tracer = this._provider.getTracer(a)),
                    this._provider.addSpanProcessor(new h(v)),
                    this._provider.register({ contextManager: new _() }),
                    (this._rootSpan = this._tracer.startSpan(
                      "room_".concat(n, "_peer_").concat(a, "_sdk_").concat(i),
                      {},
                      this.rootContext
                    )),
                    this._rootSpan.setAttributes({
                      roomId: n,
                      peerId: a,
                      sdkName: i,
                      userId: u.userId,
                      email: u.email,
                    }),
                    this._rootSpan.end();
                }
              }
              var t;
              return (
                (0, o.Z)(e, [
                  {
                    key: "trace",
                    value: function (e) {
                      var t = e.spanName,
                        r = e.attributes,
                        n = void 0 === r ? {} : r,
                        a = e.span,
                        s = void 0 === a ? void 0 : a;
                      if (this._tracesEnabled) {
                        var o;
                        o = s || this.getCurrentSpan();
                        var c = this.opentelemetry.trace.setSpan(
                            this.rootContext,
                            o
                          ),
                          d = this._tracer.startActiveSpan(
                            t,
                            {},
                            c,
                            (function () {
                              var e = (0, i.Z)(
                                u().mark(function e(t) {
                                  return u().wrap(function (e) {
                                    for (;;)
                                      switch ((e.prev = e.next)) {
                                        case 0:
                                          return (
                                            t.setAttributes(n),
                                            e.abrupt("return", t)
                                          );
                                        case 2:
                                        case "end":
                                          return e.stop();
                                      }
                                  }, e);
                                })
                              );
                              return function (t) {
                                return e.apply(this, arguments);
                              };
                            })()
                          );
                        return d;
                      }
                      return null;
                    },
                  },
                  {
                    key: "traceAutoComplete",
                    value: function (e) {
                      var t = e.spanName,
                        r = e.attributes,
                        n = void 0 === r ? {} : r,
                        a = e.span,
                        i = void 0 === a ? void 0 : a,
                        s = e.status,
                        o = void 0 === s ? 1 : s,
                        c = e.message,
                        d = void 0 === c ? "SUCCESS" : c;
                      if (this._tracesEnabled) {
                        var u;
                        u = i || this._rootSpan;
                        var l = this.opentelemetry.trace.setSpan(
                            this.rootContext,
                            u
                          ),
                          p = this._tracer.startSpan(t, {}, l);
                        p.setAttributes(n),
                          p.setStatus({ code: o, message: d }),
                          p.end();
                      }
                    },
                  },
                  {
                    key: "completeSpan",
                    value: function (e) {
                      var t = e.span,
                        r = e.status,
                        n = e.message;
                      this._tracesEnabled &&
                        (t.setStatus({ code: r, message: n }), t.end());
                    },
                  },
                  {
                    key: "getCurrentSpan",
                    value: function () {
                      var e = this.opentelemetry.trace.getSpan(
                        this.opentelemetry.context.active()
                      );
                      return e || (e = this._rootSpan), e;
                    },
                  },
                  {
                    key: "getCurrentSpanName",
                    value: function () {
                      var e;
                      return null === (e = this.getCurrentSpan()) ||
                        void 0 === e
                        ? void 0
                        : e.name;
                    },
                  },
                  {
                    key: "flush",
                    value:
                      ((t = (0, i.Z)(
                        u().mark(function e() {
                          return u().wrap(
                            function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    if (!this._tracesEnabled) {
                                      e.next = 3;
                                      break;
                                    }
                                    return (
                                      (e.next = 3), this._provider.shutdown()
                                    );
                                  case 3:
                                  case "end":
                                    return e.stop();
                                }
                            },
                            e,
                            this
                          );
                        })
                      )),
                      function () {
                        return t.apply(this, arguments);
                      }),
                  },
                ]),
                e
              );
            })();
          function Ie(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function Le(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Ie(Object(r), !0).forEach(function (t) {
                    (0, c.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Ie(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var De = (function () {
            function e(t) {
              var r = t.roomId,
                n = t.peerId,
                a = t.sdkName,
                i = t.logs,
                o = t.observabilityJwt;
              (0, s.Z)(this, e),
                (this._peerId = n),
                (this._roomId = r),
                (this._logs = i),
                (this._observabilityJwt = o),
                (this._sdkName = a);
            }
            var t;
            return (
              (0, o.Z)(e, [
                {
                  key: "pushLogs",
                  value:
                    ((t = (0, i.Z)(
                      u().mark(function e(t) {
                        var r, n, a, i, s, o;
                        return u().wrap(
                          function (e) {
                            for (;;)
                              switch ((e.prev = e.next)) {
                                case 0:
                                  if (
                                    ((r = t.logType),
                                    (n = t.logText),
                                    (a = t.attributes),
                                    (i = this._logs),
                                    (s = i.enabled),
                                    (o = i.endPoint),
                                    !s)
                                  ) {
                                    e.next = 8;
                                    break;
                                  }
                                  return (
                                    (e.next = 5),
                                    fetch(o, {
                                      method: "POST",
                                      headers: {
                                        Authorization: this._observabilityJwt,
                                        "Content-Type": "application/json",
                                      },
                                      body: JSON.stringify({
                                        logType: r,
                                        logText: n,
                                        attributes: Le(
                                          Le({}, a),
                                          {},
                                          {
                                            roomId: this._roomId,
                                            peerId: this._peerId,
                                            SDK: this._sdkName,
                                          }
                                        ),
                                      }),
                                    })
                                      .then(function (e) {
                                        return e.json();
                                      })
                                      .catch(function (e) {
                                        return console.log("error", e), {};
                                      })
                                  );
                                case 5:
                                  return e.abrupt("return", e.sent);
                                case 8:
                                  return e.abrupt("return", null);
                                case 9:
                                case "end":
                                  return e.stop();
                              }
                          },
                          e,
                          this
                        );
                      })
                    )),
                    function (e) {
                      return t.apply(this, arguments);
                    }),
                },
              ]),
              e
            );
          })();
          function Ae(e, t) {
            var r =
              ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
              e["@@iterator"];
            if (!r) {
              if (
                Array.isArray(e) ||
                (r = (function (e, t) {
                  if (!e) return;
                  if ("string" == typeof e) return Me(e, t);
                  var r = Object.prototype.toString.call(e).slice(8, -1);
                  "Object" === r && e.constructor && (r = e.constructor.name);
                  if ("Map" === r || "Set" === r) return Array.from(e);
                  if (
                    "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  )
                    return Me(e, t);
                })(e)) ||
                (t && e && "number" == typeof e.length)
              ) {
                r && (e = r);
                var n = 0,
                  a = function () {};
                return {
                  s: a,
                  n: function () {
                    return n >= e.length
                      ? { done: !0 }
                      : { done: !1, value: e[n++] };
                  },
                  e: function (e) {
                    throw e;
                  },
                  f: a,
                };
              }
              throw new TypeError(
                "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
              );
            }
            var i,
              s = !0,
              o = !1;
            return {
              s: function () {
                r = r.call(e);
              },
              n: function () {
                var e = r.next();
                return (s = e.done), e;
              },
              e: function (e) {
                (o = !0), (i = e);
              },
              f: function () {
                try {
                  s || null == r.return || r.return();
                } finally {
                  if (o) throw i;
                }
              },
            };
          }
          function Me(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          function Ne(e, t) {
            var r = Object.keys(e);
            if (Object.getOwnPropertySymbols) {
              var n = Object.getOwnPropertySymbols(e);
              t &&
                (n = n.filter(function (t) {
                  return Object.getOwnPropertyDescriptor(e, t).enumerable;
                })),
                r.push.apply(r, n);
            }
            return r;
          }
          function je(e) {
            for (var t = 1; t < arguments.length; t++) {
              var r = null != arguments[t] ? arguments[t] : {};
              t % 2
                ? Ne(Object(r), !0).forEach(function (t) {
                    (0, c.Z)(e, t, r[t]);
                  })
                : Object.getOwnPropertyDescriptors
                ? Object.defineProperties(
                    e,
                    Object.getOwnPropertyDescriptors(r)
                  )
                : Ne(Object(r)).forEach(function (t) {
                    Object.defineProperty(
                      e,
                      t,
                      Object.getOwnPropertyDescriptor(r, t)
                    );
                  });
            }
            return e;
          }
          var Be,
            Ue = {
              sd: {
                low: { s: 0, t: 2 },
                med: { s: 0, t: 2 },
                high: { s: 1, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
              hd: {
                low: { s: 0, t: 2 },
                med: { s: 1, t: 2 },
                high: { s: 2, t: 2 },
                s0t0: { s: 0, t: 0 },
                s0t1: { s: 0, t: 1 },
                s0t2: { s: 0, t: 2 },
                s1t0: { s: 1, t: 0 },
                s1t1: { s: 1, t: 1 },
                s1t2: { s: 1, t: 2 },
                s2t0: { s: 2, t: 0 },
                s2t1: { s: 2, t: 1 },
                s2t2: { s: 2, t: 2 },
              },
            },
            Fe = {
              qvga: { width: { ideal: 320 }, height: { ideal: 240 } },
              vga: { width: { ideal: 640 }, height: { ideal: 480 } },
              sd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
              hd: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 24 },
              },
            },
            Ge = {
              sd: [
                { scaleResolutionDownBy: 6 },
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
              ],
              hd: [
                { scaleResolutionDownBy: 4 },
                { scaleResolutionDownBy: 2 },
                { scaleResolutionDownBy: 1 },
              ],
            },
            Ve = [{ scalabilityMode: "S3T3_KEY" }],
            Ze = [{ dtx: !0, maxFramerate: 10 }],
            He = [{ scalabilityMode: "S3T3", dtx: !0 }],
            We = new m("RoomClient"),
            ze = (function () {
              function e(t) {
                var r,
                  n,
                  a = t.roomId,
                  i = t.peerId,
                  o = t.secret,
                  d = t.displayName,
                  u = t.device,
                  l = t.handlerName,
                  p = t.useSimulcast,
                  h = t.useSharingSimulcast,
                  _ = t.forceTcp,
                  f = t.mode,
                  m = t.forceH264,
                  v = t.forceVP9,
                  g = t.svc,
                  y = t.datachannel,
                  b = t.externalVideo,
                  x = t.micEnabled,
                  E = t.webcamEnabled,
                  T = t.maxResolution,
                  S = t.useSpartialLayerAnalytics,
                  w = t._deviceInfo,
                  R = t.customCameraVideoTrack,
                  P = t.customMicrophoneAudioTrack,
                  O = t.autoConsume,
                  k = t.preferredProtocol,
                  C = t.signalingBaseUrl,
                  I = t.metaData;
                (0, s.Z)(this, e),
                  (0, c.Z)(this, "delay", function (e) {
                    return new Promise(function (t) {
                      return setTimeout(t, e);
                    });
                  }),
                  We.debug(
                    'constructor() [roomId:"%s", peerId:"%s", displayName:"%s", device:%s]',
                    a,
                    i,
                    d,
                    u.flag
                  ),
                  (this.useSpartialLayerAnalytics = S || !1),
                  (this._deviceInfo = w),
                  (this._eventEmitter = new ce.EventEmitter()),
                  (this._closed = !1),
                  (this._displayName = d),
                  (this._device = u),
                  (this._forceTcp = _),
                  (this._preferredProtocol = k),
                  f == Oe.S.CONFERENCE
                    ? ((r = !0), (n = !0))
                    : ((r = !1), (n = !1)),
                  (this._mode = f),
                  (this._produce = r),
                  (this._consume = n),
                  (this._useDataChannel = y),
                  (this._forceH264 = Boolean(m)),
                  (this._forceVP9 = Boolean(v)),
                  (this._micEnabled = Boolean(x)),
                  (this._webcamEnabled = Boolean(E)),
                  (this._externalVideo = null),
                  (this._externalVideoStream = null),
                  (this._nextDataChannelTestNumber = 0),
                  b &&
                    ((this._externalVideo = document.createElement("video")),
                    (this._externalVideo.controls = !0),
                    (this._externalVideo.loop = !0),
                    this._externalVideo.setAttribute("playsinline", ""),
                    (this._externalVideo.src = b),
                    this._externalVideo.play().catch(function (e) {
                      return We.warn("externalVideo.play() failed:%o", e);
                    })),
                  (this._handlerName = l),
                  (this._useSimulcast = p),
                  (this._useSharingSimulcast = h),
                  (this._protooUrl = ""),
                  (this._secret = o),
                  (this._peerId = i),
                  (this._roomId = a),
                  (this._baseUrl = ""),
                  (this._protoo = null),
                  (this._mediasoupDevice = null),
                  (this._sendTransport = null),
                  (this._recvTransport = null),
                  (this._micProducer = null),
                  (this._webcamProducer = null),
                  (this._shareProducer = null),
                  (this._shareAudioProducer = null),
                  (this._chatDataProducer = null),
                  (this._botDataProducer = null),
                  (this._consumers = new Map()),
                  (this._dataConsumers = new Map()),
                  (this._mics = new Map()),
                  (this._mic = { device: null }),
                  (this._webcams = new Map()),
                  (this._webcam = { device: null, resolution: T || "hd" }),
                  (this._pinnedParticipants = new Map()),
                  g &&
                    ((Ve[0].scalabilityMode = "".concat(g, "_KEY")),
                    (He[0].scalabilityMode = g)),
                  (this.customCameraVideoTrack = R),
                  (this.customMicrophoneAudioTrack = P),
                  (this._autoConsume = O),
                  (this._iceServers = []);
                (this._metrics = new Pe.VideoSDKMetrics({
                  refreshEvery: 1e3,
                  startAfter: 1e3,
                  verbose: !1,
                })),
                  (this._collectStats = "react-native" != w.sdkType),
                  (this._stats = {}),
                  (this._latestStats = {}),
                  (this._isWebsocketAlive = !1),
                  (this._pingWebsocketInterval = null),
                  (this._pingInternetInterval = null),
                  (this._pingWebsocketFailedCounter = 0),
                  (this._pongInternetCounter = 0),
                  (this._transportState = ""),
                  (this._openTelemetry = null),
                  (this._videosdkLogs = null),
                  (this._signalingBaseUrl = C || "api.videosdk.live"),
                  (this._metaData = I);
              }
              var t,
                r,
                d,
                h,
                _,
                f,
                m,
                v,
                g,
                y,
                x,
                E,
                T,
                S,
                w,
                R,
                k,
                C,
                de,
                le,
                pe,
                he,
                _e,
                fe,
                me,
                ve,
                ge,
                ye,
                be,
                Ee,
                Te,
                Ie,
                Le,
                Me,
                Ne,
                ze,
                Ke,
                qe,
                $e,
                Je,
                Ye,
                Qe,
                et,
                tt,
                rt,
                nt,
                at,
                it,
                st,
                ot,
                ct,
                dt,
                ut,
                lt,
                pt,
                ht,
                _t,
                ft,
                mt,
                vt,
                gt,
                yt,
                bt,
                xt,
                Et,
                Tt,
                St,
                wt,
                Rt,
                Pt,
                Ot,
                kt,
                Ct,
                It,
                Lt,
                Dt,
                At,
                Mt,
                Nt,
                jt,
                Bt,
                Ut,
                Ft,
                Gt,
                Vt,
                Zt,
                Ht,
                Wt,
                zt,
                Kt,
                Xt,
                qt,
                $t,
                Jt,
                Yt,
                Qt,
                er,
                tr,
                rr;
              return (
                (0, o.Z)(
                  e,
                  [
                    {
                      key: "on",
                      value: function (e, t) {
                        this._eventEmitter.on(e, t);
                      },
                    },
                    {
                      key: "close",
                      value:
                        ((rr = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i, s, o, c, d, l;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((o = t.sendLeft),
                                        (c = void 0 === o || o) &&
                                          (this._eventEmitter.emit(
                                            "MEETING_STATE_CHANGED",
                                            { state: "CLOSING" }
                                          ),
                                          null === (d = this._openTelemetry) ||
                                            void 0 === d ||
                                            d.traceAutoComplete({
                                              spanName:
                                                "Meeting is in CLOSING State",
                                              status: 1,
                                            })),
                                        !this._closed)
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return (
                                        (this._closed = !0),
                                        this._pingWebsocketInterval &&
                                          clearInterval(
                                            this._pingWebsocketInterval
                                          ),
                                        (this._pingWebsocketInterval = null),
                                        this._pingInternetInterval &&
                                          clearInterval(
                                            this._pingInternetInterval
                                          ),
                                        (this._pingInternetInterval = null),
                                        this._protoo.close(),
                                        this._metrics.running &&
                                          this._metrics.stopAllProbes(),
                                        We.debug("close()"),
                                        (e.next = 14),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "Closing Trasnport",
                                            })
                                      );
                                    case 14:
                                      return (
                                        (l = e.sent),
                                        this._sendTransport &&
                                          this._sendTransport.close(),
                                        this._recvTransport &&
                                          this._recvTransport.close(),
                                        null === (n = this._openTelemetry) ||
                                          void 0 === n ||
                                          n.completeSpan({
                                            span: l,
                                            status: 1,
                                            message: "Closed Trasnport",
                                          }),
                                        Be.dispatch(I("closed")),
                                        c &&
                                          this._eventEmitter.emit(
                                            "MEETING_STATE_CHANGED",
                                            { state: "CLOSED" }
                                          ),
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.traceAutoComplete({
                                            spanName:
                                              "Meeting is in CLOSED State",
                                            status: 1,
                                          }),
                                        c &&
                                          this._eventEmitter.emit(
                                            "MEETING_LEFT"
                                          ),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.traceAutoComplete({
                                            spanName:
                                              "Emitted MEETING_LEFT Event",
                                            status: 1,
                                          }),
                                        (e.next = 25),
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.flush()
                                      );
                                    case 25:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return rr.apply(this, arguments);
                        }),
                    },
                    {
                      key: "join",
                      value:
                        ((tr = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              s,
                              o,
                              d,
                              h,
                              _,
                              f,
                              m,
                              v = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        b({
                                          roomId: this._roomId,
                                          secret: this._secret,
                                          signalingBaseUrl:
                                            this._signalingBaseUrl,
                                        })
                                      );
                                    case 2:
                                      return (
                                        (n = e.sent),
                                        (a = n.baseUrl),
                                        (s = n.iceServers),
                                        (o = n.logs),
                                        (d = n.observabilityJwt),
                                        (h = n.traces),
                                        (_ = n.metaData),
                                        (f = n.signalingUrl),
                                        (this._baseUrl = a),
                                        (this._protooUrl = ""
                                          .concat(
                                            f || "wss://".concat(this._baseUrl),
                                            "/?roomId="
                                          )
                                          .concat(this._roomId, "&peerId=")
                                          .concat(this._peerId, "&secret=")
                                          .concat(this._secret, "&mode=")
                                          .concat(this._mode)),
                                        (this._iceServers = s),
                                        (this._tracesEnabled = h.enabled),
                                        "react-native" !=
                                          this._deviceInfo.sdkType &&
                                          (this._openTelemetry = new Ce({
                                            roomId: this._roomId,
                                            peerId: this._peerId,
                                            sdkName: "".concat(
                                              this._deviceInfo.sdkType,
                                              "-sdk"
                                            ),
                                            traces: h,
                                            logs: o,
                                            observabilityJwt: d,
                                            metaData: _,
                                          })),
                                        (this._videosdkLogs = new De({
                                          roomId: this._roomId,
                                          peerId: this._peerId,
                                          sdkName: "".concat(
                                            this._deviceInfo.sdkType,
                                            "-sdk"
                                          ),
                                          logs: o,
                                          observabilityJwt: d,
                                        })),
                                        (e.next = 18),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "Join() Calling",
                                              attributes: {
                                                DeviceInfo: JSON.stringify(
                                                  this._deviceInfo
                                                ),
                                                mode: this._mode,
                                                displayName: this._displayName,
                                                multiStream: this._useSimulcast,
                                                micEnabled: this._micEnabled,
                                                webcamEnabled:
                                                  this._webcamEnabled,
                                                CustomVideoTrack:
                                                  !!this.customCameraVideoTrack,
                                                CustomMicTrack:
                                                  !!this
                                                    .customMicrophoneAudioTrack,
                                                signalingUrl:
                                                  f ||
                                                  "signalingUrl not specify",
                                              },
                                            })
                                      );
                                    case 18:
                                      (this._joinSpan = e.sent),
                                        (m = new l.qo(this._protooUrl)),
                                        (this._protoo = new l._z(m)),
                                        this._eventEmitter.emit(
                                          "MEETING_STATE_CHANGED",
                                          { state: "CONNECTING" }
                                        ),
                                        Be.dispatch(I("connecting")),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName:
                                              "Meeting is in CONNECTING State",
                                            status: 1,
                                          }),
                                        this._protoo.on("open", function () {
                                          var e;
                                          (v._isWebsocketAlive = !0),
                                            (v._closed = !1),
                                            v.startPingPong(),
                                            v._eventEmitter.emit(
                                              "MEETING_STATE_CHANGED",
                                              { state: "CONNECTED" }
                                            ),
                                            null === (e = v._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "Meeting is in CONNECTED State",
                                                status: 1,
                                              }),
                                            v.requestEntry();
                                        }),
                                        this._protoo.on("failed", function () {
                                          var e;
                                          v._eventEmitter.emit(
                                            "MEETING_STATE_CHANGED",
                                            { state: "FAILED" }
                                          ),
                                            null === (e = v._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "Meeting is in FAILED State",
                                                status: 2,
                                              }),
                                            Be.dispatch(
                                              oe({
                                                type: "error",
                                                text: "WebSocket connection failed",
                                              })
                                            );
                                        }),
                                        this._protoo.on(
                                          "disconnected",
                                          function () {
                                            var e;
                                            v._eventEmitter.emit(
                                              "MEETING_STATE_CHANGED",
                                              { state: "DISCONNECTED" }
                                            ),
                                              null === (e = v._openTelemetry) ||
                                                void 0 === e ||
                                                e.traceAutoComplete({
                                                  spanName:
                                                    "Meeting is in DISCONNECTED State",
                                                  status: 1,
                                                }),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "WebSocket disconnected",
                                                })
                                              ),
                                              v._sendTransport &&
                                                (v._sendTransport.close(),
                                                (v._sendTransport = null)),
                                              v._recvTransport &&
                                                (v._recvTransport.close(),
                                                (v._recvTransport = null)),
                                              Be.dispatch(I("closed"));
                                          }
                                        ),
                                        this._protoo.on("close", function () {
                                          v._closed ||
                                            v.close({ sendLeft: !0 });
                                        }),
                                        this._protoo.on(
                                          "request",
                                          (function () {
                                            var e = (0, i.Z)(
                                              u().mark(function e(t, r, n) {
                                                var a,
                                                  i,
                                                  s,
                                                  o,
                                                  d,
                                                  l,
                                                  h,
                                                  _,
                                                  f,
                                                  m,
                                                  g,
                                                  y,
                                                  b,
                                                  x,
                                                  E,
                                                  T,
                                                  S,
                                                  w,
                                                  R,
                                                  P,
                                                  O,
                                                  k,
                                                  C,
                                                  I,
                                                  L,
                                                  D,
                                                  A,
                                                  M,
                                                  N,
                                                  j,
                                                  B,
                                                  U,
                                                  F,
                                                  G,
                                                  V,
                                                  Z,
                                                  H,
                                                  W,
                                                  z,
                                                  K,
                                                  X,
                                                  q,
                                                  $,
                                                  Q,
                                                  ee,
                                                  te,
                                                  re,
                                                  ne,
                                                  ae,
                                                  se,
                                                  ce,
                                                  de,
                                                  ue,
                                                  le,
                                                  pe,
                                                  he,
                                                  _e,
                                                  fe,
                                                  me,
                                                  ve,
                                                  ge,
                                                  ye;
                                                return u().wrap(
                                                  function (e) {
                                                    for (;;)
                                                      switch (
                                                        (e.prev = e.next)
                                                      ) {
                                                        case 0:
                                                          We.debug(
                                                            'proto "request" event [method:%s, data:%o]',
                                                            t.method,
                                                            t.data
                                                          ),
                                                            (e.t0 = t.method),
                                                            (e.next =
                                                              "close" === e.t0
                                                                ? 4
                                                                : "newConsumer" ===
                                                                  e.t0
                                                                ? 7
                                                                : "newDataConsumer" ===
                                                                  e.t0
                                                                ? 52
                                                                : "enableMic" ===
                                                                  e.t0
                                                                ? 79
                                                                : "disableMic" ===
                                                                  e.t0
                                                                ? 81
                                                                : "enableWebcam" ===
                                                                  e.t0
                                                                ? 97
                                                                : "disableWebcam" ===
                                                                  e.t0
                                                                ? 99
                                                                : "pinStateChanged" ===
                                                                  e.t0
                                                                ? 115
                                                                : "switchRoom" ===
                                                                  e.t0
                                                                ? 138
                                                                : "statsData" ===
                                                                  e.t0
                                                                ? 141
                                                                : 144);
                                                          break;
                                                        case 4:
                                                          return (
                                                            r(),
                                                            v.close({
                                                              sendLeft: !0,
                                                            }),
                                                            e.abrupt(
                                                              "break",
                                                              144
                                                            )
                                                          );
                                                        case 7:
                                                          return (
                                                            (e.next = 9),
                                                            null ===
                                                              (a =
                                                                v._openTelemetry) ||
                                                            void 0 === a
                                                              ? void 0
                                                              : a.trace({
                                                                  spanName:
                                                                    "Protoo REQ: newConsumer",
                                                                  attributes: {
                                                                    request:
                                                                      JSON.stringify(
                                                                        t
                                                                      ),
                                                                  },
                                                                })
                                                          );
                                                        case 9:
                                                          if (
                                                            ((s = e.sent),
                                                            v._consume)
                                                          ) {
                                                            e.next = 14;
                                                            break;
                                                          }
                                                          return (
                                                            n(
                                                              403,
                                                              "I do not want to consume"
                                                            ),
                                                            null ===
                                                              (o =
                                                                v._openTelemetry) ||
                                                              void 0 === o ||
                                                              o.completeSpan({
                                                                span: s,
                                                                status: 2,
                                                                message:
                                                                  "I do not want to consume",
                                                              }),
                                                            e.abrupt(
                                                              "break",
                                                              144
                                                            )
                                                          );
                                                        case 14:
                                                          return (
                                                            (d = t.data),
                                                            (l = d.peerId),
                                                            (h = d.producerId),
                                                            (_ = d.id),
                                                            (f = d.kind),
                                                            (m =
                                                              d.rtpParameters),
                                                            (g = d.type),
                                                            (y = d.appData),
                                                            (b =
                                                              d.producerPaused),
                                                            (e.next = 17),
                                                            null ===
                                                              (i =
                                                                v._openTelemetry) ||
                                                            void 0 === i
                                                              ? void 0
                                                              : i.trace({
                                                                  spanName:
                                                                    "Creating Consumer",
                                                                  span: s,
                                                                })
                                                          );
                                                        case 17:
                                                          return (
                                                            (x = e.sent),
                                                            (e.prev = 18),
                                                            (e.next = 21),
                                                            v._recvTransport.consume(
                                                              {
                                                                id: _,
                                                                producerId: h,
                                                                kind: f,
                                                                rtpParameters:
                                                                  m,
                                                                appData: je(
                                                                  je({}, y),
                                                                  {},
                                                                  { peerId: l }
                                                                ),
                                                              }
                                                            )
                                                          );
                                                        case 21:
                                                          return (
                                                            (R = e.sent),
                                                            (P =
                                                              p.parseScalabilityMode(
                                                                R.rtpParameters
                                                                  .encodings[0]
                                                                  .scalabilityMode
                                                              )),
                                                            (O =
                                                              P.spatialLayers),
                                                            (k =
                                                              P.temporalLayers),
                                                            (R.spatialLayers =
                                                              O),
                                                            (R.temporalLayers =
                                                              k),
                                                            (R.currentSpatialLayers =
                                                              O - 1),
                                                            (R.currentTemporalLayers =
                                                              k - 1),
                                                            v._consumers.set(
                                                              R.id,
                                                              R
                                                            ),
                                                            R.on(
                                                              "transportclose",
                                                              function () {
                                                                v._consumers.delete(
                                                                  R.id
                                                                );
                                                                var e = Y(
                                                                  R.id,
                                                                  l
                                                                );
                                                                Be.dispatch(e),
                                                                  v._eventEmitter.emit(
                                                                    e.type,
                                                                    e.payload
                                                                  );
                                                              }
                                                            ),
                                                            null ===
                                                              (E =
                                                                v._openTelemetry) ||
                                                              void 0 === E ||
                                                              E.completeSpan({
                                                                span: x,
                                                                status: 1,
                                                                message:
                                                                  "Consumer Created",
                                                              }),
                                                            (e.next = 32),
                                                            null ===
                                                              (T =
                                                                v._openTelemetry) ||
                                                            void 0 === T
                                                              ? void 0
                                                              : T.trace({
                                                                  spanName:
                                                                    "Sending Stream Enabled Event",
                                                                  span: s,
                                                                })
                                                          );
                                                        case 32:
                                                          (x = e.sent),
                                                            (C = J(
                                                              {
                                                                id: R.id,
                                                                type: g,
                                                                locallyPaused:
                                                                  !1,
                                                                remotelyPaused:
                                                                  b,
                                                                rtpParameters:
                                                                  R.rtpParameters,
                                                                spatialLayers:
                                                                  O,
                                                                temporalLayers:
                                                                  k,
                                                                currentSpatialLayer:
                                                                  O - 1,
                                                                currentTemporalLayer:
                                                                  k - 1,
                                                                preferredSpatialLayer:
                                                                  O - 1,
                                                                preferredTemporalLayer:
                                                                  k - 1,
                                                                priority: 1,
                                                                codec:
                                                                  R.rtpParameters.codecs[0].mimeType.split(
                                                                    "/"
                                                                  )[1],
                                                                track: R.track,
                                                                appData: y,
                                                                instance: R,
                                                              },
                                                              l
                                                            )),
                                                            Be.dispatch(C),
                                                            v._eventEmitter.emit(
                                                              C.type,
                                                              C.payload
                                                            ),
                                                            r(),
                                                            "video" ===
                                                              R.kind &&
                                                              Be.getState().me
                                                                .audioOnly &&
                                                              v._pauseConsumer(
                                                                R
                                                              ),
                                                            null ===
                                                              (S =
                                                                v._openTelemetry) ||
                                                              void 0 === S ||
                                                              S.completeSpan({
                                                                span: x,
                                                                status: 1,
                                                                message:
                                                                  "Event Send Successfully",
                                                              }),
                                                            null == s ||
                                                              s.setAttributes(
                                                                (0, c.Z)(
                                                                  {},
                                                                  "consumer.consumerId",
                                                                  R.id
                                                                )
                                                              ),
                                                            null ===
                                                              (w =
                                                                v._openTelemetry) ||
                                                              void 0 === w ||
                                                              w.completeSpan({
                                                                span: s,
                                                                status: 1,
                                                                message:
                                                                  "New Consumer Created Successfully",
                                                              }),
                                                            "video" == R.kind &&
                                                              R.appData.share &&
                                                              (null ===
                                                                (I =
                                                                  v._openTelemetry) ||
                                                                void 0 === I ||
                                                                I.traceAutoComplete(
                                                                  {
                                                                    spanName:
                                                                      "Presenter Changed",
                                                                    attributes:
                                                                      {
                                                                        "peer.id":
                                                                          l,
                                                                      },
                                                                  }
                                                                )),
                                                            (e.next = 51);
                                                          break;
                                                        case 44:
                                                          throw (
                                                            ((e.prev = 44),
                                                            (e.t1 =
                                                              e.catch(18)),
                                                            null ===
                                                              (L =
                                                                v._openTelemetry) ||
                                                              void 0 === L ||
                                                              L.completeSpan({
                                                                span: x,
                                                                status: 2,
                                                                message:
                                                                  "Error creating a Consumer: ".concat(
                                                                    e.t1
                                                                  ),
                                                              }),
                                                            null ===
                                                              (D =
                                                                v._openTelemetry) ||
                                                              void 0 === D ||
                                                              D.completeSpan({
                                                                span: s,
                                                                status: 2,
                                                                message:
                                                                  "Error creating a Consumer: ".concat(
                                                                    e.t1
                                                                  ),
                                                              }),
                                                            Be.dispatch(
                                                              oe({
                                                                type: "error",
                                                                text: "Error creating a Consumer: ".concat(
                                                                  e.t1
                                                                ),
                                                              })
                                                            ),
                                                            null ===
                                                              (A =
                                                                v._videosdkLogs) ||
                                                              void 0 === A ||
                                                              A.pushLogs({
                                                                logText:
                                                                  "Error creating a Consumer",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t1
                                                                      .message,
                                                                },
                                                              }),
                                                            e.t1)
                                                          );
                                                        case 51:
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 52:
                                                          if (v._consume) {
                                                            e.next = 55;
                                                            break;
                                                          }
                                                          return (
                                                            n(
                                                              403,
                                                              "I do not want to data consume"
                                                            ),
                                                            e.abrupt(
                                                              "break",
                                                              144
                                                            )
                                                          );
                                                        case 55:
                                                          if (
                                                            v._useDataChannel
                                                          ) {
                                                            e.next = 58;
                                                            break;
                                                          }
                                                          return (
                                                            n(
                                                              403,
                                                              "I do not want DataChannels"
                                                            ),
                                                            e.abrupt(
                                                              "break",
                                                              144
                                                            )
                                                          );
                                                        case 58:
                                                          return (
                                                            (M = t.data),
                                                            (N = M.peerId),
                                                            (j =
                                                              M.dataProducerId),
                                                            (B = M.id),
                                                            (U =
                                                              M.sctpStreamParameters),
                                                            (F = M.label),
                                                            (G = M.protocol),
                                                            (V = M.appData),
                                                            (e.prev = 59),
                                                            (e.next = 62),
                                                            v._recvTransport.consumeData(
                                                              {
                                                                id: B,
                                                                dataProducerId:
                                                                  j,
                                                                sctpStreamParameters:
                                                                  U,
                                                                label: F,
                                                                protocol: G,
                                                                appData: je(
                                                                  je({}, V),
                                                                  {},
                                                                  { peerId: N }
                                                                ),
                                                              }
                                                            )
                                                          );
                                                        case 62:
                                                          (Z = e.sent),
                                                            v._dataConsumers.set(
                                                              Z.id,
                                                              Z
                                                            ),
                                                            Z.on(
                                                              "transportclose",
                                                              function () {
                                                                v._dataConsumers.delete(
                                                                  Z.id
                                                                );
                                                              }
                                                            ),
                                                            Z.on(
                                                              "open",
                                                              function () {
                                                                We.debug(
                                                                  'DataConsumer "open" event'
                                                                );
                                                              }
                                                            ),
                                                            Z.on(
                                                              "close",
                                                              function () {
                                                                We.warn(
                                                                  'DataConsumer "close" event'
                                                                ),
                                                                  v._dataConsumers.delete(
                                                                    Z.id
                                                                  ),
                                                                  Be.dispatch(
                                                                    oe({
                                                                      type: "error",
                                                                      text: "DataConsumer closed",
                                                                    })
                                                                  );
                                                              }
                                                            ),
                                                            Z.on(
                                                              "error",
                                                              function (e) {
                                                                We.error(
                                                                  'DataConsumer "error" event:%o',
                                                                  e
                                                                ),
                                                                  Be.dispatch(
                                                                    oe({
                                                                      type: "error",
                                                                      text: "DataConsumer error: ".concat(
                                                                        e
                                                                      ),
                                                                    })
                                                                  );
                                                              }
                                                            ),
                                                            Z.on(
                                                              "message",
                                                              function (e) {
                                                                if (
                                                                  (We.debug(
                                                                    'DataConsumer "message" event [streamId:%d]',
                                                                    Z
                                                                      .sctpStreamParameters
                                                                      .streamId
                                                                  ),
                                                                  (window.DC_MESSAGE =
                                                                    e),
                                                                  e instanceof
                                                                    ArrayBuffer)
                                                                ) {
                                                                  var t =
                                                                    new DataView(
                                                                      e
                                                                    ).getUint32();
                                                                  return t ==
                                                                    Math.pow(
                                                                      2,
                                                                      32
                                                                    ) -
                                                                      1
                                                                    ? (We.warn(
                                                                        "dataChannelTest finished!"
                                                                      ),
                                                                      void (v._nextDataChannelTestNumber = 0))
                                                                    : (t >
                                                                        v._nextDataChannelTestNumber &&
                                                                        We.warn(
                                                                          "dataChannelTest: %s packets missing",
                                                                          t -
                                                                            v._nextDataChannelTestNumber
                                                                        ),
                                                                      void (v._nextDataChannelTestNumber =
                                                                        t + 1));
                                                                }
                                                                if (
                                                                  "string" ==
                                                                  typeof e
                                                                )
                                                                  switch (
                                                                    Z.label
                                                                  ) {
                                                                    case "chat":
                                                                      var r =
                                                                          Be.getState()
                                                                            .peers,
                                                                        n =
                                                                          Object.keys(
                                                                            r
                                                                          )
                                                                            .map(
                                                                              function (
                                                                                e
                                                                              ) {
                                                                                return r[
                                                                                  e
                                                                                ];
                                                                              }
                                                                            )
                                                                            .find(
                                                                              function (
                                                                                e
                                                                              ) {
                                                                                return e.dataConsumers.includes(
                                                                                  Z.id
                                                                                );
                                                                              }
                                                                            );
                                                                      if (!n) {
                                                                        We.warn(
                                                                          'DataConsumer "message" from unknown peer'
                                                                        );
                                                                        break;
                                                                      }
                                                                      Be.dispatch(
                                                                        oe({
                                                                          title:
                                                                            "".concat(
                                                                              n.displayName,
                                                                              " says:"
                                                                            ),
                                                                          text: e,
                                                                          timeout: 5e3,
                                                                        })
                                                                      ),
                                                                        v._eventEmitter.emit(
                                                                          "CHAT_MESSAGE",
                                                                          {
                                                                            text: e,
                                                                            senderId:
                                                                              n.id,
                                                                            timestamp:
                                                                              new Date().getTime(),
                                                                          }
                                                                        );
                                                                      break;
                                                                    case "bot":
                                                                      Be.dispatch(
                                                                        oe({
                                                                          title:
                                                                            "Message from Bot:",
                                                                          text: e,
                                                                          timeout: 5e3,
                                                                        })
                                                                      );
                                                                  }
                                                                else
                                                                  We.warn(
                                                                    'ignoring DataConsumer "message" (not a string)'
                                                                  );
                                                              }
                                                            ),
                                                            (window.DC = Z),
                                                            Be.dispatch(
                                                              ie(
                                                                {
                                                                  id: Z.id,
                                                                  sctpStreamParameters:
                                                                    Z.sctpStreamParameters,
                                                                  label:
                                                                    Z.label,
                                                                  protocol:
                                                                    Z.protocol,
                                                                },
                                                                N
                                                              )
                                                            ),
                                                            r(),
                                                            (e.next = 78);
                                                          break;
                                                        case 74:
                                                          (e.prev = 74),
                                                            (e.t2 =
                                                              e.catch(59)),
                                                            We.error(
                                                              '"newDataConsumer" request failed:%o',
                                                              e.t2
                                                            ),
                                                            Be.dispatch(
                                                              oe({
                                                                type: "error",
                                                                text: "Error creating a DataConsumer: ".concat(
                                                                  e.t2
                                                                ),
                                                              })
                                                            );
                                                        case 78:
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 79:
                                                          try {
                                                            (W = t.data.peerId),
                                                              null ===
                                                                (H =
                                                                  v._openTelemetry) ||
                                                                void 0 === H ||
                                                                H.traceAutoComplete(
                                                                  {
                                                                    spanName:
                                                                      "Emitting MIC_REQUESTED & Protoo REQ: enableMic",
                                                                    attributes:
                                                                      {
                                                                        peerId:
                                                                          W,
                                                                      },
                                                                    status: 1,
                                                                  }
                                                                ),
                                                              v._eventEmitter.emit(
                                                                "MIC_REQUESTED",
                                                                { peerId: W }
                                                              ),
                                                              r();
                                                          } catch (e) {
                                                            We.error(
                                                              '"enableMic" request failed:%o',
                                                              e
                                                            ),
                                                              null ===
                                                                (z =
                                                                  v._videosdkLogs) ||
                                                                void 0 === z ||
                                                                z.pushLogs({
                                                                  logText:
                                                                    "Error enableMic request failed",
                                                                  logType:
                                                                    "ERROR",
                                                                  attributes: {
                                                                    error:
                                                                      e.message,
                                                                  },
                                                                }),
                                                              v._emitError({
                                                                code: 3027,
                                                                message:
                                                                  e.message,
                                                              });
                                                          }
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 81:
                                                          return (
                                                            (e.prev = 81),
                                                            (e.next = 84),
                                                            null ===
                                                              (X =
                                                                v._openTelemetry) ||
                                                            void 0 === X
                                                              ? void 0
                                                              : X.trace({
                                                                  spanName:
                                                                    "Protoo REQ: disableMic",
                                                                })
                                                          );
                                                        case 84:
                                                          return (
                                                            (K = e.sent),
                                                            (e.next = 87),
                                                            v.disableMic(!1, K)
                                                          );
                                                        case 87:
                                                          null ===
                                                            (q =
                                                              v._openTelemetry) ||
                                                            void 0 === q ||
                                                            q.completeSpan({
                                                              span: K,
                                                              status: 1,
                                                              message:
                                                                "Request Completed",
                                                            }),
                                                            r(),
                                                            (e.next = 96);
                                                          break;
                                                        case 91:
                                                          (e.prev = 91),
                                                            (e.t3 =
                                                              e.catch(81)),
                                                            null ===
                                                              ($ =
                                                                v._openTelemetry) ||
                                                              void 0 === $ ||
                                                              $.completeSpan({
                                                                span: K,
                                                                status: 2,
                                                                message:
                                                                  "disableMic request failed ".concat(
                                                                    e.t3
                                                                  ),
                                                              }),
                                                            null ===
                                                              (Q =
                                                                v._videosdkLogs) ||
                                                              void 0 === Q ||
                                                              Q.pushLogs({
                                                                logText:
                                                                  "Error disableMic request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t3
                                                                      .message,
                                                                },
                                                              }),
                                                            v._emitError({
                                                              code: 3028,
                                                              message:
                                                                e.t3.message,
                                                            });
                                                        case 96:
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 97:
                                                          try {
                                                            (te =
                                                              t.data.peerId),
                                                              null ===
                                                                (ee =
                                                                  v._openTelemetry) ||
                                                                void 0 === ee ||
                                                                ee.traceAutoComplete(
                                                                  {
                                                                    spanName:
                                                                      "Emitting WEBCAM_REQUESTED & Protoo REQ: enableWebcam",
                                                                    attributes:
                                                                      {
                                                                        peerId:
                                                                          te,
                                                                      },
                                                                    status: 1,
                                                                  }
                                                                ),
                                                              v._eventEmitter.emit(
                                                                "WEBCAM_REQUESTED",
                                                                { peerId: te }
                                                              ),
                                                              r();
                                                          } catch (e) {
                                                            We.error(
                                                              '"enableWebcam" request failed:%o',
                                                              e
                                                            ),
                                                              null ===
                                                                (re =
                                                                  v._videosdkLogs) ||
                                                                void 0 === re ||
                                                                re.pushLogs({
                                                                  logText:
                                                                    "Error enableWebcam request failed",
                                                                  logType:
                                                                    "ERROR",
                                                                  attributes: {
                                                                    error:
                                                                      e.message,
                                                                  },
                                                                }),
                                                              v._emitError({
                                                                code: 3029,
                                                                message:
                                                                  e.message,
                                                              });
                                                          }
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 99:
                                                          return (
                                                            (e.prev = 99),
                                                            (e.next = 102),
                                                            null ===
                                                              (ae =
                                                                v._openTelemetry) ||
                                                            void 0 === ae
                                                              ? void 0
                                                              : ae.trace({
                                                                  spanName:
                                                                    "Protoo REQ: disableWebcam",
                                                                })
                                                          );
                                                        case 102:
                                                          return (
                                                            (ne = e.sent),
                                                            (e.next = 105),
                                                            v.disableWebcam(ne)
                                                          );
                                                        case 105:
                                                          null ===
                                                            (se =
                                                              v._openTelemetry) ||
                                                            void 0 === se ||
                                                            se.completeSpan({
                                                              span: ne,
                                                              status: 1,
                                                              message:
                                                                "Request Completed",
                                                            }),
                                                            r(),
                                                            (e.next = 114);
                                                          break;
                                                        case 109:
                                                          (e.prev = 109),
                                                            (e.t4 =
                                                              e.catch(99)),
                                                            null ===
                                                              (ce =
                                                                v._openTelemetry) ||
                                                              void 0 === ce ||
                                                              ce.completeSpan({
                                                                span: ne,
                                                                status: 2,
                                                                message:
                                                                  "disableWebcam request failed ".concat(
                                                                    e.t4
                                                                  ),
                                                              }),
                                                            null ===
                                                              (de =
                                                                v._videosdkLogs) ||
                                                              void 0 === de ||
                                                              de.pushLogs({
                                                                logText:
                                                                  "Error disableWebcam request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t4
                                                                      .message,
                                                                },
                                                              }),
                                                            v._emitError({
                                                              code: 3030,
                                                              message:
                                                                e.t4.message,
                                                            });
                                                        case 114:
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 115:
                                                          return (
                                                            (e.prev = 115),
                                                            (he = t.data),
                                                            (_e = he.peerId),
                                                            (fe = he.state),
                                                            (me = he.pinnedBy),
                                                            (e.next = 119),
                                                            null ===
                                                              (le =
                                                                v._openTelemetry) ||
                                                            void 0 === le
                                                              ? void 0
                                                              : le.trace({
                                                                  spanName:
                                                                    "Protoo REQ: pinStateChanged",
                                                                  attributes: {
                                                                    requestData:
                                                                      JSON.stringify(
                                                                        {
                                                                          peerId:
                                                                            _e,
                                                                          state:
                                                                            fe,
                                                                          pinnedBy:
                                                                            me,
                                                                        }
                                                                      ),
                                                                  },
                                                                })
                                                          );
                                                        case 119:
                                                          (ue = e.sent),
                                                            v._pinnedParticipants.has(
                                                              _e
                                                            ) ||
                                                              v._pinnedParticipants.set(
                                                                _e,
                                                                {
                                                                  cam: !1,
                                                                  share: !1,
                                                                }
                                                              ),
                                                            (ve =
                                                              v._pinnedParticipants.get(
                                                                _e
                                                              )),
                                                            null != fe.cam &&
                                                              (ve.cam = fe.cam),
                                                            null != fe.share &&
                                                              (ve.share =
                                                                fe.share),
                                                            v._pinnedParticipants.set(
                                                              _e,
                                                              ve
                                                            ),
                                                            v._eventEmitter.emit(
                                                              "PIN_STATE_CHANGED",
                                                              {
                                                                peerId: _e,
                                                                state: fe,
                                                                pinnedBy: me,
                                                              }
                                                            ),
                                                            0 == ve.share &&
                                                              0 == ve.cam &&
                                                              v._pinnedParticipants.delete(
                                                                _e
                                                              ),
                                                            ue.setAttributes({
                                                              _pinnedParticipants:
                                                                JSON.stringify(
                                                                  v._pinnedParticipants
                                                                ),
                                                            }),
                                                            null ===
                                                              (pe =
                                                                v._openTelemetry) ||
                                                              void 0 === pe ||
                                                              pe.completeSpan({
                                                                span: ue,
                                                                status: 1,
                                                                message:
                                                                  "Request Completed",
                                                              }),
                                                            r(),
                                                            (e.next = 137);
                                                          break;
                                                        case 132:
                                                          throw (
                                                            ((e.prev = 132),
                                                            (e.t5 =
                                                              e.catch(115)),
                                                            null ===
                                                              (ge =
                                                                v._openTelemetry) ||
                                                              void 0 === ge ||
                                                              ge.completeSpan({
                                                                span: ue,
                                                                status: 2,
                                                                message:
                                                                  "pinStateChanged request failed",
                                                              }),
                                                            null ===
                                                              (ye =
                                                                v._videosdkLogs) ||
                                                              void 0 === ye ||
                                                              ye.pushLogs({
                                                                logText:
                                                                  "Error pinStateChanged request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t5
                                                                      .message,
                                                                },
                                                              }),
                                                            e.t5)
                                                          );
                                                        case 137:
                                                          return e.abrupt(
                                                            "break",
                                                            144
                                                          );
                                                        case 138:
                                                          return (
                                                            v._eventEmitter.emit(
                                                              "SWITCH_ROOM",
                                                              t.data
                                                            ),
                                                            r(),
                                                            e.abrupt(
                                                              "break",
                                                              144
                                                            )
                                                          );
                                                        case 141:
                                                          return (
                                                            r({
                                                              peerId: v._peerId,
                                                              statsData:
                                                                v._stats,
                                                            }),
                                                            (v._stats = {}),
                                                            e.abrupt(
                                                              "break",
                                                              144
                                                            )
                                                          );
                                                        case 144:
                                                        case "end":
                                                          return e.stop();
                                                      }
                                                  },
                                                  e,
                                                  null,
                                                  [
                                                    [18, 44],
                                                    [59, 74],
                                                    [81, 91],
                                                    [99, 109],
                                                    [115, 132],
                                                  ]
                                                );
                                              })
                                            );
                                            return function (t, r, n) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        ),
                                        this._protoo.on(
                                          "notification",
                                          (function () {
                                            var e = (0, i.Z)(
                                              u().mark(function e(t) {
                                                var r,
                                                  n,
                                                  a,
                                                  i,
                                                  s,
                                                  o,
                                                  c,
                                                  d,
                                                  l,
                                                  p,
                                                  h,
                                                  _,
                                                  f,
                                                  m,
                                                  g,
                                                  y,
                                                  b,
                                                  x,
                                                  E,
                                                  T,
                                                  S,
                                                  w,
                                                  R,
                                                  P,
                                                  O,
                                                  k,
                                                  C,
                                                  I,
                                                  D,
                                                  A,
                                                  M,
                                                  N,
                                                  j,
                                                  B,
                                                  U,
                                                  F,
                                                  G,
                                                  V,
                                                  Z,
                                                  W,
                                                  z,
                                                  K,
                                                  J,
                                                  re,
                                                  ne,
                                                  ie,
                                                  ce,
                                                  de,
                                                  ue,
                                                  le,
                                                  pe,
                                                  he,
                                                  _e,
                                                  fe,
                                                  me,
                                                  ve,
                                                  ge,
                                                  ye,
                                                  be,
                                                  xe,
                                                  Ee,
                                                  Te,
                                                  Se,
                                                  we,
                                                  Re,
                                                  Pe,
                                                  Oe,
                                                  Ce,
                                                  Ie,
                                                  Le,
                                                  De,
                                                  Ae,
                                                  Me,
                                                  Ne,
                                                  Ue;
                                                return u().wrap(function (e) {
                                                  for (;;)
                                                    switch ((e.prev = e.next)) {
                                                      case 0:
                                                        We.debug(
                                                          'proto "notification" event [method:%s, data:%o]',
                                                          t.method,
                                                          t.data
                                                        ),
                                                          (e.t0 = t.method),
                                                          (e.next =
                                                            "error" === e.t0
                                                              ? 4
                                                              : "participantMediaStateChanged" ===
                                                                e.t0
                                                              ? 9
                                                              : "producerScore" ===
                                                                e.t0
                                                              ? 10
                                                              : "entryRequested" ===
                                                                e.t0
                                                              ? 13
                                                              : "entryResponded" ===
                                                                e.t0
                                                              ? 19
                                                              : "newPeer" ===
                                                                e.t0
                                                              ? 27
                                                              : "peerClosed" ===
                                                                e.t0
                                                              ? 34
                                                              : "peerDisplayNameChanged" ===
                                                                e.t0
                                                              ? 40
                                                              : "downlinkBwe" ===
                                                                e.t0
                                                              ? 44
                                                              : "consumerClosed" ===
                                                                e.t0
                                                              ? 46
                                                              : "consumerPaused" ===
                                                                e.t0
                                                              ? 58
                                                              : "consumerResumed" ===
                                                                e.t0
                                                              ? 65
                                                              : "consumerLayersChanged" ===
                                                                e.t0
                                                              ? 72
                                                              : "consumerScore" ===
                                                                e.t0
                                                              ? 83
                                                              : "dataConsumerClosed" ===
                                                                e.t0
                                                              ? 86
                                                              : "activeSpeaker" ===
                                                                e.t0
                                                              ? 95
                                                              : "recordingStateChanged" ===
                                                                e.t0
                                                              ? 100
                                                              : "recordingStarted" ===
                                                                e.t0
                                                              ? 103
                                                              : "recordingStopped" ===
                                                                e.t0
                                                              ? 105
                                                              : "livestreamStateChanged" ===
                                                                e.t0
                                                              ? 107
                                                              : "livestreamStarted" ===
                                                                e.t0
                                                              ? 110
                                                              : "livestreamStopped" ===
                                                                e.t0
                                                              ? 112
                                                              : "hlsStateChanged" ===
                                                                e.t0
                                                              ? 114
                                                              : "hlsPlayableStateChanged" ===
                                                                e.t0
                                                              ? 117
                                                              : "hlsStarted" ===
                                                                e.t0
                                                              ? 119
                                                              : "hlsStopped" ===
                                                                e.t0
                                                              ? 122
                                                              : "whiteboardStarted" ===
                                                                e.t0
                                                              ? 124
                                                              : "whiteboardStopped" ===
                                                                e.t0
                                                              ? 127
                                                              : "videoStatusChanged" ===
                                                                e.t0
                                                              ? 129
                                                              : "videoSeeked" ===
                                                                e.t0
                                                              ? 131
                                                              : "connectionOpen" ===
                                                                e.t0
                                                              ? 134
                                                              : "connectionClose" ===
                                                                e.t0
                                                              ? 136
                                                              : "connectionChatMessage" ===
                                                                e.t0
                                                              ? 138
                                                              : "connectionParticipantJoined" ===
                                                                e.t0
                                                              ? 140
                                                              : "connectionParticipantLeft" ===
                                                                e.t0
                                                              ? 142
                                                              : "pubsubMessage" ===
                                                                e.t0
                                                              ? 144
                                                              : "peerModeChanged" ===
                                                                e.t0
                                                              ? 146
                                                              : "restartIce" ===
                                                                e.t0
                                                              ? 149
                                                              : 155);
                                                        break;
                                                      case 4:
                                                        return (
                                                          (a = t.data),
                                                          v._eventEmitter.emit(
                                                            "ERROR",
                                                            a
                                                          ),
                                                          null ===
                                                            (r =
                                                              v._videosdkLogs) ||
                                                            void 0 === r ||
                                                            r.pushLogs({
                                                              logText:
                                                                "Error in Meeting Session",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  a.message,
                                                              },
                                                            }),
                                                          null ===
                                                            (n =
                                                              v._openTelemetry) ||
                                                            void 0 === n ||
                                                            n.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted `ERROR` Event",
                                                                attributes: {
                                                                  error:
                                                                    a.message,
                                                                },
                                                                status: 2,
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 9:
                                                        try {
                                                          (i = t.data),
                                                            (s = i.peerId),
                                                            (o = i.kind),
                                                            (c = i.newState),
                                                            v._eventEmitter.emit(
                                                              "PARTICIPANT_MEDIA_STATE_CHANGED",
                                                              {
                                                                peerId: s,
                                                                kind: o,
                                                                newState: c,
                                                              }
                                                            ),
                                                            "video" == o &&
                                                              (null ===
                                                                (d =
                                                                  v._openTelemetry) ||
                                                                void 0 === d ||
                                                                d.traceAutoComplete(
                                                                  {
                                                                    spanName: ""
                                                                      .concat(
                                                                        s,
                                                                        " has "
                                                                      )
                                                                      .concat(
                                                                        c
                                                                          ? "enable"
                                                                          : "disable",
                                                                        " "
                                                                      )
                                                                      .concat(
                                                                        o
                                                                      ),
                                                                    status: 1,
                                                                  }
                                                                ));
                                                        } catch (e) {
                                                          We.error(
                                                            '"newProducer" request failed:%o',
                                                            e
                                                          ),
                                                            null ===
                                                              (l =
                                                                v._videosdkLogs) ||
                                                              void 0 === l ||
                                                              l.pushLogs({
                                                                logText:
                                                                  "Error newProducer request failed",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.message,
                                                                },
                                                              });
                                                        }
                                                      case 10:
                                                        return (
                                                          (p = t.data),
                                                          (h = p.producerId),
                                                          (_ = p.score),
                                                          Be.dispatch(H(h, _)),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 13:
                                                        return (
                                                          (m = t.data),
                                                          (g = m.id),
                                                          (y = m.name),
                                                          (e.next = 16),
                                                          null ===
                                                            (f =
                                                              v._openTelemetry) ||
                                                          void 0 === f
                                                            ? void 0
                                                            : f.trace({
                                                                spanName:
                                                                  "Protoo Noti: entryRequested",
                                                                span: v._joinSpan,
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    {
                                                                      id: g,
                                                                      name: y,
                                                                    }
                                                                  ),
                                                                },
                                                              })
                                                        );
                                                      case 16:
                                                        return (
                                                          (b = e.sent),
                                                          g !== v._peerId
                                                            ? (v._eventEmitter.emit(
                                                                "ENTRY_REQUESTED",
                                                                {
                                                                  id: g,
                                                                  name: y,
                                                                }
                                                              ),
                                                              null ===
                                                                (x =
                                                                  v._openTelemetry) ||
                                                                void 0 === x ||
                                                                x.completeSpan({
                                                                  span: b,
                                                                  status: 1,
                                                                  message:
                                                                    "EntryResponded Recieved",
                                                                }))
                                                            : null ===
                                                                (E =
                                                                  v._openTelemetry) ||
                                                              void 0 === E ||
                                                              E.completeSpan({
                                                                span: b,
                                                                status: 2,
                                                                message:
                                                                  "Entry Request Failed",
                                                              }),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 19:
                                                        return (
                                                          (S = t.data),
                                                          (w = S.id),
                                                          (R = S.decision),
                                                          (P = S.sessionId),
                                                          "react-native" !=
                                                            v._deviceInfo
                                                              .sdkType &&
                                                            v._tracesEnabled &&
                                                            v._joinSpan.setAttribute(
                                                              "sessionId",
                                                              P
                                                            ),
                                                          v._eventEmitter.emit(
                                                            "ENTRY_RESPONDED",
                                                            {
                                                              id: w,
                                                              decision: R,
                                                            }
                                                          ),
                                                          (e.next = 24),
                                                          null ===
                                                            (T =
                                                              v._openTelemetry) ||
                                                          void 0 === T
                                                            ? void 0
                                                            : T.trace({
                                                                spanName:
                                                                  "Protoo Noti: entryResponded",
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    {
                                                                      id: w,
                                                                      decision:
                                                                        R,
                                                                    }
                                                                  ),
                                                                },
                                                                span: v._joinSpan,
                                                              })
                                                        );
                                                      case 24:
                                                        return (
                                                          (O = e.sent),
                                                          w === v._peerId &&
                                                          "allowed" === R
                                                            ? (v.joinRoom(),
                                                              null ===
                                                                (k =
                                                                  v._openTelemetry) ||
                                                                void 0 === k ||
                                                                k.completeSpan({
                                                                  span: O,
                                                                  status: 1,
                                                                  message:
                                                                    "EntryResponded Recieved",
                                                                }))
                                                            : null ===
                                                                (C =
                                                                  v._openTelemetry) ||
                                                              void 0 === C ||
                                                              C.completeSpan({
                                                                span: v._joinSpan,
                                                                status: 2,
                                                                message:
                                                                  "Join Request Denied",
                                                              }),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 27:
                                                        (I = t.data),
                                                          (D = X(
                                                            je(
                                                              je({}, I),
                                                              {},
                                                              {
                                                                consumers: [],
                                                                dataConsumers:
                                                                  [],
                                                              }
                                                            )
                                                          )),
                                                          Be.dispatch(D),
                                                          v._eventEmitter.emit(
                                                            D.type,
                                                            D.payload
                                                          ),
                                                          Be.dispatch(
                                                            oe({
                                                              text: "".concat(
                                                                I.displayName,
                                                                " has joined the room"
                                                              ),
                                                            })
                                                          );
                                                        try {
                                                          null ===
                                                            (A =
                                                              v._openTelemetry) ||
                                                            void 0 === A ||
                                                            A.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: newPeer ".concat(
                                                                    I.displayName
                                                                  ),
                                                                attributes: {
                                                                  peerData:
                                                                    JSON.stringify(
                                                                      I
                                                                    ),
                                                                },
                                                              }
                                                            );
                                                        } catch (e) {
                                                          null ===
                                                            (M =
                                                              v._videosdkLogs) ||
                                                            void 0 === M ||
                                                            M.pushLogs({
                                                              logText:
                                                                "Error Protoo Noti: newPeer",
                                                              logType: "ERROR",
                                                              attributes: {
                                                                error:
                                                                  e.message,
                                                              },
                                                            }),
                                                            console.error(e);
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          156
                                                        );
                                                      case 34:
                                                        return (
                                                          (j = t.data.peerId),
                                                          (B = q(j)),
                                                          Be.dispatch(B),
                                                          v._eventEmitter.emit(
                                                            B.type,
                                                            B.payload
                                                          ),
                                                          null ===
                                                            (N =
                                                              v._openTelemetry) ||
                                                            void 0 === N ||
                                                            N.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: peerClosed for ".concat(
                                                                    j
                                                                  ),
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 40:
                                                        return (
                                                          (U = t.data),
                                                          (F = U.peerId),
                                                          (G = U.displayName),
                                                          (V =
                                                            U.oldDisplayName),
                                                          Be.dispatch($(G, F)),
                                                          Be.dispatch(
                                                            oe({
                                                              text: ""
                                                                .concat(
                                                                  V,
                                                                  " is now "
                                                                )
                                                                .concat(G),
                                                            })
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 44:
                                                        return (
                                                          We.debug(
                                                            "'downlinkBwe' event:%o",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 46:
                                                        if (
                                                          ((W =
                                                            t.data.consumerId),
                                                          (z =
                                                            v._consumers.get(
                                                              W
                                                            )))
                                                        ) {
                                                          e.next = 50;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          156
                                                        );
                                                      case 50:
                                                        return (
                                                          z.close(),
                                                          v._consumers.delete(
                                                            W
                                                          ),
                                                          (K =
                                                            z.appData.peerId),
                                                          (J = Y(W, K)),
                                                          Be.dispatch(J),
                                                          v._eventEmitter.emit(
                                                            J.type,
                                                            J.payload
                                                          ),
                                                          null ===
                                                            (Z =
                                                              v._openTelemetry) ||
                                                            void 0 === Z ||
                                                            Z.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Protoo Noti: consumerClosed for ".concat(
                                                                    W
                                                                  ),
                                                                attributes: {
                                                                  consumerData:
                                                                    JSON.stringify(
                                                                      z
                                                                    ),
                                                                },
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 58:
                                                        if (
                                                          ((re =
                                                            t.data.consumerId),
                                                          (ne =
                                                            v._consumers.get(
                                                              re
                                                            )))
                                                        ) {
                                                          e.next = 62;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          156
                                                        );
                                                      case 62:
                                                        return (
                                                          ne.pause(),
                                                          Be.dispatch(
                                                            Q(re, "remote")
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 65:
                                                        if (
                                                          ((ie =
                                                            t.data.consumerId),
                                                          (ce =
                                                            v._consumers.get(
                                                              ie
                                                            )))
                                                        ) {
                                                          e.next = 69;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          156
                                                        );
                                                      case 69:
                                                        return (
                                                          ce.resume(),
                                                          Be.dispatch(
                                                            ee(ie, "remote")
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 72:
                                                        if (
                                                          ((de = t.data),
                                                          (ue = de.consumerId),
                                                          (le =
                                                            de.spatialLayer),
                                                          (pe =
                                                            de.temporalLayer),
                                                          ((he =
                                                            v._consumers.get(
                                                              ue
                                                            )).currentSpatialLayer =
                                                            le),
                                                          (he.currentTemporalLayer =
                                                            pe),
                                                          he)
                                                        ) {
                                                          e.next = 78;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          156
                                                        );
                                                      case 78:
                                                        return (
                                                          he.appData.encodings
                                                            .length > 1
                                                            ? (v._eventEmitter.emit(
                                                                "VIDEO_QUALITY_CHANGED",
                                                                {
                                                                  peerId:
                                                                    he.appData
                                                                      .peerId,
                                                                  prevQuality:
                                                                    he.spatialLayers -
                                                                      1 -
                                                                      he.currentSpatialLayer ==
                                                                    0
                                                                      ? "HIGH"
                                                                      : he.spatialLayers -
                                                                          1 -
                                                                          he.currentSpatialLayer ==
                                                                        1
                                                                      ? "MEDIUM"
                                                                      : "LOW",
                                                                  currentQuality:
                                                                    he.spatialLayers -
                                                                      1 -
                                                                      le ==
                                                                    0
                                                                      ? "HIGH"
                                                                      : he.spatialLayers -
                                                                          1 -
                                                                          le ==
                                                                        1
                                                                      ? "MEDIUM"
                                                                      : "LOW",
                                                                }
                                                              ),
                                                              null ===
                                                                (_e =
                                                                  v._videosdkLogs) ||
                                                                void 0 === _e ||
                                                                _e.pushLogs({
                                                                  logText:
                                                                    "Consumer Peer "
                                                                      .concat(
                                                                        he
                                                                          .appData
                                                                          .peerId,
                                                                        " changed to "
                                                                      )
                                                                      .concat(
                                                                        he.spatialLayers -
                                                                          1 -
                                                                          le ==
                                                                          0
                                                                          ? "HIGH"
                                                                          : he.spatialLayers -
                                                                              1 -
                                                                              le ==
                                                                            1
                                                                          ? "MEDIUM"
                                                                          : "LOW",
                                                                        ", previous quality was "
                                                                      )
                                                                      .concat(
                                                                        he.spatialLayers -
                                                                          1 -
                                                                          he.currentSpatialLayer ==
                                                                          0
                                                                          ? "HIGH"
                                                                          : he.spatialLayers -
                                                                              1 -
                                                                              he.currentSpatialLayer ==
                                                                            1
                                                                          ? "MEDIUM"
                                                                          : "LOW"
                                                                      ),
                                                                  logType:
                                                                    "INFO",
                                                                  attributes: {
                                                                    consumerId:
                                                                      ue,
                                                                  },
                                                                }))
                                                            : (v._eventEmitter.emit(
                                                                "VIDEO_QUALITY_CHANGED",
                                                                {
                                                                  peerId:
                                                                    he.appData
                                                                      .peerId,
                                                                  prevQuality:
                                                                    "HIGH",
                                                                  currentQuality:
                                                                    "HIGH",
                                                                }
                                                              ),
                                                              null ===
                                                                (fe =
                                                                  v._videosdkLogs) ||
                                                                void 0 === fe ||
                                                                fe.pushLogs({
                                                                  logText:
                                                                    "Consumer Peer ".concat(
                                                                      he.appData
                                                                        .peerId,
                                                                      " changed to HIGH, previous quality was HIGH"
                                                                    ),
                                                                  logType:
                                                                    "INFO",
                                                                  attributes: {
                                                                    consumerId:
                                                                      ue,
                                                                  },
                                                                })),
                                                          (he.currentSpatialLayer =
                                                            le),
                                                          (he.currentTemporalLayer =
                                                            pe),
                                                          Be.dispatch(
                                                            te(ue, le, pe)
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 83:
                                                        return (
                                                          (me = t.data),
                                                          (ve = me.consumerId),
                                                          (ge = me.score),
                                                          Be.dispatch(
                                                            ae(ve, ge)
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 86:
                                                        if (
                                                          ((ye =
                                                            t.data
                                                              .dataConsumerId),
                                                          (be =
                                                            v._dataConsumers.get(
                                                              ye
                                                            )))
                                                        ) {
                                                          e.next = 90;
                                                          break;
                                                        }
                                                        return e.abrupt(
                                                          "break",
                                                          156
                                                        );
                                                      case 90:
                                                        return (
                                                          be.close(),
                                                          v._dataConsumers.delete(
                                                            ye
                                                          ),
                                                          (xe =
                                                            be.appData.peerId),
                                                          Be.dispatch(
                                                            se(ye, xe)
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 95:
                                                        return (
                                                          (Ee = t.data.peerId),
                                                          (Te = L(Ee)),
                                                          Be.dispatch(Te),
                                                          v._eventEmitter.emit(
                                                            Te.type,
                                                            Te.payload
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 100:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "RECORDING_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (Se =
                                                              v._openTelemetry) ||
                                                            void 0 === Se ||
                                                            Se.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted RECORDING_STATE_CHANGED, status : ".concat(
                                                                    t.data
                                                                      .status
                                                                  ),
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 103:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "RECORDING_STARTED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 105:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "RECORDING_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 107:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "LIVESTREAM_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (we =
                                                              v._openTelemetry) ||
                                                            void 0 === we ||
                                                            we.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted LIVESTREAM_STATE_CHANGED, status : ".concat(
                                                                    t.data
                                                                      .status
                                                                  ),
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 110:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "LIVESTREAM_STARTED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 112:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "LIVESTREAM_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 114:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "HLS_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (Re =
                                                              v._openTelemetry) ||
                                                            void 0 === Re ||
                                                            Re.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted HLS_STATE_CHANGED, status : ".concat(
                                                                    t.data
                                                                      .status
                                                                  ),
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 117:
                                                        return (
                                                          t.data.isPlayable &&
                                                            (v._eventEmitter.emit(
                                                              "HLS_STATE_CHANGED",
                                                              je(
                                                                je({}, t.data),
                                                                {},
                                                                {
                                                                  status:
                                                                    ke.o
                                                                      .HLS_PLAYABLE,
                                                                }
                                                              )
                                                            ),
                                                            null ===
                                                              (Pe =
                                                                v._openTelemetry) ||
                                                              void 0 === Pe ||
                                                              Pe.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "Protoo Noti: hlsPlayableStateChanged",
                                                                  status: 1,
                                                                }
                                                              )),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 119:
                                                        return (
                                                          (Oe =
                                                            t.data
                                                              .downstreamUrl),
                                                          v._eventEmitter.emit(
                                                            "HLS_STARTED",
                                                            Oe
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 122:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "HLS_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 124:
                                                        return (
                                                          (Ce = t.data.state),
                                                          v._eventEmitter.emit(
                                                            "WHITEBOARD_STARTED",
                                                            { state: Ce }
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 127:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "WHITEBOARD_STOPPED",
                                                            {}
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 129:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "VIDEO_STATE_CHANGED",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 131:
                                                        return (
                                                          (Ie =
                                                            t.data.currentTime),
                                                          v._eventEmitter.emit(
                                                            "VIDEO_SEEKED",
                                                            { currentTime: Ie }
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 134:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "CONNECTION_OPEN",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 136:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "CONNECTION_CLOSE",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 138:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "CONNECTION_CHAT_MESSAGE",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 140:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "CONNECTION_PARTICIPANT_JOIN",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 142:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "CONNECTION_PARTICIPANT_LEFT",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 144:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "PUBSUB_MESSAGE",
                                                            t.data
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 146:
                                                        return (
                                                          v._eventEmitter.emit(
                                                            "PEER_MODE_CHANGED",
                                                            t.data
                                                          ),
                                                          null ===
                                                            (Le =
                                                              v._openTelemetry) ||
                                                            void 0 === Le ||
                                                            Le.traceAutoComplete(
                                                              {
                                                                spanName:
                                                                  "Emitted PEER_MODE_CHANGED",
                                                                attributes: {
                                                                  data: JSON.stringify(
                                                                    t.data
                                                                  ),
                                                                },
                                                                status: 1,
                                                              }
                                                            ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 149:
                                                        return (
                                                          (Ae = t.data),
                                                          (Me = Ae.transportId),
                                                          (Ne =
                                                            Ae.iceParameters),
                                                          (e.next = 152),
                                                          null ===
                                                            (De =
                                                              v._openTelemetry) ||
                                                          void 0 === De
                                                            ? void 0
                                                            : De.trace({
                                                                spanName:
                                                                  "Protoo Noti: restartIce for transportId :".concat(
                                                                    Me
                                                                  ),
                                                                attributes: {
                                                                  iceParameters:
                                                                    JSON.stringify(
                                                                      Ne
                                                                    ),
                                                                },
                                                              })
                                                        );
                                                      case 152:
                                                        return (
                                                          (Ue = e.sent),
                                                          v.handleRemoteRestartIce(
                                                            {
                                                              transportId: Me,
                                                              iceParameters: Ne,
                                                              internalSpan: Ue,
                                                            }
                                                          ),
                                                          e.abrupt("break", 156)
                                                        );
                                                      case 155:
                                                        We.error(
                                                          'unknown protoo notification.method "%s"',
                                                          t.method
                                                        );
                                                      case 156:
                                                      case "end":
                                                        return e.stop();
                                                    }
                                                }, e);
                                              })
                                            );
                                            return function (t) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        );
                                    case 30:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return tr.apply(this, arguments);
                        }),
                    },
                    {
                      key: "requestEntry",
                      value:
                        ((er = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "Requesting Entry",
                                              span: this._joinSpan,
                                            })
                                      );
                                    case 2:
                                      return (
                                        (n = e.sent),
                                        (e.next = 5),
                                        this._protoo.request("requestEntry", {
                                          name: this._displayName,
                                        })
                                      );
                                    case 5:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message:
                                            "Entry Requested Successfully",
                                        });
                                    case 6:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return er.apply(this, arguments);
                        }),
                    },
                    {
                      key: "respondEntry",
                      value:
                        ((Qt = (0, i.Z)(
                          u().mark(function e(t, r) {
                            var n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName: "Responding Entry",
                                              attributes: {
                                                peerId: t,
                                                decision: r,
                                              },
                                              span: this._joinSpan,
                                            })
                                      );
                                    case 2:
                                      return (
                                        (i = e.sent),
                                        (e.next = 5),
                                        this._protoo.request("respondEntry", {
                                          id: t,
                                          decision: r,
                                        })
                                      );
                                    case 5:
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          message:
                                            "Entry Responded Successfully",
                                          span: i,
                                          status: 1,
                                        });
                                    case 6:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return Qt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startRecording",
                      value:
                        ((Yt = (0, i.Z)(
                          u().mark(function e(t, r, n) {
                            var a, i, s, o, c;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("startRecording()"),
                                        (e.next = 3),
                                        null === (a = this._openTelemetry) ||
                                        void 0 === a
                                          ? void 0
                                          : a.trace({
                                              spanName:
                                                "startRecording() Start",
                                              attributes: {
                                                webhookUrl:
                                                  t || "webhookUrl Not Specify",
                                                awsDirPath:
                                                  r || "awsDirPath Not Specify",
                                                config: n
                                                  ? JSON.stringify(n)
                                                  : "config Not Specify",
                                              },
                                            })
                                      );
                                    case 3:
                                      return (
                                        (s = e.sent),
                                        (e.prev = 4),
                                        (e.next = 7),
                                        this._protoo.request("startRecording", {
                                          webhookUrl: t,
                                          awsDirPath: r,
                                          config: n,
                                        })
                                      );
                                    case 7:
                                      e.next = 15;
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(4)),
                                        We.error(
                                          "startRecording() | failed:%o",
                                          e.t0
                                        ),
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: s,
                                            status: 2,
                                            message: "startRecording() failed",
                                          }),
                                        null === (c = this._videosdkLogs) ||
                                          void 0 === c ||
                                          c.pushLogs({
                                            logText:
                                              "Error startRecording() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        this._emitError({
                                          code: 3017,
                                          message: e.t0.message,
                                        });
                                    case 15:
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "startRecording() End",
                                        });
                                    case 16:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 9]]
                            );
                          })
                        )),
                        function (e, t, r) {
                          return Yt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopRecording",
                      value:
                        ((Jt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("stopRecording()"),
                                        (e.next = 3),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "stopRecording() Start",
                                            })
                                      );
                                    case 3:
                                      return (
                                        (n = e.sent),
                                        (e.prev = 4),
                                        (e.next = 7),
                                        this._protoo.request(
                                          "stopRecording",
                                          {}
                                        )
                                      );
                                    case 7:
                                      e.next = 14;
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(4)),
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "stopRecording() failed",
                                          }),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error stopRecording() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        this._emitError({
                                          code: 3018,
                                          message: e.t0.message,
                                        });
                                    case 14:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "stopRecording() End",
                                        });
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 9]]
                            );
                          })
                        )),
                        function () {
                          return Jt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startLivestream",
                      value:
                        (($t = (0, i.Z)(
                          u().mark(function e(t, r) {
                            var n, a, i, s, o;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("startLivestream()"),
                                        (e.next = 3),
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "startLivestream() Start",
                                              attributes: {
                                                outputs: t
                                                  ? JSON.stringify(t)
                                                  : "outputs Not Specify",
                                                config: r
                                                  ? JSON.stringify(r)
                                                  : "config Not Specify",
                                              },
                                            })
                                      );
                                    case 3:
                                      return (
                                        (i = e.sent),
                                        (e.prev = 4),
                                        (e.next = 7),
                                        this._protoo.request(
                                          "startLivestream",
                                          { outputs: t, config: r }
                                        )
                                      );
                                    case 7:
                                      e.next = 14;
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(4)),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "startLivestream() End",
                                          }),
                                        null === (o = this._videosdkLogs) ||
                                          void 0 === o ||
                                          o.pushLogs({
                                            logText:
                                              "Error startLivestream() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        this._emitError({
                                          code: 3019,
                                          message: e.t0.message,
                                        });
                                    case 14:
                                      null === (a = this._openTelemetry) ||
                                        void 0 === a ||
                                        a.completeSpan({
                                          span: i,
                                          status: 1,
                                          message: "startLivestream() End",
                                        });
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 9]]
                            );
                          })
                        )),
                        function (e, t) {
                          return $t.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopLivestream",
                      value:
                        ((qt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("stopLivestream()"),
                                        (e.next = 3),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "stopLivestream() Start",
                                            })
                                      );
                                    case 3:
                                      return (
                                        (n = e.sent),
                                        (e.prev = 4),
                                        (e.next = 7),
                                        this._protoo.request(
                                          "stopLivestream",
                                          {}
                                        )
                                      );
                                    case 7:
                                      e.next = 14;
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(4)),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText:
                                              "Error stopLivestream() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Error stopLivestream() failed",
                                          }),
                                        this._emitError({
                                          code: 3020,
                                          message: e.t0.message,
                                        });
                                    case 14:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "stopLivestream() End",
                                        });
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 9]]
                            );
                          })
                        )),
                        function () {
                          return qt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startHls",
                      value:
                        ((Xt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i, s;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (t = t || {}),
                                        We.debug("startHls()"),
                                        (e.next = 4),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "startHls() Start",
                                              attributes: {
                                                config: t
                                                  ? JSON.stringify(t)
                                                  : "config Not Specify",
                                              },
                                            })
                                      );
                                    case 4:
                                      return (
                                        (a = e.sent),
                                        (e.prev = 5),
                                        (e.next = 8),
                                        this._protoo.request("startHls", {
                                          config: t,
                                        })
                                      );
                                    case 8:
                                      e.next = 15;
                                      break;
                                    case 10:
                                      (e.prev = 10),
                                        (e.t0 = e.catch(5)),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText: "Error startHls() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: a,
                                            status: 2,
                                            message: "Error startHls() failed",
                                          }),
                                        We.error(
                                          "startHls() | failed:%o",
                                          e.t0
                                        );
                                    case 15:
                                      null === (n = this._openTelemetry) ||
                                        void 0 === n ||
                                        n.completeSpan({
                                          span: a,
                                          status: 1,
                                          message: "startHlsSpan() End",
                                        });
                                    case 16:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[5, 10]]
                            );
                          })
                        )),
                        function (e) {
                          return Xt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopHls",
                      value:
                        ((Kt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("stopHls()"),
                                        (e.next = 3),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "stopHls() Start",
                                            })
                                      );
                                    case 3:
                                      return (
                                        (n = e.sent),
                                        (e.prev = 4),
                                        (e.next = 7),
                                        this._protoo.request("stopHls", {})
                                      );
                                    case 7:
                                      e.next = 13;
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(4)),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText: "Error stopHls() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "Error stopHls() failed",
                                          });
                                    case 13:
                                      null === (r = this._openTelemetry) ||
                                        void 0 === r ||
                                        r.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "stopHls() End",
                                        });
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 9]]
                            );
                          })
                        )),
                        function () {
                          return Kt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startWhiteboard",
                      value:
                        ((zt = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("startWhiteboard()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "startWhiteboard",
                                          {}
                                        )
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "startWhiteboard() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3021,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function () {
                          return zt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopWhiteboard",
                      value:
                        ((Wt = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("stopWhiteboard()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "stopWhiteboard",
                                          {}
                                        )
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "stopWhiteboard() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3022,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function () {
                          return Wt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pinStateChange",
                      value:
                        ((Ht = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n = t.peerId),
                                        (a = t.state),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName:
                                              "Pin state Change for ".concat(n),
                                            attributes: {
                                              state: a
                                                ? JSON.stringify(a)
                                                : null,
                                            },
                                            status: 1,
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "pinStateChanged",
                                          { peerId: n, state: a }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error pinStateChange() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error("pinStateChange() | failed");
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Ht.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startVideo",
                      value:
                        ((Zt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n = t.link),
                                        We.debug("startVideo()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "startVideo() Calling",
                                            logType: "INFO",
                                          }),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("startVideo", {
                                          link: n,
                                        })
                                      );
                                    case 6:
                                      e.next = 13;
                                      break;
                                    case 8:
                                      (e.prev = 8),
                                        (e.t0 = e.catch(3)),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText:
                                              "Error startVideo() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "startVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3023,
                                          message: e.t0.message,
                                        });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 8]]
                            );
                          })
                        )),
                        function (e) {
                          return Zt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopVideo",
                      value:
                        ((Vt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("stopVideo()"),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText: "stopVideo() Calling",
                                            logType: "INFO",
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("stopVideo", {})
                                      );
                                    case 5:
                                      e.next = 12;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error stopVideo() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "stopVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3024,
                                          message: e.t0.message,
                                        });
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function () {
                          return Vt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pauseVideo",
                      value:
                        ((Gt = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("pauseVideo()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request("pauseVideo", {
                                          currentTime: t,
                                        })
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "pauseVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3025,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function (e) {
                          return Gt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "resumeVideo",
                      value:
                        ((Ft = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("resumeVideo()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request("resumeVideo", {})
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "resumeVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3026,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function () {
                          return Ft.apply(this, arguments);
                        }),
                    },
                    {
                      key: "seekVideo",
                      value:
                        ((Ut = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("seekVideo()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request("seekVideo", {
                                          currentTime: t,
                                        })
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "seekVideo() | failed:%o",
                                          e.t0
                                        ),
                                        this._emitError({
                                          code: 3031,
                                          message: e.t0.message,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 6]]
                            );
                          })
                        )),
                        function (e) {
                          return Ut.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enablePeerMic",
                      value:
                        ((Bt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Enabling peer ".concat(
                                              t,
                                              " Mic"
                                            ),
                                            status: 1,
                                          }),
                                        We.debug("enablePeerMic()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("enablePeerMic", {
                                          peerId: t,
                                        })
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error enablePeerMic() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "enablePeerMic() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Bt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disablePeerMic",
                      value:
                        ((jt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Disabling peer ".concat(
                                              t,
                                              " Mic"
                                            ),
                                            status: 1,
                                          }),
                                        We.debug("disablePeerMic()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("disablePeerMic", {
                                          peerId: t,
                                        })
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error disablePeerMic() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "disablePeerMic() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return jt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "consumeWebcamStreams",
                      value:
                        ((Nt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("consumeWebcamStreams()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "consumeWebcamStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "consumeVideoStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error consumeWebcamStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "consumeWebcamStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Nt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "consumeMicStreams",
                      value:
                        ((Mt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("consumeMicStreams()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "consumeMicStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "consumeAudioStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error consumeMicStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "consumeMicStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Mt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopConsumingMicStreams",
                      value:
                        ((At = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("stopConsumingAudioStreams()"),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error stopConsumingAudioStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "stopConsumingAudioStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error stopConsumingMicStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "stopConsumingMicStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return At.apply(this, arguments);
                        }),
                    },
                    {
                      key: "stopConsumingWebcamStreams",
                      value:
                        ((Dt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug(
                                          "stopConsumingWebcamStreams()"
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "stopConsumingWebcamStreams() Calling",
                                            logType: "INFO",
                                            attributes: { peerId: t },
                                          }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "stopConsumingVideoStreams",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error stopConsumingWebcamStreams() failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "stopConsumingWebcamStreams() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Dt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeMode",
                      value:
                        ((Lt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              d,
                              l,
                              h,
                              _,
                              f,
                              m,
                              v,
                              g,
                              y,
                              b,
                              x,
                              E,
                              T,
                              S,
                              w,
                              R,
                              P,
                              k,
                              C,
                              I,
                              L,
                              M = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "changeMode() Calling with mode : ".concat(
                                                  t
                                                ),
                                            })
                                      );
                                    case 2:
                                      if (
                                        ((n = e.sent),
                                        (a = this._mode),
                                        (e.prev = 4),
                                        a !== t)
                                      ) {
                                        e.next = 10;
                                        break;
                                      }
                                      throw (
                                        (n.setAttributes({
                                          message: "You are already in ".concat(
                                            t,
                                            " mode"
                                          ),
                                        }),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "changeMode() Ending",
                                          }),
                                        null === (s = this._videosdkLogs) ||
                                          void 0 === s ||
                                          s.pushLogs({
                                            logText:
                                              "You are already in ".concat(
                                                t,
                                                " mode"
                                              ),
                                            logType: "INFO",
                                          }),
                                        new Error(
                                          "You are already in ".concat(
                                            t,
                                            " mode"
                                          )
                                        ))
                                      );
                                    case 10:
                                      if (
                                        ((this._mode = t),
                                        t !== Oe.S.CONFERENCE)
                                      ) {
                                        e.next = 42;
                                        break;
                                      }
                                      return (
                                        (this._consume = !0),
                                        (this._produce = !0),
                                        (this._mediasoupDevice = new p.Device({
                                          handlerName: this._handlerName,
                                        })),
                                        (e.next = 17),
                                        this._protoo.request(
                                          "getRouterRtpCapabilities"
                                        )
                                      );
                                    case 17:
                                      return (
                                        (l = e.sent),
                                        null == n ||
                                          n.setAttributes(
                                            (0, c.Z)(
                                              {},
                                              "routerRtpCapabilities",
                                              JSON.stringify(l).toString()
                                            )
                                          ),
                                        (e.next = 21),
                                        this._mediasoupDevice.load({
                                          routerRtpCapabilities: l,
                                        })
                                      );
                                    case 21:
                                      if (!this._produce) {
                                        e.next = 26;
                                        break;
                                      }
                                      return (
                                        (e.next = 24),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !0,
                                            consuming: !1,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 24:
                                      (h = e.sent),
                                        this.createProducerTransport(h, n);
                                    case 26:
                                      if (!this._consume) {
                                        e.next = 33;
                                        break;
                                      }
                                      return (
                                        (e.next = 29),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !1,
                                            consuming: !0,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 29:
                                      (_ = e.sent),
                                        (f = _.id),
                                        (m = _.iceParameters),
                                        (v = _.iceCandidates),
                                        (g = _.dtlsParameters),
                                        (y = _.sctpParameters),
                                        (this._recvTransport =
                                          this._mediasoupDevice.createRecvTransport(
                                            {
                                              id: f,
                                              iceParameters: m,
                                              iceCandidates: v,
                                              dtlsParameters: g,
                                              sctpParameters: y,
                                              iceServers: this._iceServers,
                                            }
                                          )),
                                        this._recvTransport.on(
                                          "connect",
                                          function (e, t, r) {
                                            var n = e.dtlsParameters;
                                            M._protoo
                                              .request(
                                                "connectWebRtcTransport",
                                                {
                                                  transportId:
                                                    M._recvTransport.id,
                                                  dtlsParameters: n,
                                                }
                                              )
                                              .then(t)
                                              .catch(r);
                                          }
                                        );
                                    case 33:
                                      return (
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.traceAutoComplete({
                                            spanName:
                                              "Sending changeMode request to server",
                                            status: 1,
                                          }),
                                        (e.next = 36),
                                        this._protoo.request("changeMode", {
                                          mode: t,
                                        })
                                      );
                                    case 36:
                                      this._produce &&
                                        (Be.dispatch(
                                          A({
                                            canSendMic:
                                              this._mediasoupDevice.canProduce(
                                                "audio"
                                              ),
                                            canSendWebcam:
                                              this._mediasoupDevice.canProduce(
                                                "video"
                                              ),
                                          })
                                        ),
                                        this._micEnabled &&
                                          this.enableMic(
                                            this.customMicrophoneAudioTrack
                                          ),
                                        (b = O()),
                                        this._webcamEnabled &&
                                          (!b ||
                                            b.webcamEnabled ||
                                            this._externalVideo) &&
                                          this.enableWebcam(
                                            this.customCameraVideoTrack,
                                            n
                                          ),
                                        this.enableChatDataProducer()),
                                        window.SHOW_INFO &&
                                          ((x = Be.getState()),
                                          (E = x.me),
                                          Be.dispatch(D(E.id))),
                                        null === (d = this._openTelemetry) ||
                                          void 0 === d ||
                                          d.traceAutoComplete({
                                            spanName:
                                              "Emitting PEER_MODE_CHANGED for Peer : ".concat(
                                                this._peerId,
                                                " "
                                              ),
                                            status: 1,
                                          }),
                                        this._eventEmitter.emit(
                                          "PEER_MODE_CHANGED",
                                          {
                                            peerId: this._peerId,
                                            mode: "CONFERENCE",
                                          }
                                        ),
                                        (e.next = 58);
                                      break;
                                    case 42:
                                      if (t !== Oe.S.VIEWER) {
                                        e.next = 58;
                                        break;
                                      }
                                      return (
                                        null === (T = this._openTelemetry) ||
                                          void 0 === T ||
                                          T.traceAutoComplete({
                                            spanName:
                                              "Sending changeMode request to server",
                                            status: 1,
                                          }),
                                        (e.next = 46),
                                        this._protoo.request("changeMode", {
                                          mode: t,
                                        })
                                      );
                                    case 46:
                                      return (
                                        (this._consume = !1),
                                        (this._produce = !1),
                                        this._dataConsumers.clear(),
                                        (e.next = 51),
                                        null === (S = this._openTelemetry) ||
                                        void 0 === S
                                          ? void 0
                                          : S.trace({
                                              spanName: "Closing Trasnport",
                                              span: n,
                                            })
                                      );
                                    case 51:
                                      (C = e.sent),
                                        null === (w = this._sendTransport) ||
                                          void 0 === w ||
                                          w.close(),
                                        (this._sendTransport = null),
                                        null === (R = this._recvTransport) ||
                                          void 0 === R ||
                                          R.close(),
                                        (this._recvTransport = null),
                                        null === (P = this._openTelemetry) ||
                                          void 0 === P ||
                                          P.completeSpan({
                                            span: C,
                                            status: 1,
                                            message: "Closed Trasnport",
                                          }),
                                        null === (k = this._openTelemetry) ||
                                          void 0 === k ||
                                          k.completeSpan({
                                            span: C,
                                            status: 1,
                                            message: "changeMode() Ending",
                                          });
                                    case 58:
                                      e.next = 64;
                                      break;
                                    case 60:
                                      (e.prev = 60),
                                        (e.t0 = e.catch(4)),
                                        null === (I = this._videosdkLogs) ||
                                          void 0 === I ||
                                          I.pushLogs({
                                            logText: "Error changeMode(".concat(
                                              t,
                                              ") | failed"
                                            ),
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (L = this._openTelemetry) ||
                                          void 0 === L ||
                                          L.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "changeMode(".concat(
                                              t,
                                              ") | failed"
                                            ),
                                          });
                                    case 64:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 60]]
                            );
                          })
                        )),
                        function (e) {
                          return Lt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enablePeerWebcam",
                      value:
                        ((It = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Enabling peer ".concat(
                                              t,
                                              " Webcam"
                                            ),
                                            status: 1,
                                          }),
                                        We.debug("enablePeerWebcam()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "enablePeerWebcam",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error enablePeerWebcam | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "enablePeerWebcam() | failed:%o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return It.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disablePeerWebcam",
                      value:
                        ((Ct = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Disabling peer ".concat(
                                              t,
                                              " Webcam"
                                            ),
                                            status: 1,
                                          }),
                                        We.debug("disablePeerWebcam()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "disablePeerWebcam",
                                          { peerId: t }
                                        )
                                      );
                                    case 5:
                                      e.next = 10;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error disablePeerWebcam | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Ct.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableMic",
                      value:
                        ((kt = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h,
                              _,
                              f,
                              m,
                              v,
                              g,
                              y,
                              b,
                              x,
                              E,
                              T,
                              S,
                              w,
                              R,
                              P,
                              O,
                              k,
                              C,
                              I,
                              L,
                              D,
                              A,
                              M,
                              N,
                              j,
                              B,
                              U,
                              F,
                              Z,
                              H,
                              W = this,
                              z = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r =
                                          z.length > 0 && void 0 !== z[0]
                                            ? z[0]
                                            : void 0),
                                        (n =
                                          z.length > 1 && void 0 !== z[1]
                                            ? z[1]
                                            : void 0),
                                        (e.next = 4),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableMic() Calling ".concat(
                                                  r
                                                    ? "With Custom Audio Track"
                                                    : "Without Custom Audio Track "
                                                ),
                                              attributes: {
                                                customAudioConfig: r
                                                  ? JSON.stringify(r)
                                                  : "Not Specify Custom Track",
                                              },
                                              span: n || null,
                                            })
                                      );
                                    case 4:
                                      if (
                                        ((i = e.sent),
                                        We.debug("enableMic()"),
                                        (this._micEnabled = !0),
                                        !this._micProducer)
                                      ) {
                                        e.next = 23;
                                        break;
                                      }
                                      return (
                                        (e.next = 10),
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.trace({
                                              spanName: "Mic Producer found",
                                              span: i,
                                            })
                                      );
                                    case 10:
                                      return (
                                        (d = e.sent),
                                        r &&
                                          (null === (l = this._openTelemetry) ||
                                            void 0 === l ||
                                            l.traceAutoComplete({
                                              spanName:
                                                "Stopping customAudioTrack",
                                              status: 1,
                                            }),
                                          r.getTracks().forEach(function (e) {
                                            e.stop();
                                          })),
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: d,
                                            status: 1,
                                            message: "Resuming Mic Producer",
                                          }),
                                        this._micProducer.resume(),
                                        (p = this._micProducer),
                                        (e.next = 17),
                                        this._sendTransport.produce({
                                          track: this._micProducer.track,
                                          encodings:
                                            this._micProducer._appData
                                              .encodings,
                                          codecOptions:
                                            this._micProducer._appData
                                              .codecOptions,
                                        })
                                      );
                                    case 17:
                                      return (
                                        (this._micProducer = e.sent),
                                        (h = G({
                                          id: this._micProducer.id,
                                          paused: this._micProducer.paused,
                                          track: this._micProducer.track,
                                          rtpParameters:
                                            this._micProducer.rtpParameters,
                                          codec:
                                            this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          encodings: p._appData.encodings,
                                          codecOptions: p._appData.codecOptions,
                                          instance: this._micProducer,
                                        })),
                                        Be.dispatch(h),
                                        this._eventEmitter.emit(
                                          h.type,
                                          h.payload
                                        ),
                                        null === (c = this._openTelemetry) ||
                                          void 0 === c ||
                                          c.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Enable Mic Successful",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 23:
                                      if (
                                        this._mediasoupDevice.canProduce(
                                          "audio"
                                        )
                                      ) {
                                        e.next = 27;
                                        break;
                                      }
                                      return (
                                        We.error(
                                          "enableMic() | cannot produce audio"
                                        ),
                                        null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              'enableMic() | cannot produce audio"',
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 27:
                                      if (
                                        ((e.prev = 27), this._externalVideo)
                                      ) {
                                        e.next = 57;
                                        break;
                                      }
                                      return (
                                        We.debug(
                                          "enableMic() | calling getUserMedia()"
                                        ),
                                        (e.next = 32),
                                        this._updateMics(i)
                                      );
                                    case 32:
                                      if (this._mic.device) {
                                        e.next = 36;
                                        break;
                                      }
                                      throw (
                                        (null === (E = this._openTelemetry) ||
                                          void 0 === E ||
                                          E.traceAutoComplete({
                                            spanName: "Mic Device Not Found",
                                            status: 2,
                                          }),
                                        null === (T = this._videosdkLogs) ||
                                          void 0 === T ||
                                          T.pushLogs({
                                            logText:
                                              "Error Mic Device Not Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("no mic devices"))
                                      );
                                    case 36:
                                      try {
                                        r &&
                                          "ended" ==
                                            (f = r.getAudioTracks()[0])
                                              .readyState &&
                                          ((f = null),
                                          null === (S = this._openTelemetry) ||
                                            void 0 === S ||
                                            S.traceAutoComplete({
                                              spanName:
                                                "Dispose Audio Custom Track, it is in ended state",
                                              status: 2,
                                            }));
                                      } catch (e) {
                                        null === (w = this._videosdkLogs) ||
                                          void 0 === w ||
                                          w.pushLogs({
                                            logText:
                                              "Error Invalid Custom Audio Track Passed. Reverting to default Error",
                                            logType: "ERROR",
                                            attributes: { error: e.message },
                                          }),
                                          (R = console).log.apply(
                                            R,
                                            (0, a.Z)(
                                              Xe(
                                                "3400940930_0",
                                                "Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                                  e
                                                )
                                              )
                                            )
                                          );
                                      }
                                      if (f) {
                                        e.next = 55;
                                        break;
                                      }
                                      return (
                                        (e.next = 40),
                                        null === (P = this._openTelemetry) ||
                                        void 0 === P
                                          ? void 0
                                          : P.trace({
                                              spanName: "Creating Track",
                                              span: i,
                                            })
                                      );
                                    case 40:
                                      return (
                                        (k = e.sent),
                                        (e.prev = 41),
                                        (e.next = 44),
                                        navigator.mediaDevices.getUserMedia({
                                          audio: {
                                            deviceId: {
                                              ideal: this._mic.device.deviceId,
                                            },
                                            channelCount: 1,
                                            noiseSuppression: !0,
                                            echoCancellation: !0,
                                            googEchoCancellation: !0,
                                            googEchoCancellation2: !0,
                                            googAutoGainControl: !0,
                                            googAutoGainControl2: !0,
                                            googNoiseSuppression: !0,
                                            googNoiseSuppression2: !0,
                                            googHighpassFilter: !0,
                                          },
                                        })
                                      );
                                    case 44:
                                      (C = e.sent), (e.next = 53);
                                      break;
                                    case 47:
                                      return (
                                        (e.prev = 47),
                                        (e.t0 = e.catch(41)),
                                        null === (I = this._videosdkLogs) ||
                                          void 0 === I ||
                                          I.pushLogs({
                                            logText:
                                              "Error in getUserMedia for audio",
                                            logType: "ERROR",
                                            attributes: {
                                              error: JSON.stringify(e.t0),
                                            },
                                          }),
                                        null === (L = this._openTelemetry) ||
                                          void 0 === L ||
                                          L.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error in getUserMedia for audio",
                                          }),
                                        "Permission denied" === e.t0.message ||
                                        "NotAllowedError" === e.t0.name
                                          ? (null ===
                                              (D = this._videosdkLogs) ||
                                              void 0 === D ||
                                              D.pushLogs({
                                                logText:
                                                  "Error Invalid Custom Audio Track Passed. Reverting to default Error: ".concat(
                                                    error
                                                  ),
                                                logType: "ERROR",
                                              }),
                                            this._emitError(
                                              we.H
                                                .ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
                                            ))
                                          : this._emitError(
                                              we.H.ERROR_GET_AUDIO_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 53:
                                      (f = C.getAudioTracks()[0]),
                                        null === (O = this._openTelemetry) ||
                                          void 0 === O ||
                                          O.completeSpan({
                                            message: "Audio Track Generated",
                                            span: k,
                                            status: 1,
                                          });
                                    case 55:
                                      e.next = 61;
                                      break;
                                    case 57:
                                      return (
                                        (e.next = 59),
                                        this._getExternalVideoStream()
                                      );
                                    case 59:
                                      (A = e.sent),
                                        (f = A.getAudioTracks()[0].clone());
                                    case 61:
                                      return (
                                        (e.next = 63),
                                        null === (m = this._openTelemetry) ||
                                        void 0 === m
                                          ? void 0
                                          : m.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: i,
                                            })
                                      );
                                    case 63:
                                      return (
                                        (M = e.sent),
                                        (N = { opusStereo: 1, opusDtx: 1 }),
                                        r &&
                                          ((j = r.encoderConfig
                                            ? ue.v.audioProfiles[
                                                r.encoderConfig
                                              ]
                                            : ue.v.audioProfiles
                                                .speech_standard),
                                          (N = {
                                            opusStereo: j.stereo ? 1 : 0,
                                            opusFec: j.fec ? 1 : 0,
                                            opusDtx: j.dtx ? 1 : 0,
                                            opusMaxPlaybackRate:
                                              j.maxPlaybackRate,
                                            opusPtime: j.packetTime,
                                          })),
                                        (U = {
                                          encodings: (B = [
                                            { networkPriority: "high" },
                                          ]),
                                          codecOptions: N,
                                        }),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.traceAutoComplete({
                                            spanName: "Generated AppData",
                                            attributes: {
                                              appData: JSON.stringify(U),
                                            },
                                            status: 1,
                                          }),
                                        null === (g = this._openTelemetry) ||
                                          void 0 === g ||
                                          g.completeSpan({
                                            span: M,
                                            status: 1,
                                            message:
                                              "Producer Configuration Generated",
                                          }),
                                        (e.next = 73),
                                        null === (y = this._openTelemetry) ||
                                        void 0 === y
                                          ? void 0
                                          : y.trace({
                                              spanName: "Creating Mic Producer",
                                              span: i,
                                            })
                                      );
                                    case 73:
                                      return (
                                        (M = e.sent),
                                        (e.next = 76),
                                        this._sendTransport.produce({
                                          track: f,
                                          encodings: B,
                                          codecOptions: N,
                                          appData: U,
                                        })
                                      );
                                    case 76:
                                      (this._micProducer = e.sent),
                                        (F = G({
                                          id: this._micProducer.id,
                                          paused: this._micProducer.paused,
                                          track: this._micProducer.track,
                                          rtpParameters:
                                            this._micProducer.rtpParameters,
                                          codec:
                                            this._micProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          encodings: B,
                                          codecOptions: N,
                                          instance: this._micProducer,
                                        })),
                                        Be.dispatch(F),
                                        this._eventEmitter.emit(
                                          F.type,
                                          F.payload
                                        ),
                                        this._micProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = V(W._micProducer.id);
                                            Be.dispatch(t),
                                              W._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null === (e = W._micProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (W._micProducer = null);
                                          }
                                        ),
                                        this._micProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = W._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  "this._micProducer trackended or Microphone disconnected!",
                                                status: 2,
                                              }),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Microphone disconnected!",
                                                })
                                              ),
                                              W.disableMic(!0, i).catch(
                                                function () {}
                                              );
                                          }
                                        ),
                                        null === (b = this._openTelemetry) ||
                                          void 0 === b ||
                                          b.completeSpan({
                                            span: M,
                                            status: 1,
                                            message: "Mic Producer Created",
                                          }),
                                        null === (x = this._openTelemetry) ||
                                          void 0 === x ||
                                          x.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Enable Mic Successful",
                                          }),
                                        (e.next = 95);
                                      break;
                                    case 86:
                                      return (
                                        (e.prev = 86),
                                        (e.t1 = e.catch(27)),
                                        null === (Z = this._openTelemetry) ||
                                          void 0 === Z ||
                                          Z.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error enabling microphone: ".concat(
                                                e.t1
                                              ),
                                          }),
                                        null === (H = this._videosdkLogs) ||
                                          void 0 === H ||
                                          H.pushLogs({
                                            logText:
                                              "Error enabling microphone",
                                            logType: "ERROR",
                                            attributes: { error: e.t1.message },
                                          }),
                                        We.error(
                                          "enableMic() | failed:%o",
                                          e.t1
                                        ),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error enabling microphone: ".concat(
                                              e.t1
                                            ),
                                          })
                                        ),
                                        (e.next = 94),
                                        this._protoo.request("produceError", {
                                          mediaType: "audio",
                                          message: e.t1.message,
                                        })
                                      );
                                    case 94:
                                      f && f.stop();
                                    case 95:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [27, 86],
                                [41, 47],
                              ]
                            );
                          })
                        )),
                        function () {
                          return kt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableMic",
                      value:
                        ((Ot = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h,
                              _,
                              f,
                              m,
                              v,
                              g,
                              y,
                              b,
                              x,
                              E = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n =
                                          E.length > 0 &&
                                          void 0 !== E[0] &&
                                          E[0]),
                                        (a =
                                          E.length > 1 && void 0 !== E[1]
                                            ? E[1]
                                            : void 0),
                                        We.debug("disableMic()"),
                                        (e.next = 5),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName: "disableMic() Calling",
                                              status: 1,
                                              span: a || null,
                                            })
                                      );
                                    case 5:
                                      if (((i = e.sent), this._micProducer)) {
                                        e.next = 9;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 2,
                                            message: "Mic Producer Not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 9:
                                      return (
                                        (e.next = 11),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "Closing Mic Producer",
                                              span: i,
                                              status: 1,
                                            })
                                      );
                                    case 11:
                                      if (
                                        ((o = e.sent),
                                        (this._micEnabled = !1),
                                        !this._micProducer || n)
                                      ) {
                                        e.next = 35;
                                        break;
                                      }
                                      return (
                                        (e.next = 16),
                                        null === (c = this._openTelemetry) ||
                                        void 0 === c
                                          ? void 0
                                          : c.trace({
                                              spanName: "Pausing Mic Producer",
                                              span: o,
                                              status: 1,
                                            })
                                      );
                                    case 16:
                                      return (
                                        (p = e.sent),
                                        this._micProducer.pause(),
                                        (h = V(this._micProducer.id)),
                                        null === (d = this._openTelemetry) ||
                                          void 0 === d ||
                                          d.completeSpan({
                                            span: p,
                                            status: 1,
                                            message: "Pause Mic Successfully",
                                          }),
                                        Be.dispatch(h),
                                        this._eventEmitter.emit(
                                          h.type,
                                          h.payload
                                        ),
                                        (e.prev = 22),
                                        (e.next = 25),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 25:
                                      null === (_ = this._openTelemetry) ||
                                        void 0 === _ ||
                                        _.completeSpan({
                                          span: o,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        (e.next = 33);
                                      break;
                                    case 28:
                                      (e.prev = 28),
                                        (e.t0 = e.catch(22)),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error closing server-side mic Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        null === (f = this._openTelemetry) ||
                                          void 0 === f ||
                                          f.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                          }),
                                        null === (m = this._videosdkLogs) ||
                                          void 0 === m ||
                                          m.pushLogs({
                                            logText:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 33:
                                      return (
                                        null === (l = this._openTelemetry) ||
                                          void 0 === l ||
                                          l.completeSpan({
                                            span: i,
                                            status: 1,
                                            message:
                                              "Mic Disabled Successfully",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 35:
                                      return (
                                        this._micProducer.close(),
                                        (v = V(this._micProducer.id)),
                                        Be.dispatch(v),
                                        this._eventEmitter.emit(
                                          v.type,
                                          v.payload
                                        ),
                                        (e.prev = 39),
                                        (e.next = 42),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 42:
                                      null === (g = this._openTelemetry) ||
                                        void 0 === g ||
                                        g.completeSpan({
                                          span: o,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        null === (y = this._openTelemetry) ||
                                          void 0 === y ||
                                          y.completeSpan({
                                            span: i,
                                            status: 1,
                                            message:
                                              "Mic Disabled Successfully",
                                          }),
                                        (e.next = 51);
                                      break;
                                    case 46:
                                      (e.prev = 46),
                                        (e.t1 = e.catch(39)),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error closing server-side mic Producer: ".concat(
                                              e.t1
                                            ),
                                          })
                                        ),
                                        null === (b = this._openTelemetry) ||
                                          void 0 === b ||
                                          b.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                          }),
                                        null === (x = this._videosdkLogs) ||
                                          void 0 === x ||
                                          x.pushLogs({
                                            logText:
                                              "Error closing server-side mic Producer closeProducer :".concat(
                                                n
                                              ),
                                            logType: "ERROR",
                                            attributes: { error: e.t1.message },
                                          });
                                    case 51:
                                      this._micProducer = null;
                                    case 52:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [22, 28],
                                [39, 46],
                              ]
                            );
                          })
                        )),
                        function () {
                          return Ot.apply(this, arguments);
                        }),
                    },
                    {
                      key: "muteMic",
                      value:
                        ((Pt = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("muteMic()"),
                                        (this._micEnabled = !1),
                                        this._micProducer.pause(),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("pauseProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 6:
                                      Be.dispatch({
                                        type: "SET_PRODUCER_PAUSED",
                                        payload: {
                                          producerId: this._micProducer.id,
                                        },
                                      }),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(3)),
                                        We.error(
                                          "muteMic() | failed: %o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error pausing server-side mic Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error pausing server-side mic Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 9]]
                            );
                          })
                        )),
                        function () {
                          return Pt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "unmuteMic",
                      value:
                        ((Rt = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("unmuteMic()"),
                                        (this._micEnabled = !0),
                                        this._micProducer.resume(),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("resumeProducer", {
                                          producerId: this._micProducer.id,
                                        })
                                      );
                                    case 6:
                                      Be.dispatch({
                                        type: "SET_PRODUCER_RESUMED",
                                        payload: {
                                          producerId: this._micProducer.id,
                                        },
                                      }),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(3)),
                                        We.error(
                                          "unmuteMic() | failed: %o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error resuming server-side mic Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error resuming server-side mic Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 9]]
                            );
                          })
                        )),
                        function () {
                          return Rt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableWebcam",
                      value:
                        ((wt = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h,
                              _,
                              f,
                              m,
                              v,
                              g,
                              y,
                              b,
                              x,
                              E,
                              T,
                              S,
                              w,
                              R,
                              P,
                              O,
                              k,
                              C,
                              I,
                              L,
                              D,
                              A,
                              M,
                              N,
                              j,
                              B,
                              U,
                              F,
                              Z,
                              H,
                              W,
                              K,
                              X,
                              q,
                              $ = this,
                              J = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r =
                                          J.length > 0 && void 0 !== J[0]
                                            ? J[0]
                                            : void 0),
                                        (n =
                                          J.length > 1 && void 0 !== J[1]
                                            ? J[1]
                                            : void 0),
                                        (e.next = 4),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableWebcam() Calling ".concat(
                                                  r
                                                    ? "With Custom Video Track"
                                                    : "Without Custom Video Track "
                                                ),
                                              attributes: {
                                                customVideoConfig: r
                                                  ? JSON.stringify(r)
                                                  : "Not Specify Custom Track",
                                              },
                                              span: n || null,
                                            })
                                      );
                                    case 4:
                                      if (
                                        ((i = e.sent),
                                        We.debug("enableWebcam()"),
                                        (this._webcamEnabled = !0),
                                        !this._webcamProducer)
                                      ) {
                                        e.next = 10;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 2,
                                            message: "Webcam Producer found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 10:
                                      if (
                                        this._mediasoupDevice.canProduce(
                                          "video"
                                        )
                                      ) {
                                        e.next = 14;
                                        break;
                                      }
                                      return (
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "enableWebcam() | cannot produce video",
                                          }),
                                        We.error(
                                          "enableWebcam() | cannot produce video"
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 14:
                                      if (
                                        (Be.dispatch(z(!0)),
                                        (l = this._webcam.resolution),
                                        (e.prev = 16),
                                        this._externalVideo)
                                      ) {
                                        e.next = 56;
                                        break;
                                      }
                                      return (
                                        (e.next = 20), this._updateWebcams(i)
                                      );
                                    case 20:
                                      if ((d = this._webcam.device)) {
                                        e.next = 25;
                                        break;
                                      }
                                      throw (
                                        (null === (g = this._openTelemetry) ||
                                          void 0 === g ||
                                          g.traceAutoComplete({
                                            spanName: "Webcam Device Not Found",
                                            status: 2,
                                          }),
                                        null === (y = this._videosdkLogs) ||
                                          void 0 === y ||
                                          y.pushLogs({
                                            logText:
                                              "Error Webcam Device Not Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("no webcam devices"))
                                      );
                                    case 25:
                                      We.debug(
                                        "enableWebcam() | calling getUserMedia()"
                                      );
                                      try {
                                        r &&
                                          "ended" ==
                                            (c = r.getVideoTracks()[0])
                                              .readyState &&
                                          ((c = null),
                                          null === (b = this._openTelemetry) ||
                                            void 0 === b ||
                                            b.traceAutoComplete({
                                              spanName:
                                                "Dispose Video Custom Track, it is in ended state",
                                              status: 2,
                                            }));
                                      } catch (e) {
                                        null === (x = this._videosdkLogs) ||
                                          void 0 === x ||
                                          x.pushLogs({
                                            logText:
                                              "Error Invalid Custom Track Passed. Reverting to default Error",
                                            logType: "ERROR",
                                            attributes: { error: e.message },
                                          }),
                                          (E = console).log.apply(
                                            E,
                                            (0, a.Z)(
                                              Xe(
                                                "3400940930_1",
                                                "Invalid Custom Track Passed. Reverting to default Error: ".concat(
                                                  e
                                                )
                                              )
                                            )
                                          );
                                      }
                                      if (c) {
                                        e.next = 54;
                                        break;
                                      }
                                      return (
                                        (e.next = 30),
                                        null === (T = this._openTelemetry) ||
                                        void 0 === T
                                          ? void 0
                                          : T.trace({
                                              spanName: "Creating Track",
                                              span: i,
                                            })
                                      );
                                    case 30:
                                      if (
                                        ((S = e.sent),
                                        (e.prev = 31),
                                        "hd" != this._webcam.resolution)
                                      ) {
                                        e.next = 39;
                                        break;
                                      }
                                      return (
                                        (e.next = 35),
                                        Re.VideoSDK.createCameraVideoTrack({
                                          cameraId: d.deviceId,
                                          encoderConfig: "h720p_w1280p",
                                          multiStream: this._useSimulcast,
                                        })
                                      );
                                    case 35:
                                      (r = e.sent),
                                        null == S ||
                                          S.setAttributes({
                                            customVideoTrackConfig:
                                              JSON.stringify({
                                                encoderConfig: "h720p_w1280p",
                                                multiStream: this._useSimulcast,
                                              }),
                                          }),
                                        (e.next = 43);
                                      break;
                                    case 39:
                                      return (
                                        (e.next = 41),
                                        Re.VideoSDK.createCameraVideoTrack({
                                          cameraId: d.deviceId,
                                          encoderConfig: "h540p_w960p",
                                          multiStream: this._useSimulcast,
                                        })
                                      );
                                    case 41:
                                      (r = e.sent),
                                        null == S ||
                                          S.setAttributes({
                                            customVideoTrackConfig:
                                              JSON.stringify({
                                                encoderConfig: "h540p_w960p",
                                                multiStream: this._useSimulcast,
                                              }),
                                          });
                                    case 43:
                                      (c = r.getVideoTracks()[0]),
                                        null === (w = this._openTelemetry) ||
                                          void 0 === w ||
                                          w.completeSpan({
                                            message: "Video Track Generated",
                                            span: S,
                                            status: 1,
                                          }),
                                        (e.next = 54);
                                      break;
                                    case 47:
                                      return (
                                        (e.prev = 47),
                                        (e.t0 = e.catch(31)),
                                        null === (R = this._videosdkLogs) ||
                                          void 0 === R ||
                                          R.pushLogs({
                                            logText:
                                              "Error Creating VideoTrack",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (P = this._openTelemetry) ||
                                          void 0 === P ||
                                          P.completeSpan({
                                            message:
                                              "Error Creating VideoTrack",
                                            span: i,
                                            status: 2,
                                          }),
                                        (O = console).log.apply(
                                          O,
                                          (0, a.Z)(
                                            Xe(
                                              "3400940930_2",
                                              "Error Creating VideoTrack: ",
                                              e.t0
                                            )
                                          )
                                        ),
                                        "Permission denied" === e.t0.message ||
                                        "NotAllowedError" === e.t0.name
                                          ? this._emitError(
                                              we.H
                                                .ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              we.H.ERROR_GET_VIDEO_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 54:
                                      e.next = 61;
                                      break;
                                    case 56:
                                      return (
                                        (d = { label: "external video" }),
                                        (e.next = 59),
                                        this._getExternalVideoStream()
                                      );
                                    case 59:
                                      (k = e.sent),
                                        (c = k.getVideoTracks()[0].clone());
                                    case 61:
                                      return (
                                        (e.next = 63),
                                        null === (p = this._openTelemetry) ||
                                        void 0 === p
                                          ? void 0
                                          : p.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: i,
                                            })
                                      );
                                    case 63:
                                      if (
                                        ((C = e.sent),
                                        (D = { videoGoogleStartBitrate: 1e3 }),
                                        !this._forceH264)
                                      ) {
                                        e.next = 72;
                                        break;
                                      }
                                      if (
                                        (L =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/h264" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 70;
                                        break;
                                      }
                                      throw (
                                        (null === (A = this._videosdkLogs) ||
                                          void 0 === A ||
                                          A.pushLogs({
                                            logText:
                                              "Error desired H264 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired H264 codec+configuration is not supported"
                                        ))
                                      );
                                    case 70:
                                      e.next = 77;
                                      break;
                                    case 72:
                                      if (!this._forceVP9) {
                                        e.next = 77;
                                        break;
                                      }
                                      if (
                                        (L =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/vp9" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 77;
                                        break;
                                      }
                                      throw (
                                        (null === (M = this._videosdkLogs) ||
                                          void 0 === M ||
                                          M.pushLogs({
                                            logText:
                                              "Error desired VP9 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired VP9 codec+configuration is not supported"
                                        ))
                                      );
                                    case 77:
                                      c
                                        ? ((N = c.getConstraints()),
                                          (I = xe(!1, N.width, N.height, {
                                            simulcast: r.multiStream,
                                          })))
                                        : this._useSimulcast &&
                                          ((j =
                                            this._mediasoupDevice.rtpCapabilities.codecs.find(
                                              function (e) {
                                                return "video" === e.kind;
                                              }
                                            )),
                                          (I =
                                            (this._forceVP9 && L) ||
                                            "video/vp9" ===
                                              j.mimeType.toLowerCase()
                                              ? Ve
                                              : Ge[this._webcam.resolution])),
                                        (B = {});
                                      try {
                                        B = {
                                          encodings: I,
                                          width: r
                                            ? null === (U = c) || void 0 === U
                                              ? void 0
                                              : U.getConstraints().width
                                            : Fe[l].width.ideal,
                                          height: r
                                            ? null === (F = c) || void 0 === F
                                              ? void 0
                                              : F.getConstraints().height
                                            : Fe[l].height.ideal,
                                        };
                                      } catch (e) {
                                        null === (Z = this._videosdkLogs) ||
                                          void 0 === Z ||
                                          Z.pushLogs({
                                            logText:
                                              "Error Enable Webcam AppData",
                                            logType: "ERROR",
                                            attributes: { error: e.message },
                                          }),
                                          (H = console).log.apply(
                                            H,
                                            (0, a.Z)(Xe("3400940930_3", e))
                                          );
                                      }
                                      return (
                                        null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.traceAutoComplete({
                                            spanName:
                                              "Track Generated with height "
                                                .concat(B.height, " and width ")
                                                .concat(
                                                  B.width,
                                                  " with multiStream "
                                                )
                                                .concat(this._useSimulcast),
                                            attributes: {
                                              appData: JSON.stringify(B),
                                            },
                                            status: 1,
                                          }),
                                        null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.completeSpan({
                                            span: C,
                                            status: 1,
                                            message:
                                              "Producer Configuration Generated",
                                          }),
                                        (e.next = 84),
                                        null === (f = this._openTelemetry) ||
                                        void 0 === f
                                          ? void 0
                                          : f.trace({
                                              spanName:
                                                "Creating Webcam Producer",
                                              span: i,
                                            })
                                      );
                                    case 84:
                                      return (
                                        (C = e.sent),
                                        (e.next = 87),
                                        this._sendTransport.produce({
                                          track: c,
                                          encodings: I,
                                          codecOptions: D,
                                          codec: L,
                                          appData: B,
                                        })
                                      );
                                    case 87:
                                      (this._webcamProducer = e.sent),
                                        (W = G({
                                          id: this._webcamProducer.id,
                                          deviceLabel: d.label,
                                          type: this._getWebcamType(d),
                                          paused: this._webcamProducer.paused,
                                          track: this._webcamProducer.track,
                                          rtpParameters:
                                            this._webcamProducer.rtpParameters,
                                          codec:
                                            this._webcamProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          instance: this._webcamProducer,
                                        })),
                                        Be.dispatch(W),
                                        this._eventEmitter.emit(
                                          W.type,
                                          W.payload
                                        ),
                                        this._webcamProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = V($._webcamProducer.id);
                                            Be.dispatch(t),
                                              $._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null ===
                                                (e = $._webcamProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              ($._webcamProducer = null);
                                          }
                                        ),
                                        this._webcamProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = $._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  " this._webcamProducer trackended or Webcam disconnected!",
                                                status: 2,
                                              }),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Webcam disconnected!",
                                                })
                                              ),
                                              $.disableWebcam(i).catch(
                                                function () {}
                                              );
                                          }
                                        ),
                                        null === (m = this._openTelemetry) ||
                                          void 0 === m ||
                                          m.completeSpan({
                                            span: C,
                                            status: 1,
                                            message: "Webcam Producer Created",
                                          }),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Enable Webcam Successful",
                                          }),
                                        (e.next = 106);
                                      break;
                                    case 97:
                                      return (
                                        (e.prev = 97),
                                        (e.t1 = e.catch(16)),
                                        (K = console).log.apply(
                                          K,
                                          (0, a.Z)(
                                            Xe(
                                              "3400940930_4",
                                              "enableWebcam() | failed:%o",
                                              e.t1
                                            )
                                          )
                                        ),
                                        null === (X = this._videosdkLogs) ||
                                          void 0 === X ||
                                          X.pushLogs({
                                            logText: "Error enabling webcam",
                                            logType: "ERROR",
                                            attributes: { error: e.t1.message },
                                          }),
                                        null === (q = this._openTelemetry) ||
                                          void 0 === q ||
                                          q.completeSpan({
                                            span: i,
                                            status: 2,
                                            message: "Error enabling webcam",
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error enabling webcam: ".concat(
                                              e.t1
                                            ),
                                          })
                                        ),
                                        (e.next = 105),
                                        this._protoo.request("produceError", {
                                          mediaType: "video",
                                          message: e.t1.message,
                                        })
                                      );
                                    case 105:
                                      c && c.stop();
                                    case 106:
                                      Be.dispatch(z(!1));
                                    case 107:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [16, 97],
                                [31, 47],
                              ]
                            );
                          })
                        )),
                        function () {
                          return wt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableWebcam",
                      value:
                        ((St = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (a =
                                          h.length > 0 && void 0 !== h[0]
                                            ? h[0]
                                            : void 0),
                                        (e.next = 3),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "disableWebcam() Calling",
                                              status: 1,
                                              span: a || null,
                                            })
                                      );
                                    case 3:
                                      if (
                                        ((i = e.sent),
                                        We.debug("disableWebcam()"),
                                        (this._webcamEnabled = !1),
                                        this._webcamProducer)
                                      ) {
                                        e.next = 9;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Webcam Producer Not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 9:
                                      return (
                                        (e.next = 11),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "Closing Webcam Producer",
                                              span: i,
                                              status: 1,
                                            })
                                      );
                                    case 11:
                                      return (
                                        (o = e.sent),
                                        this._webcamProducer.close(),
                                        (c = V(this._webcamProducer.id)),
                                        Be.dispatch(c),
                                        this._eventEmitter.emit(
                                          c.type,
                                          c.payload
                                        ),
                                        (e.prev = 16),
                                        (e.next = 19),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._webcamProducer.id,
                                        })
                                      );
                                    case 19:
                                      null === (d = this._openTelemetry) ||
                                        void 0 === d ||
                                        d.completeSpan({
                                          span: o,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        (e.next = 27);
                                      break;
                                    case 22:
                                      (e.prev = 22),
                                        (e.t0 = e.catch(16)),
                                        null === (l = this._videosdkLogs) ||
                                          void 0 === l ||
                                          l.pushLogs({
                                            logText:
                                              "Error closing server-side webcam Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (p = this._openTelemetry) ||
                                          void 0 === p ||
                                          p.completeSpan({
                                            span: i,
                                            status: 2,
                                            message:
                                              "Error closing server-side webcam Producer: ".concat(
                                                e.t0
                                              ),
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error closing server-side webcam Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 27:
                                      (this._webcamProducer = null),
                                        null === (n = this._openTelemetry) ||
                                          void 0 === n ||
                                          n.completeSpan({
                                            span: i,
                                            status: 1,
                                            message:
                                              "Webcam Disabled Successfully",
                                          });
                                    case 29:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[16, 22]]
                            );
                          })
                        )),
                        function () {
                          return St.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getMics",
                      value:
                        ((Tt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (t = []),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._updateMics()
                                      );
                                    case 4:
                                      this._mics.forEach(function (e, r) {
                                        t.push({ deviceId: r, label: e.label });
                                      }),
                                        (e.next = 11);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        We.error("getMics() | Error", e.t0),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error getMics() | Error",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 11:
                                      return e.abrupt("return", t);
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function () {
                          return Tt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeMic",
                      value:
                        ((Et = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, a, i, s, o, c, d, l, p, h, _, f, m, v;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName: "changeMic() Calling",
                                            })
                                      );
                                    case 2:
                                      if (
                                        ((a = e.sent),
                                        (e.prev = 3),
                                        "object" != (0, n.Z)(t))
                                      ) {
                                        e.next = 12;
                                        break;
                                      }
                                      return (
                                        a.setAttributes({
                                          customTrackConfig: JSON.stringify(t),
                                        }),
                                        (e.next = 8),
                                        this.disableMic(!0, a)
                                      );
                                    case 8:
                                      return (
                                        (e.next = 10), this.enableMic(t, a)
                                      );
                                    case 10:
                                      e.next = 32;
                                      break;
                                    case 12:
                                      return (
                                        (c = t),
                                        (e.next = 15),
                                        this._updateMics()
                                      );
                                    case 15:
                                      return (
                                        (d = Array.from(this._mics.keys())),
                                        (l = d.length),
                                        (p = this._mic.device
                                          ? this._mic.device.deviceId
                                          : void 0),
                                        null != c && null != c
                                          ? (h = d.indexOf(c))
                                          : (h = d.indexOf(p)) < l - 1
                                          ? h++
                                          : (h = 0),
                                        (this._mic.device = this._mics.get(
                                          d[h]
                                        )),
                                        (e.next = 22),
                                        null === (i = this._openTelemetry) ||
                                        void 0 === i
                                          ? void 0
                                          : i.trace({
                                              spanName: "Getting Selected Mic",
                                              span: a,
                                              attributes: {
                                                selectedWebcam: this._mic.device
                                                  ? JSON.stringify(
                                                      this._mic.device
                                                    )
                                                  : "No Mic devices",
                                              },
                                            })
                                      );
                                    case 22:
                                      if (((_ = e.sent), this._mic.device)) {
                                        e.next = 26;
                                        break;
                                      }
                                      throw (
                                        (null === (f = this._videosdkLogs) ||
                                          void 0 === f ||
                                          f.pushLogs({
                                            logText:
                                              "Error changeMic : No mic Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("No mic Found"))
                                      );
                                    case 26:
                                      return (
                                        (e.next = 28), this.disableMic(!0, a)
                                      );
                                    case 28:
                                      return (
                                        (e.next = 30), this.enableMic(void 0, a)
                                      );
                                    case 30:
                                      null === (s = this._openTelemetry) ||
                                        void 0 === s ||
                                        s.completeSpan({
                                          span: _,
                                          status: 1,
                                          message: "Done",
                                        }),
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "changeMic() Ending",
                                          });
                                    case 32:
                                      e.next = 38;
                                      break;
                                    case 34:
                                      (e.prev = 34),
                                        (e.t0 = e.catch(3)),
                                        null === (m = this._openTelemetry) ||
                                          void 0 === m ||
                                          m.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "changeMic() | Error ".concat(
                                                e.t0
                                              ),
                                          }),
                                        null === (v = this._videosdkLogs) ||
                                          void 0 === v ||
                                          v.pushLogs({
                                            logText:
                                              "Error changeMic() | Error",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 38:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 34]]
                            );
                          })
                        )),
                        function (e) {
                          return Et.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getWebcams",
                      value:
                        ((xt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (t = []),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._updateWebcams()
                                      );
                                    case 4:
                                      this._webcams.forEach(function (e, r) {
                                        t.push({
                                          deviceId: r,
                                          label: e.label,
                                          facingMode: e.facing || "environment",
                                        });
                                      }),
                                        (e.next = 11);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "getWebcams() | failed %o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error getWebcams() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 11:
                                      return e.abrupt("return", t);
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function () {
                          return xt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "replaceWebcamStream",
                      value:
                        ((bt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._webcamProducer) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        (r = t.getVideoTracks()[0]),
                                        (e.next = 4),
                                        this._webcamProducer.replaceTrack({
                                          track: r,
                                        })
                                      );
                                    case 4:
                                      this._eventEmitter.emit(
                                        "UPDATE_PRODUCER",
                                        { producer: this._webcamProducer }
                                      ),
                                        (e.next = 11);
                                      break;
                                    case 7:
                                      return (e.next = 9), this.disableWebcam();
                                    case 9:
                                      return (
                                        (e.next = 11), this.enableWebcam(t)
                                      );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return bt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeWebcam",
                      value:
                        ((yt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, a, i, s, o, c, d, l, p, h, _, f, m, v;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "changeWebcam() Calling",
                                            })
                                      );
                                    case 2:
                                      if (
                                        ((a = e.sent),
                                        Be.dispatch(z(!0)),
                                        "object" !== (0, n.Z)(t))
                                      ) {
                                        e.next = 20;
                                        break;
                                      }
                                      return (
                                        a.setAttributes({
                                          customTrackConfig: JSON.stringify(t),
                                        }),
                                        (e.prev = 6),
                                        (e.next = 9),
                                        this.disableWebcam(a)
                                      );
                                    case 9:
                                      return (
                                        (e.next = 11), this.enableWebcam(t, a)
                                      );
                                    case 11:
                                      e.next = 18;
                                      break;
                                    case 13:
                                      (e.prev = 13),
                                        (e.t0 = e.catch(6)),
                                        We.error(
                                          "changeWebcam() | failed: %o",
                                          e.t0
                                        ),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error Could not change webcam",
                                            logType: "ERROR",
                                            attributes: {
                                              object: JSON.stringify(t),
                                              error: e.t0.message,
                                            },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Could not change webcam: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 18:
                                      e.next = 51;
                                      break;
                                    case 20:
                                      return (
                                        (e.prev = 20),
                                        (e.next = 23),
                                        this._updateWebcams(a)
                                      );
                                    case 23:
                                      return (
                                        (d = Array.from(this._webcams.keys())),
                                        (l = d.length),
                                        (p = this._webcam.device
                                          ? this._webcam.device.deviceId
                                          : void 0),
                                        null != t && null != t
                                          ? (h = d.indexOf(t))
                                          : (h = d.indexOf(p)) < l - 1
                                          ? h++
                                          : (h = 0),
                                        (this._webcam.device =
                                          this._webcams.get(d[h])),
                                        We.debug(
                                          "changeWebcam() | new selected webcam [device:%o]",
                                          this._webcam.device
                                        ),
                                        (this._webcam.resolution =
                                          this._webcam.resolution || "hd"),
                                        (e.next = 32),
                                        null === (s = this._openTelemetry) ||
                                        void 0 === s
                                          ? void 0
                                          : s.trace({
                                              spanName:
                                                "Getting Selected Webcam",
                                              span: a,
                                              attributes: {
                                                selectedWebcam: this._webcam
                                                  .device
                                                  ? JSON.stringify(
                                                      this._webcam.device
                                                    )
                                                  : "No webcam devices",
                                              },
                                            })
                                      );
                                    case 32:
                                      if (((_ = e.sent), this._webcam.device)) {
                                        e.next = 36;
                                        break;
                                      }
                                      throw (
                                        (null === (f = this._videosdkLogs) ||
                                          void 0 === f ||
                                          f.pushLogs({
                                            logText:
                                              "Error changeWebcam : No webcam Found",
                                            logType: "ERROR",
                                          }),
                                        new Error("no webcam devices"))
                                      );
                                    case 36:
                                      return (
                                        (e.next = 38), this.disableWebcam(a)
                                      );
                                    case 38:
                                      return (
                                        (e.next = 40),
                                        this.enableWebcam(void 0, a)
                                      );
                                    case 40:
                                      return (
                                        null === (o = this._openTelemetry) ||
                                          void 0 === o ||
                                          o.completeSpan({
                                            span: _,
                                            status: 1,
                                            message: "Done",
                                          }),
                                        null === (c = this._openTelemetry) ||
                                          void 0 === c ||
                                          c.completeSpan({
                                            span: a,
                                            status: 1,
                                            message: "changeWebcam() Ending",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 45:
                                      (e.prev = 45),
                                        (e.t1 = e.catch(20)),
                                        We.error(
                                          "changeWebcam() | failed: %o",
                                          e.t1
                                        ),
                                        null === (m = this._videosdkLogs) ||
                                          void 0 === m ||
                                          m.pushLogs({
                                            logText:
                                              "Error Could not change webcam",
                                            logType: "ERROR",
                                            attributes: {
                                              object: JSON.stringify(t),
                                              error: e.t1.message,
                                            },
                                          }),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "Could not change webcam ".concat(
                                                e.t1
                                              ),
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Could not change webcam: ".concat(
                                              e.t1
                                            ),
                                          })
                                        );
                                    case 51:
                                      Be.dispatch(z(!1));
                                    case 52:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [6, 13],
                                [20, 45],
                              ]
                            );
                          })
                        )),
                        function (e) {
                          return yt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeWebcamResolution",
                      value:
                        ((gt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n, a;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      We.debug("changeWebcamResolution()"),
                                        Be.dispatch(z(!0)),
                                        (e.prev = 2),
                                        (e.t0 = this._webcam.resolution),
                                        (e.next =
                                          "qvga" === e.t0
                                            ? 6
                                            : "vga" === e.t0
                                            ? 8
                                            : "hd" === e.t0
                                            ? 10
                                            : 12);
                                      break;
                                    case 6:
                                      return (
                                        (this._webcam.resolution = "vga"),
                                        e.abrupt("break", 13)
                                      );
                                    case 8:
                                      return (
                                        (this._webcam.resolution = "hd"),
                                        e.abrupt("break", 13)
                                      );
                                    case 10:
                                      return (
                                        (this._webcam.resolution = "qvga"),
                                        e.abrupt("break", 13)
                                      );
                                    case 12:
                                      this._webcam.resolution = "hd";
                                    case 13:
                                      return (
                                        We.debug(
                                          "changeWebcamResolution() | calling getUserMedia()"
                                        ),
                                        (e.prev = 14),
                                        (e.next = 17),
                                        navigator.mediaDevices.getUserMedia({
                                          video: je(
                                            {
                                              deviceId: {
                                                exact:
                                                  this._webcam.device.deviceId,
                                              },
                                            },
                                            Fe[this._webcam.resolution]
                                          ),
                                        })
                                      );
                                    case 17:
                                      (t = e.sent), (e.next = 25);
                                      break;
                                    case 20:
                                      return (
                                        (e.prev = 20),
                                        (e.t1 = e.catch(14)),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error in getUserMedia for changeWebcamResolution",
                                            logType: "ERROR",
                                            attributes: {
                                              error: JSON.stringify(e.t1),
                                            },
                                          }),
                                        "Permission denied" === e.t1.message ||
                                        "NotAllowedError" === e.t1.name
                                          ? this._emitError(
                                              we.H
                                                .ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              we.H.ERROR_GET_VIDEO_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 25:
                                      return (
                                        (n = t.getVideoTracks()[0]),
                                        (e.next = 28),
                                        this._webcamProducer.replaceTrack({
                                          track: n,
                                        })
                                      );
                                    case 28:
                                      Be.dispatch(
                                        Z(this._webcamProducer.id, n)
                                      ),
                                        (e.next = 36);
                                      break;
                                    case 31:
                                      (e.prev = 31),
                                        (e.t2 = e.catch(2)),
                                        We.error(
                                          "changeWebcamResolution() | failed: %o",
                                          e.t2
                                        ),
                                        null === (a = this._videosdkLogs) ||
                                          void 0 === a ||
                                          a.pushLogs({
                                            logText:
                                              "Error Could not change webcam resolution",
                                            logType: "ERROR",
                                            attributes: { error: e.t2.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Could not change webcam resolution: ".concat(
                                              e.t2
                                            ),
                                          })
                                        );
                                    case 36:
                                      Be.dispatch(z(!1));
                                    case 37:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [2, 31],
                                [14, 20],
                              ]
                            );
                          })
                        )),
                        function () {
                          return gt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableShare",
                      value:
                        ((vt = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h,
                              _,
                              f,
                              m,
                              v,
                              g,
                              y,
                              b,
                              x,
                              E,
                              T,
                              S,
                              w,
                              R,
                              P,
                              O,
                              k,
                              C,
                              I,
                              L,
                              D,
                              A,
                              M,
                              N,
                              j,
                              B = this,
                              U = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r =
                                          U.length > 0 && void 0 !== U[0]
                                            ? U[0]
                                            : void 0),
                                        (e.next = 3),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "enableShare() Calling ".concat(
                                                  r
                                                    ? "With Custom Video Track"
                                                    : "Without Custom Video Track "
                                                ),
                                              attributes: {
                                                customShareConfig: r
                                                  ? JSON.stringify(r)
                                                  : "Not Specify Custom Track",
                                              },
                                            })
                                      );
                                    case 3:
                                      if (
                                        ((n = e.sent),
                                        We.debug("enableShare()"),
                                        !this._shareProducer)
                                      ) {
                                        e.next = 8;
                                        break;
                                      }
                                      return (
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Screen Share Producer found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 8:
                                      if (
                                        this._mediasoupDevice.canProduce(
                                          "video"
                                        )
                                      ) {
                                        e.next = 12;
                                        break;
                                      }
                                      return (
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "enableShare() | cannot produce video",
                                          }),
                                        We.error(
                                          "enableShare() | cannot produce video"
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 12:
                                      return (
                                        Be.dispatch(K(!0)),
                                        (e.prev = 13),
                                        We.debug(
                                          "enableShare() | calling getUserMedia()"
                                        ),
                                        (e.next = 17),
                                        null === (d = this._openTelemetry) ||
                                        void 0 === d
                                          ? void 0
                                          : d.trace({
                                              spanName: "Creating Track",
                                              span: n,
                                            })
                                      );
                                    case 17:
                                      if (((m = e.sent), !r || !r.active)) {
                                        e.next = 23;
                                        break;
                                      }
                                      (o = r.getVideoTracks()[0]),
                                        (c = r.getAudioTracks()[0]),
                                        (e.next = 42);
                                      break;
                                    case 23:
                                      return (
                                        (e.prev = 23),
                                        (e.next = 26),
                                        navigator.mediaDevices.getDisplayMedia({
                                          audio: !0,
                                          video: {
                                            width: { max: 1920 },
                                            height: { max: 1080 },
                                            frameRate: { max: 10 },
                                          },
                                        })
                                      );
                                    case 26:
                                      (g = e.sent), (e.next = 35);
                                      break;
                                    case 29:
                                      return (
                                        (e.prev = 29),
                                        (e.t0 = e.catch(23)),
                                        null === (y = this._videosdkLogs) ||
                                          void 0 === y ||
                                          y.pushLogs({
                                            logText:
                                              "Error in getDisplayMedia for screen share",
                                            logType: "ERROR",
                                            attributes: {
                                              error: JSON.stringify(e.t0),
                                            },
                                          }),
                                        null === (b = this._openTelemetry) ||
                                          void 0 === b ||
                                          b.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Error in getDisplayMedia for screen share ".concat(
                                                e.t0
                                              ),
                                          }),
                                        "Permission denied" === e.t0.message ||
                                        "NotAllowedError" === e.t0.name
                                          ? this._emitError(
                                              we.H
                                                .ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
                                            )
                                          : this._emitError(
                                              we.H.ERROR_GET_DISPLAY_MEDIA
                                            ),
                                        e.abrupt("return")
                                      );
                                    case 35:
                                      if (g) {
                                        e.next = 39;
                                        break;
                                      }
                                      return (
                                        Be.dispatch(K(!0)),
                                        null === (x = this._openTelemetry) ||
                                          void 0 === x ||
                                          x.completeSpan({
                                            span: n,
                                            status: 2,
                                            message: "Stream not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 39:
                                      (o = g.getVideoTracks()[0]),
                                        (c = g.getAudioTracks()[0]),
                                        null === (v = this._openTelemetry) ||
                                          void 0 === v ||
                                          v.completeSpan({
                                            message:
                                              "Track Generated with height "
                                                .concat(
                                                  o.getSettings().height,
                                                  " and width "
                                                )
                                                .concat(o.getSettings().width),
                                            span: m,
                                            status: 1,
                                          });
                                    case 42:
                                      return (
                                        (e.next = 44),
                                        null === (l = this._openTelemetry) ||
                                        void 0 === l
                                          ? void 0
                                          : l.trace({
                                              spanName:
                                                "Generating Producer Configuration",
                                              span: n,
                                            })
                                      );
                                    case 44:
                                      if (
                                        ((E = e.sent),
                                        (w = { videoGoogleStartBitrate: 1e3 }),
                                        !this._forceH264)
                                      ) {
                                        e.next = 53;
                                        break;
                                      }
                                      if (
                                        (S =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/h264" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 51;
                                        break;
                                      }
                                      throw (
                                        (null === (R = this._videosdkLogs) ||
                                          void 0 === R ||
                                          R.pushLogs({
                                            logText:
                                              "Error EnableShare : desired H264 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired H264 codec+configuration is not supported"
                                        ))
                                      );
                                    case 51:
                                      e.next = 58;
                                      break;
                                    case 53:
                                      if (!this._forceVP9) {
                                        e.next = 58;
                                        break;
                                      }
                                      if (
                                        (S =
                                          this._mediasoupDevice.rtpCapabilities.codecs.find(
                                            function (e) {
                                              return (
                                                "video/vp9" ===
                                                e.mimeType.toLowerCase()
                                              );
                                            }
                                          ))
                                      ) {
                                        e.next = 58;
                                        break;
                                      }
                                      throw (
                                        (null === (P = this._videosdkLogs) ||
                                          void 0 === P ||
                                          P.pushLogs({
                                            logText:
                                              "Error EnableShare :desired VP9 codec+configuration is not supported",
                                            logType: "ERROR",
                                          }),
                                        new Error(
                                          "desired VP9 codec+configuration is not supported"
                                        ))
                                      );
                                    case 58:
                                      return (
                                        this._useSharingSimulcast &&
                                          ((O =
                                            this._mediasoupDevice.rtpCapabilities.codecs.find(
                                              function (e) {
                                                return "video" === e.kind;
                                              }
                                            )),
                                          (T =
                                            (this._forceVP9 && S) ||
                                            "video/vp9" ===
                                              O.mimeType.toLowerCase()
                                              ? He
                                              : Ze.map(function (e) {
                                                  return je(
                                                    je({}, e),
                                                    {},
                                                    { dtx: !0 }
                                                  );
                                                }))),
                                        null === (p = this._openTelemetry) ||
                                          void 0 === p ||
                                          p.completeSpan({
                                            span: E,
                                            status: 1,
                                            message:
                                              "Producer Configuration Generated",
                                          }),
                                        (e.next = 62),
                                        null === (h = this._openTelemetry) ||
                                        void 0 === h
                                          ? void 0
                                          : h.trace({
                                              spanName:
                                                "Creating Share Producer",
                                              span: n,
                                            })
                                      );
                                    case 62:
                                      return (
                                        (E = e.sent),
                                        (e.next = 65),
                                        this._sendTransport.produce({
                                          track: o,
                                          encodings: T,
                                          codecOptions: w,
                                          codec: S,
                                          appData: { share: !0 },
                                        })
                                      );
                                    case 65:
                                      if (
                                        ((this._shareProducer = e.sent),
                                        (k = G({
                                          id: this._shareProducer.id,
                                          type: "share",
                                          paused: this._shareProducer.paused,
                                          track: this._shareProducer.track,
                                          rtpParameters:
                                            this._shareProducer.rtpParameters,
                                          codec:
                                            this._shareProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          appData: { share: !0 },
                                          instance: this._shareProducer,
                                        })),
                                        Be.dispatch(k),
                                        this._eventEmitter.emit(
                                          k.type,
                                          k.payload
                                        ),
                                        this._shareProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = V(B._shareProducer.id);
                                            Be.dispatch(t),
                                              B._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null === (e = B._shareProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (B._shareProducer = null);
                                          }
                                        ),
                                        this._shareProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = B._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  " this._shareProducer trackended or Share disconnected!",
                                                status: 2,
                                              }),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Share disconnected!",
                                                })
                                              ),
                                              B.disableShare().catch(
                                                function () {}
                                              );
                                          }
                                        ),
                                        null === (_ = this._openTelemetry) ||
                                          void 0 === _ ||
                                          _.completeSpan({
                                            span: E,
                                            status: 1,
                                            message: "Share Producer Created",
                                          }),
                                        !c)
                                      ) {
                                        e.next = 94;
                                        break;
                                      }
                                      return (
                                        (e.prev = 73),
                                        (L = { opusStereo: 1, opusDtx: 1 }),
                                        (e.next = 77),
                                        null === (C = this._openTelemetry) ||
                                        void 0 === C
                                          ? void 0
                                          : C.trace({
                                              spanName:
                                                "Creating Share Audio Producer",
                                              span: n,
                                            })
                                      );
                                    case 77:
                                      return (
                                        (E = e.sent),
                                        (e.next = 80),
                                        this._sendTransport.produce({
                                          track: c,
                                          codecOptions: L,
                                          appData: { share: !0 },
                                        })
                                      );
                                    case 80:
                                      (this._shareAudioProducer = e.sent),
                                        (D = G({
                                          id: this._shareAudioProducer.id,
                                          type: "share",
                                          paused:
                                            this._shareAudioProducer.paused,
                                          track: this._shareAudioProducer.track,
                                          rtpParameters:
                                            this._shareAudioProducer
                                              .rtpParameters,
                                          codec:
                                            this._shareAudioProducer.rtpParameters.codecs[0].mimeType.split(
                                              "/"
                                            )[1],
                                          appData: { share: !0 },
                                          instance: this._shareAudioProducer,
                                        })),
                                        Be.dispatch(D),
                                        this._eventEmitter.emit(
                                          D.type,
                                          D.payload
                                        ),
                                        this._shareAudioProducer.on(
                                          "transportclose",
                                          function () {
                                            var e,
                                              t = V(B._shareAudioProducer.id);
                                            Be.dispatch(t),
                                              B._eventEmitter.emit(
                                                t.type,
                                                t.payload
                                              ),
                                              null ===
                                                (e = B._shareAudioProducer) ||
                                                void 0 === e ||
                                                e.close(),
                                              (B._shareAudioProducer = null);
                                          }
                                        ),
                                        this._shareAudioProducer.on(
                                          "trackended",
                                          function () {
                                            var e;
                                            null === (e = B._openTelemetry) ||
                                              void 0 === e ||
                                              e.traceAutoComplete({
                                                spanName:
                                                  " this._shareAudioProducer trackended",
                                                status: 2,
                                              }),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Share disconnected!",
                                                })
                                              );
                                          }
                                        ),
                                        null === (I = this._openTelemetry) ||
                                          void 0 === I ||
                                          I.completeSpan({
                                            span: E,
                                            status: 1,
                                            message:
                                              "Share Audio Producer Created",
                                          }),
                                        (e.next = 94);
                                      break;
                                    case 89:
                                      return (
                                        (e.prev = 89),
                                        (e.t1 = e.catch(73)),
                                        (e.next = 93),
                                        this._protoo.request("produceError", {
                                          mediaType: "shareAudio",
                                          message: e.t1.message,
                                        })
                                      );
                                    case 93:
                                      null === (A = this._videosdkLogs) ||
                                        void 0 === A ||
                                        A.pushLogs({
                                          logText:
                                            "Error in shareAudio produceError",
                                          logType: "ERROR",
                                          attributes: { error: e.t1.message },
                                        });
                                    case 94:
                                      null === (f = this._openTelemetry) ||
                                        void 0 === f ||
                                        f.completeSpan({
                                          span: n,
                                          status: 1,
                                          message: "Enable Share Successful",
                                        }),
                                        (e.next = 109);
                                      break;
                                    case 97:
                                      return (
                                        (e.prev = 97),
                                        (e.t2 = e.catch(13)),
                                        We.error(
                                          "enableShare() | failed:%o",
                                          e.t2
                                        ),
                                        null === (M = this._openTelemetry) ||
                                          void 0 === M ||
                                          M.completeSpan({
                                            span: n,
                                            status: 2,
                                            message:
                                              "Error in enableShare video produceError",
                                          }),
                                        n.setAttributes({
                                          error: e.t2.message,
                                        }),
                                        (N = console).log.apply(
                                          N,
                                          (0, a.Z)(
                                            Xe(
                                              "3400940930_5",
                                              "screen share catch",
                                              e.t2.message
                                            )
                                          )
                                        ),
                                        null === (j = this._videosdkLogs) ||
                                          void 0 === j ||
                                          j.pushLogs({
                                            logText:
                                              "Error in enableShare video produceError",
                                            logType: "ERROR",
                                            attributes: { error: e.t2.message },
                                          }),
                                        "NotAllowedError" !== e.t2.name &&
                                          Be.dispatch(
                                            oe({
                                              type: "error",
                                              text: "Error sharing: ".concat(
                                                e.t2
                                              ),
                                            })
                                          ),
                                        (e.next = 107),
                                        this._protoo.request("produceError", {
                                          mediaType: "share",
                                          message: e.t2.message,
                                        })
                                      );
                                    case 107:
                                      o && o.stop(), c && c.stop();
                                    case 109:
                                      Be.dispatch(K(!1));
                                    case 110:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [
                                [13, 97],
                                [23, 29],
                                [73, 89],
                              ]
                            );
                          })
                        )),
                        function () {
                          return vt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableShare",
                      value:
                        ((mt = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n, a, i, s, o, c, d, l, p, h, _;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("disableShare()"),
                                        (e.next = 3),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "disableShare() Calling",
                                              status: 1,
                                            })
                                      );
                                    case 3:
                                      if (((a = e.sent), this._shareProducer)) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: a,
                                            status: 2,
                                            message: "Share Producer Not found",
                                          }),
                                        e.abrupt("return")
                                      );
                                    case 7:
                                      return (
                                        (e.next = 9),
                                        null === (r = this._openTelemetry) ||
                                        void 0 === r
                                          ? void 0
                                          : r.trace({
                                              spanName:
                                                "Closing Share Producer",
                                              span: a,
                                              status: 1,
                                            })
                                      );
                                    case 9:
                                      if (
                                        ((s = e.sent),
                                        this._shareProducer.close(),
                                        (o = V(this._shareProducer.id)),
                                        Be.dispatch(o),
                                        this._eventEmitter.emit(
                                          o.type,
                                          o.payload
                                        ),
                                        !this._shareAudioProducer)
                                      ) {
                                        e.next = 23;
                                        break;
                                      }
                                      return (
                                        (e.next = 17),
                                        null === (c = this._openTelemetry) ||
                                        void 0 === c
                                          ? void 0
                                          : c.trace({
                                              spanName:
                                                "Closing Share Audio Producer",
                                              span: a,
                                              status: 1,
                                            })
                                      );
                                    case 17:
                                      (l = e.sent),
                                        this._shareAudioProducer.close(),
                                        (o = V(this._shareAudioProducer.id)),
                                        Be.dispatch(o),
                                        this._eventEmitter.emit(
                                          o.type,
                                          o.payload
                                        ),
                                        null === (d = this._openTelemetry) ||
                                          void 0 === d ||
                                          d.completeSpan({
                                            span: l,
                                            status: 1,
                                            message:
                                              "Closed Share Audio Producer",
                                          });
                                    case 23:
                                      return (
                                        (e.prev = 23),
                                        (e.next = 26),
                                        this._protoo.request("closeProducer", {
                                          producerId: this._shareProducer.id,
                                        })
                                      );
                                    case 26:
                                      if (!this._shareAudioProducer) {
                                        e.next = 29;
                                        break;
                                      }
                                      return (
                                        (e.next = 29),
                                        this._protoo.request("closeProducer", {
                                          producerId:
                                            this._shareAudioProducer.id,
                                        })
                                      );
                                    case 29:
                                      null === (p = this._openTelemetry) ||
                                        void 0 === p ||
                                        p.completeSpan({
                                          span: s,
                                          status: 1,
                                          message:
                                            "Requested Server to Close Producer",
                                        }),
                                        (e.next = 37);
                                      break;
                                    case 32:
                                      (e.prev = 32),
                                        (e.t0 = e.catch(23)),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error closing server-side share Producer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        null === (h = this._openTelemetry) ||
                                          void 0 === h ||
                                          h.completeSpan({
                                            span: a,
                                            status: 2,
                                            message:
                                              "Error closing server-side share Producer ".concat(
                                                e.t0
                                              ),
                                          }),
                                        null === (_ = this._videosdkLogs) ||
                                          void 0 === _ ||
                                          _.pushLogs({
                                            logText:
                                              "Error closing server-side share Producer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 37:
                                      (this._shareProducer = null),
                                        (this._shareAudioProducer = null),
                                        null === (n = this._openTelemetry) ||
                                          void 0 === n ||
                                          n.completeSpan({
                                            span: a,
                                            status: 1,
                                            message:
                                              "Screen Share Disabled Successfully",
                                          });
                                    case 40:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[23, 32]]
                            );
                          })
                        )),
                        function () {
                          return mt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableAudioOnly",
                      value:
                        ((ft = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      We.debug("enableAudioOnly()"),
                                        Be.dispatch(B(!0)),
                                        this.disableWebcam(),
                                        (t = Ae(this._consumers.values())),
                                        (e.prev = 4),
                                        t.s();
                                    case 6:
                                      if ((r = t.n()).done) {
                                        e.next = 13;
                                        break;
                                      }
                                      if ("video" === (n = r.value).kind) {
                                        e.next = 10;
                                        break;
                                      }
                                      return e.abrupt("continue", 11);
                                    case 10:
                                      this._pauseConsumer(n);
                                    case 11:
                                      e.next = 6;
                                      break;
                                    case 13:
                                      e.next = 18;
                                      break;
                                    case 15:
                                      (e.prev = 15),
                                        (e.t0 = e.catch(4)),
                                        t.e(e.t0);
                                    case 18:
                                      return (e.prev = 18), t.f(), e.finish(18);
                                    case 21:
                                      Be.dispatch(j(!0)), Be.dispatch(B(!1));
                                    case 23:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 15, 18, 21]]
                            );
                          })
                        )),
                        function () {
                          return ft.apply(this, arguments);
                        }),
                    },
                    {
                      key: "disableAudioOnly",
                      value:
                        ((_t = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      We.debug("disableAudioOnly()"),
                                        Be.dispatch(B(!0)),
                                        !this._webcamProducer &&
                                          this._produce &&
                                          (O() || {}).webcamEnabled &&
                                          this.enableWebcam(),
                                        (t = Ae(this._consumers.values())),
                                        (e.prev = 4),
                                        t.s();
                                    case 6:
                                      if ((r = t.n()).done) {
                                        e.next = 13;
                                        break;
                                      }
                                      if ("video" === (n = r.value).kind) {
                                        e.next = 10;
                                        break;
                                      }
                                      return e.abrupt("continue", 11);
                                    case 10:
                                      this._resumeConsumer(n);
                                    case 11:
                                      e.next = 6;
                                      break;
                                    case 13:
                                      e.next = 18;
                                      break;
                                    case 15:
                                      (e.prev = 15),
                                        (e.t0 = e.catch(4)),
                                        t.e(e.t0);
                                    case 18:
                                      return (e.prev = 18), t.f(), e.finish(18);
                                    case 21:
                                      Be.dispatch(j(!1)), Be.dispatch(B(!1));
                                    case 23:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[4, 15, 18, 21]]
                            );
                          })
                        )),
                        function () {
                          return _t.apply(this, arguments);
                        }),
                    },
                    {
                      key: "muteAudio",
                      value:
                        ((ht = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    We.debug("muteAudio()"), Be.dispatch(U(!0));
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            }, e);
                          })
                        )),
                        function () {
                          return ht.apply(this, arguments);
                        }),
                    },
                    {
                      key: "unmuteAudio",
                      value:
                        ((pt = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(function (e) {
                              for (;;)
                                switch ((e.prev = e.next)) {
                                  case 0:
                                    We.debug("unmuteAudio()"),
                                      Be.dispatch(U(!1));
                                  case 2:
                                  case "end":
                                    return e.stop();
                                }
                            }, e);
                          })
                        )),
                        function () {
                          return pt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "handleRemoteRestartIce",
                      value:
                        ((lt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i, s, o, c, d;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (a = t.iceParameters),
                                        (i = t.transportId),
                                        (s = t.internalSpan),
                                        i ===
                                          (null === (r = this._sendTransport) ||
                                          void 0 === r
                                            ? void 0
                                            : r.id) &&
                                          this._sendTransport.restartIce({
                                            iceParameters: a,
                                          }),
                                        i ===
                                          (null === (n = this._recvTransport) ||
                                          void 0 === n
                                            ? void 0
                                            : n.id) &&
                                          this._recvTransport.restartIce({
                                            iceParameters: a,
                                          }),
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._protoo.request("iceRestarted", {
                                          transportId: i,
                                        })
                                      );
                                    case 6:
                                      null === (o = this._openTelemetry) ||
                                        void 0 === o ||
                                        o.completeSpan({
                                          span: s,
                                          status: 1,
                                          message: "iceRestarted",
                                        }),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(3)),
                                        null === (c = this._openTelemetry) ||
                                          void 0 === c ||
                                          c.completeSpan({
                                            span: s,
                                            status: 2,
                                            message:
                                              "handleRemoteRestartIce() ICE restart failed ".concat(
                                                e.t0
                                              ),
                                          }),
                                        null === (d = this._videosdkLogs) ||
                                          void 0 === d ||
                                          d.pushLogs({
                                            logText:
                                              "Error handleRemoteRestartIce() ICE restart failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "ICE restart failed: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 9]]
                            );
                          })
                        )),
                        function (e) {
                          return lt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "restartIce",
                      value:
                        ((ut = (0, i.Z)(
                          u().mark(function e() {
                            var t, r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("restartIce()"),
                                        Be.dispatch(F(!0)),
                                        (e.prev = 2),
                                        !this._sendTransport)
                                      ) {
                                        e.next = 9;
                                        break;
                                      }
                                      return (
                                        (e.next = 6),
                                        this._protoo.request("restartIce", {
                                          transportId: this._sendTransport.id,
                                        })
                                      );
                                    case 6:
                                      return (
                                        (t = e.sent),
                                        (e.next = 9),
                                        this._sendTransport.restartIce({
                                          iceParameters: t,
                                        })
                                      );
                                    case 9:
                                      if (!this._recvTransport) {
                                        e.next = 15;
                                        break;
                                      }
                                      return (
                                        (e.next = 12),
                                        this._protoo.request("restartIce", {
                                          transportId: this._recvTransport.id,
                                        })
                                      );
                                    case 12:
                                      return (
                                        (r = e.sent),
                                        (e.next = 15),
                                        this._recvTransport.restartIce({
                                          iceParameters: r,
                                        })
                                      );
                                    case 15:
                                      Be.dispatch(
                                        oe({ text: "ICE restarted" })
                                      ),
                                        (e.next = 23);
                                      break;
                                    case 18:
                                      (e.prev = 18),
                                        (e.t0 = e.catch(2)),
                                        We.error(
                                          "restartIce() | failed:%o",
                                          e.t0
                                        ),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "ICE restart failed: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error restartIce() ICE restart failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          });
                                    case 23:
                                      Be.dispatch(F(!1));
                                    case 24:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 18]]
                            );
                          })
                        )),
                        function () {
                          return ut.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setMaxSendingSpatialLayer",
                      value:
                        ((dt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "setMaxSendingSpatialLayer() [spatialLayer:%s]",
                                          t
                                        ),
                                        (e.prev = 1),
                                        !this._webcamProducer)
                                      ) {
                                        e.next = 7;
                                        break;
                                      }
                                      return (
                                        (e.next = 5),
                                        this._webcamProducer.setMaxSpatialLayer(
                                          t
                                        )
                                      );
                                    case 5:
                                      e.next = 10;
                                      break;
                                    case 7:
                                      if (!this._shareProducer) {
                                        e.next = 10;
                                        break;
                                      }
                                      return (
                                        (e.next = 10),
                                        this._shareProducer.setMaxSpatialLayer(
                                          t
                                        )
                                      );
                                    case 10:
                                      e.next = 17;
                                      break;
                                    case 12:
                                      (e.prev = 12),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "setMaxSendingSpatialLayer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error setting max sending video spatial layer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error setting max sending video spatial layer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 17:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 12]]
                            );
                          })
                        )),
                        function (e) {
                          return dt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setWebcamQuality",
                      value:
                        ((ct = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (this._webcamProducer) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      if (
                                        ((r = this._webcam.resolution),
                                        (n = Ue[r][t].s),
                                        this._webcamProducer.maxSpatialLayer !=
                                          n)
                                      ) {
                                        e.next = 6;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 6:
                                      return (
                                        (e.next = 8),
                                        this._webcamProducer.setMaxSpatialLayer(
                                          n
                                        )
                                      );
                                    case 8:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return ct.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setConsumerQuality",
                      value:
                        ((ot = (0, i.Z)(
                          u().mark(function e(t, r) {
                            var n, a, i, s, o, c, d;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (s = this._webcam.resolution),
                                        (e.next = 3),
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName: 'Setting "'.concat(
                                                r,
                                                '" Quality'
                                              ),
                                            })
                                      );
                                    case 3:
                                      return (
                                        (o = e.sent),
                                        (c = Ue[s][r].s),
                                        (d = Ue[s][r].t),
                                        null === (a = this._openTelemetry) ||
                                          void 0 === a ||
                                          a.traceAutoComplete({
                                            spanName:
                                              "Getting spatial & temporal layers",
                                            attributes: {
                                              spatialLayers: JSON.parse(c),
                                              temporalLayers: JSON.parse(d),
                                            },
                                            status: 1,
                                          }),
                                        (e.next = 9),
                                        this.setConsumerPreferredLayers(t, c, d)
                                      );
                                    case 9:
                                      null === (i = this._openTelemetry) ||
                                        void 0 === i ||
                                        i.completeSpan({
                                          message: "Done",
                                          span: o,
                                          status: 1,
                                        });
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return ot.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setViewPort",
                      value:
                        ((st = (0, i.Z)(
                          u().mark(function e(t, r, n) {
                            var a, i, s, o;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (this._consumers.get(t.id)) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      if (
                                        ((a = Se(
                                          this._consumers.get(t.id),
                                          r,
                                          n
                                        )),
                                        (i = a.consumerId),
                                        (s = a.newPreferredSpatialLayer),
                                        (o = a.newPreferredTemporalLayer),
                                        !i)
                                      ) {
                                        e.next = 6;
                                        break;
                                      }
                                      return (
                                        (e.next = 6),
                                        this.setConsumerPreferredLayers(i, s, o)
                                      );
                                    case 6:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t, r) {
                          return st.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setConsumerPreferredLayers",
                      value:
                        ((it = (0, i.Z)(
                          u().mark(function e(t, r, n) {
                            var a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug(
                                          "setConsumerPreferredLayers() [consumerId:%s, spatialLayer:%s, temporalLayer:%s]",
                                          t,
                                          r,
                                          n
                                        ),
                                        (e.prev = 1),
                                        (a = this._consumers.get(t))
                                          .spatialLayers > 1 &&
                                          ((a.preferredSpatialLayer = r),
                                          (a.preferredTemporalLayer = n)),
                                        (e.next = 6),
                                        this._protoo.request(
                                          "setConsumerPreferredLayers",
                                          {
                                            consumerId: t,
                                            spatialLayer: r,
                                            temporalLayer: n,
                                          }
                                        )
                                      );
                                    case 6:
                                      Be.dispatch(re(t, r, n)), (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "setConsumerPreferredLayers() | failed:%o",
                                          e.t0
                                        ),
                                        null === (i = this._videosdkLogs) ||
                                          void 0 === i ||
                                          i.pushLogs({
                                            logText:
                                              "Error setting Consumer preferred layers:",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error setting Consumer preferred layers: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 9]]
                            );
                          })
                        )),
                        function (e, t, r) {
                          return it.apply(this, arguments);
                        }),
                    },
                    {
                      key: "setConsumerPriority",
                      value:
                        ((at = (0, i.Z)(
                          u().mark(function e(t, r) {
                            var n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug(
                                          "setConsumerPriority() [consumerId:%s, priority:%d]",
                                          t,
                                          r
                                        ),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "setConsumerPriority",
                                          { consumerId: t, priority: r }
                                        )
                                      );
                                    case 4:
                                      Be.dispatch(ne(t, r)), (e.next = 12);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "setConsumerPriority() | failed:%o",
                                          e.t0
                                        ),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error setting Consumer priority",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error setting Consumer priority: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function (e, t) {
                          return at.apply(this, arguments);
                        }),
                    },
                    {
                      key: "requestConsumerKeyFrame",
                      value:
                        ((nt = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug(
                                          "requestConsumerKeyFrame() [consumerId:%s]",
                                          t
                                        ),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        this._protoo.request(
                                          "requestConsumerKeyFrame",
                                          { consumerId: t }
                                        )
                                      );
                                    case 4:
                                      Be.dispatch(
                                        oe({
                                          text: "Keyframe requested for video consumer",
                                        })
                                      ),
                                        (e.next = 12);
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(1)),
                                        We.error(
                                          "requestConsumerKeyFrame() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error requesting key frame for Consumer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error requesting key frame for Consumer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 12:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return nt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableChatDataProducer",
                      value:
                        ((rt = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("enableChatDataProducer()"),
                                        this._useDataChannel)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return (
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._sendTransport.produceData({
                                          ordered: !1,
                                          maxRetransmits: 1,
                                          label: "chat",
                                          priority: "medium",
                                          appData: {
                                            info: "my-chat-DataProducer",
                                          },
                                        })
                                      );
                                    case 6:
                                      (this._chatDataProducer = e.sent),
                                        Be.dispatch(
                                          W({
                                            id: this._chatDataProducer.id,
                                            sctpStreamParameters:
                                              this._chatDataProducer
                                                .sctpStreamParameters,
                                            label: this._chatDataProducer.label,
                                            protocol:
                                              this._chatDataProducer.protocol,
                                          })
                                        ),
                                        this._chatDataProducer.on(
                                          "transportclose",
                                          function () {
                                            r._chatDataProducer = null;
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "open",
                                          function () {
                                            We.debug(
                                              'chat DataProducer "open" event'
                                            );
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "close",
                                          function () {
                                            We.error(
                                              'chat DataProducer "close" event'
                                            ),
                                              (r._chatDataProducer = null),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Chat DataProducer closed",
                                                })
                                              );
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "error",
                                          function (e) {
                                            We.error(
                                              'chat DataProducer "error" event:%o',
                                              e
                                            ),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Chat DataProducer error: ".concat(
                                                    e
                                                  ),
                                                })
                                              );
                                          }
                                        ),
                                        this._chatDataProducer.on(
                                          "bufferedamountlow",
                                          function () {
                                            We.debug(
                                              'chat DataProducer "bufferedamountlow" event'
                                            );
                                          }
                                        ),
                                        (e.next = 21);
                                      break;
                                    case 15:
                                      throw (
                                        ((e.prev = 15),
                                        (e.t0 = e.catch(3)),
                                        We.error(
                                          "enableChatDataProducer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error enabling chat DataProducer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error enabling chat DataProducer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        e.t0)
                                      );
                                    case 21:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 15]]
                            );
                          })
                        )),
                        function () {
                          return rt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "enableBotDataProducer",
                      value:
                        ((tt = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("enableBotDataProducer()"),
                                        this._useDataChannel)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return (
                                        (e.prev = 3),
                                        (e.next = 6),
                                        this._sendTransport.produceData({
                                          ordered: !1,
                                          maxPacketLifeTime: 2e3,
                                          label: "bot",
                                          priority: "medium",
                                          appData: {
                                            info: "my-bot-DataProducer",
                                          },
                                        })
                                      );
                                    case 6:
                                      (this._botDataProducer = e.sent),
                                        Be.dispatch(
                                          W({
                                            id: this._botDataProducer.id,
                                            sctpStreamParameters:
                                              this._botDataProducer
                                                .sctpStreamParameters,
                                            label: this._botDataProducer.label,
                                            protocol:
                                              this._botDataProducer.protocol,
                                          })
                                        ),
                                        this._botDataProducer.on(
                                          "transportclose",
                                          function () {
                                            r._botDataProducer = null;
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "open",
                                          function () {
                                            We.debug(
                                              'bot DataProducer "open" event'
                                            );
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "close",
                                          function () {
                                            We.error(
                                              'bot DataProducer "close" event'
                                            ),
                                              (r._botDataProducer = null),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Bot DataProducer closed",
                                                })
                                              );
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "error",
                                          function (e) {
                                            We.error(
                                              'bot DataProducer "error" event:%o',
                                              e
                                            ),
                                              Be.dispatch(
                                                oe({
                                                  type: "error",
                                                  text: "Bot DataProducer error: ".concat(
                                                    e
                                                  ),
                                                })
                                              );
                                          }
                                        ),
                                        this._botDataProducer.on(
                                          "bufferedamountlow",
                                          function () {
                                            We.debug(
                                              'bot DataProducer "bufferedamountlow" event'
                                            );
                                          }
                                        ),
                                        (e.next = 21);
                                      break;
                                    case 15:
                                      throw (
                                        ((e.prev = 15),
                                        (e.t0 = e.catch(3)),
                                        We.error(
                                          "enableBotDataProducer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText:
                                              "Error enabling bot DataProducer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error enabling bot DataProducer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        e.t0)
                                      );
                                    case 21:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[3, 15]]
                            );
                          })
                        )),
                        function () {
                          return tt.apply(this, arguments);
                        }),
                    },
                    {
                      key: "sendChatMessage",
                      value:
                        ((et = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          'sendChatMessage() [text:"%s]',
                                          t
                                        ),
                                        this._chatDataProducer)
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return (
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "No chat DataProducer",
                                          })
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 4:
                                      try {
                                        this._chatDataProducer.send(t);
                                      } catch (e) {
                                        We.error(
                                          "chat DataProducer.send() failed:%o",
                                          e
                                        ),
                                          Be.dispatch(
                                            oe({
                                              type: "error",
                                              text: "chat DataProducer.send() failed: ".concat(
                                                e
                                              ),
                                            })
                                          );
                                      }
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return et.apply(this, arguments);
                        }),
                    },
                    {
                      key: "sendBotMessage",
                      value:
                        ((Qe = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          'sendBotMessage() [text:"%s]',
                                          t
                                        ),
                                        this._botDataProducer)
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return (
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "No bot DataProducer",
                                          })
                                        ),
                                        e.abrupt("return")
                                      );
                                    case 4:
                                      try {
                                        this._botDataProducer.send(t);
                                      } catch (e) {
                                        We.error(
                                          "bot DataProducer.send() failed:%o",
                                          e
                                        ),
                                          Be.dispatch(
                                            oe({
                                              type: "error",
                                              text: "bot DataProducer.send() failed: ".concat(
                                                e
                                              ),
                                            })
                                          );
                                      }
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Qe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "changeDisplayName",
                      value:
                        ((Ye = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug(
                                          'changeDisplayName() [displayName:"%s"]',
                                          t
                                        ),
                                        P({ displayName: t }),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "changeDisplayName",
                                          { displayName: t }
                                        )
                                      );
                                    case 5:
                                      (this._displayName = t),
                                        Be.dispatch(N(t)),
                                        Be.dispatch(
                                          oe({ text: "Display name changed" })
                                        ),
                                        (e.next = 15);
                                      break;
                                    case 10:
                                      (e.prev = 10),
                                        (e.t0 = e.catch(2)),
                                        We.error(
                                          "changeDisplayName() | failed: %o",
                                          e.t0
                                        ),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Could not change display name: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        Be.dispatch(N());
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 10]]
                            );
                          })
                        )),
                        function (e) {
                          return Ye.apply(this, arguments);
                        }),
                    },
                    {
                      key: "openConnection",
                      value:
                        ((Je = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.payload),
                                        (e.next = 3),
                                        this._protoo
                                          .request("openConnection", {
                                            roomId: r,
                                            payload: n,
                                          })
                                          .catch(function (e) {
                                            throw new Error(e);
                                          })
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Je.apply(this, arguments);
                        }),
                    },
                    {
                      key: "closeConnection",
                      value:
                        (($e = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        this._protoo.request(
                                          "closeConnection",
                                          { roomId: t }
                                        )
                                      );
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return $e.apply(this, arguments);
                        }),
                    },
                    {
                      key: "switchTo",
                      value:
                        ((qe = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.peerIds),
                                        (a = t.payload),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "requestSwitchRoom",
                                          { roomId: r, peerIds: n, payload: a }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return qe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "switchPeerRoom",
                      value:
                        ((Ke = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.peerId),
                                        (n = t.roomId),
                                        (a = t.payload),
                                        (i = t.token),
                                        (e.next = 3),
                                        this._protoo.request("switchPeerRoom", {
                                          roomId: n,
                                          peerId: r,
                                          payload: a,
                                          token: i,
                                        })
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Ke.apply(this, arguments);
                        }),
                    },
                    {
                      key: "connectionSwitchPeerRoom",
                      value:
                        ((ze = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i, s;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.connectionRoomId),
                                        (a = t.peerId),
                                        (i = t.payload),
                                        (s = t.token),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "connectionSwitchPeerRoom",
                                          {
                                            roomId: r,
                                            connectionRoomId: n,
                                            peerId: a,
                                            payload: i,
                                            token: s,
                                          }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return ze.apply(this, arguments);
                        }),
                    },
                    {
                      key: "connectionSendChatMessage",
                      value:
                        ((Ne = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (n = t.message),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "connectionSendChatMessage",
                                          { roomId: r, message: n }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Ne.apply(this, arguments);
                        }),
                    },
                    {
                      key: "connectionEndMeeting",
                      value:
                        ((Me = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.roomId),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "connectionCloseRoom",
                                          { roomId: r }
                                        )
                                      );
                                    case 3:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return Me.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pubsubPublish",
                      value:
                        ((Le = (0, i.Z)(
                          u().mark(function e(t, r, n, a) {
                            var i, s, o, c, d, l;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        ((e.prev = 0), null != n && n.sendOnly)
                                      ) {
                                        if (((i = n.sendOnly), (s = []), i)) {
                                          o = Ae(i);
                                          try {
                                            for (o.s(); !(c = o.n()).done; )
                                              (d = c.value) &&
                                                s.push(d.toString());
                                          } catch (e) {
                                            o.e(e);
                                          } finally {
                                            o.f();
                                          }
                                        }
                                        n.sendOnly = s;
                                      }
                                      return (
                                        (e.next = 4),
                                        this._protoo.request("pubsubPublish", {
                                          topic: t,
                                          message: r,
                                          options: n,
                                          payload: a,
                                        })
                                      );
                                    case 4:
                                      e.next = 10;
                                      break;
                                    case 6:
                                      (e.prev = 6),
                                        (e.t0 = e.catch(0)),
                                        null === (l = this._videosdkLogs) ||
                                          void 0 === l ||
                                          l.pushLogs({
                                            logText:
                                              "Error pubsubPublish() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "pubsubPublish() | failed: %o",
                                          e.t0
                                        );
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[0, 6]]
                            );
                          })
                        )),
                        function (e, t, r, n) {
                          return Le.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pubsubSubscribe",
                      value:
                        ((Ie = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.prev = 0),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "pubsubSubscribe",
                                          { topic: t }
                                        )
                                      );
                                    case 3:
                                      return (
                                        (r = e.sent), e.abrupt("return", r)
                                      );
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(0)),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Error pubsubSubscribe() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "pubsubSubscribe() | failed: %o",
                                          e.t0
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[0, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return Ie.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pubsubUnsubscribe",
                      value:
                        ((Te = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.prev = 0),
                                        (e.next = 3),
                                        this._protoo.request(
                                          "pubsubUnsubscribe",
                                          { topic: t }
                                        )
                                      );
                                    case 3:
                                      e.next = 9;
                                      break;
                                    case 5:
                                      (e.prev = 5),
                                        (e.t0 = e.catch(0)),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText:
                                              "Error pubsubUnsubscribe() | failed",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        We.error(
                                          "pubsubUnsubscribe() | failed: %o",
                                          e.t0
                                        );
                                    case 9:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[0, 5]]
                            );
                          })
                        )),
                        function (e) {
                          return Te.apply(this, arguments);
                        }),
                    },
                    {
                      key: "closeRoom",
                      value:
                        ((Ee = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (e.next = 2),
                                        this._protoo.request("closeRoom", {})
                                      );
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return Ee.apply(this, arguments);
                        }),
                    },
                    {
                      key: "removePeer",
                      value:
                        ((be = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.traceAutoComplete({
                                            spanName: "Removing peer ".concat(
                                              t
                                            ),
                                            status: 1,
                                          }),
                                        null != t)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return (
                                        (e.next = 5),
                                        this._protoo.request("removePeer", {
                                          peerId: t,
                                        })
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return be.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startPingPong",
                      value:
                        ((ye = (0, i.Z)(
                          u().mark(function e() {
                            var t = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      null != this._pingWebsocketInterval &&
                                        clearInterval(
                                          this._pingWebsocketInterval
                                        ),
                                        (this._pingWebsocketInterval =
                                          setInterval(function () {
                                            t.pingWebSocket();
                                          }, 2e3));
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return ye.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pingWebSocket",
                      value:
                        ((ge = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._closed) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      (t = !1),
                                        this._protoo
                                          .request("ping")
                                          .then(function (e) {
                                            e && (t = !0);
                                          })
                                          .catch(function (e) {}),
                                        setTimeout(function () {
                                          if (t) {
                                            if (
                                              !r._isWebsocketAlive ||
                                              r._pingWebsocketFailedCounter > 1
                                            )
                                              r._eventEmitter.emit(
                                                "MEETING_STATE_CHANGED",
                                                { state: "CONNECTED" }
                                              ),
                                                (r._isWebsocketAlive = !0),
                                                (r._pingWebsocketFailedCounter = 0),
                                                r.restartIce();
                                            else if (
                                              "failed" == r._transportState ||
                                              "disconnected" ==
                                                r._transportState
                                            ) {
                                              var e;
                                              (e = console).log.apply(
                                                e,
                                                (0, a.Z)(
                                                  Xe(
                                                    "3400940930_6",
                                                    "Calling Restart Ice based on transport state",
                                                    r._transportState
                                                  )
                                                )
                                              ),
                                                r.restartIce();
                                            }
                                            r._pingWebsocketFailedCounter = 0;
                                          } else r._isWebsocketAlive && r._pingWebsocketFailedCounter > 1 && (r._eventEmitter.emit("MEETING_STATE_CHANGED", { state: "DISCONNECTED" }), (r._isWebsocketAlive = !1), r.startInternetPingPong()), (r._pingWebsocketFailedCounter = r._pingWebsocketFailedCounter + 1);
                                        }, 1e3);
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return ge.apply(this, arguments);
                        }),
                    },
                    {
                      key: "startInternetPingPong",
                      value:
                        ((ve = (0, i.Z)(
                          u().mark(function e() {
                            var t = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      null != this._pingInternetInterval &&
                                        clearInterval(
                                          this._pingInternetInterval
                                        ),
                                        (this._pingInternetInterval =
                                          setInterval(function () {
                                            t.pingInternet();
                                          }, 2e3));
                                    case 2:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return ve.apply(this, arguments);
                        }),
                    },
                    {
                      key: "pingInternet",
                      value:
                        ((me = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._closed) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      return (
                                        null === (t = this._videosdkLogs) ||
                                          void 0 === t ||
                                          t.pushLogs({
                                            logText: "pinging internet",
                                            logType: "INFO",
                                          }),
                                        (e.next = 5),
                                        fetch(
                                          "https://".concat(
                                            this._signalingBaseUrl,
                                            "/ping"
                                          ),
                                          { method: "GET" }
                                        )
                                          .then(function (e) {
                                            return e.text();
                                          })
                                          .catch(function (e) {
                                            var t;
                                            return (
                                              null === (t = a._videosdkLogs) ||
                                                void 0 === t ||
                                                t.pushLogs({
                                                  logText:
                                                    "Error pingInternet failed",
                                                  logType: "ERROR",
                                                  attributes: {
                                                    error: e.message,
                                                  },
                                                }),
                                              "failed"
                                            );
                                          })
                                      );
                                    case 5:
                                      if ("pong" != e.sent) {
                                        e.next = 16;
                                        break;
                                      }
                                      if (
                                        (null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Pong",
                                            logType: "INFO",
                                          }),
                                        !(
                                          this._pingWebsocketFailedCounter >
                                            5 && this._pongInternetCounter > 3
                                        ) || this._isWebsocketAlive)
                                      ) {
                                        e.next = 14;
                                        break;
                                      }
                                      return (
                                        (this._pongInternetCounter = 0),
                                        this.close({ sendLeft: !1 }),
                                        null === (n = this._videosdkLogs) ||
                                          void 0 === n ||
                                          n.pushLogs({
                                            logText:
                                              "Re-join the meeting, after diconnect",
                                            logType: "INFO",
                                          }),
                                        (e.next = 14),
                                        this.join()
                                      );
                                    case 14:
                                      (this._pongInternetCounter =
                                        this._pongInternetCounter + 1),
                                        this._isWebsocketAlive &&
                                          ((this._pongInternetCounter = 0),
                                          null != this._pingInternetInterval &&
                                            (clearInterval(
                                              this._pingInternetInterval
                                            ),
                                            (this._pingInternetInterval =
                                              null)));
                                    case 16:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return me.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getSendTransportRemoteStats",
                      value:
                        ((fe = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getSendTransportRemoteStats()"
                                        ),
                                        this._sendTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getTransportStats",
                                          {
                                            transportId: this._sendTransport.id,
                                          }
                                        )
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return fe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getRecvTransportRemoteStats",
                      value:
                        ((_e = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getRecvTransportRemoteStats()"
                                        ),
                                        this._recvTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getTransportStats",
                                          {
                                            transportId: this._recvTransport.id,
                                          }
                                        )
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return _e.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getAudioRemoteStats",
                      value:
                        ((he = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("getAudioRemoteStats()"),
                                        this._micProducer)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._latestStats[this._micProducer.id]
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return he.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getVideoRemoteStats",
                      value:
                        ((pe = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("getVideoRemoteStats()"),
                                        (t = this._webcamProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._latestStats[t.id]
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return pe.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getShareRemoteStats",
                      value:
                        ((le = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("getVideoRemoteStats()"),
                                        (t = this._shareProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._latestStats[t.id]
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return le.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getConsumerRemoteStats",
                      value:
                        ((de = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("getConsumerRemoteStats()"),
                                        (r = this._consumers.get(t)))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return (
                                        this._latestStats[t] &&
                                          ((this._latestStats[
                                            t
                                          ][0].currentSpatialLayer =
                                            r.currentSpatialLayer),
                                          (this._latestStats[
                                            t
                                          ][0].currentTemporalLayer =
                                            r.currentTemporalLayer),
                                          (this._latestStats[
                                            t
                                          ][0].preferredSpatialLayer =
                                            r.preferredSpatialLayer),
                                          (this._latestStats[
                                            t
                                          ][0].preferredTemporalLayer =
                                            r.preferredTemporalLayer)),
                                        e.abrupt("return", this._latestStats[t])
                                      );
                                    case 6:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return de.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getChatDataProducerRemoteStats",
                      value:
                        ((C = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getChatDataProducerRemoteStats()"
                                        ),
                                        (t = this._chatDataProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getDataProducerStats",
                                          { dataProducerId: t.id }
                                        )
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return C.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getBotDataProducerRemoteStats",
                      value:
                        ((k = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getBotDataProducerRemoteStats()"
                                        ),
                                        (t = this._botDataProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getDataProducerStats",
                                          { dataProducerId: t.id }
                                        )
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return k.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getDataConsumerRemoteStats",
                      value:
                        ((R = (0, i.Z)(
                          u().mark(function e(t) {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getDataConsumerRemoteStats()"
                                        ),
                                        this._dataConsumers.get(t))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt(
                                        "return",
                                        this._protoo.request(
                                          "getDataConsumerStats",
                                          { dataConsumerId: t }
                                        )
                                      );
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return R.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getSendTransportLocalStats",
                      value:
                        ((w = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getSendTransportLocalStats()"
                                        ),
                                        this._sendTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._sendTransport.getStats()
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return w.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getRecvTransportLocalStats",
                      value:
                        ((S = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug(
                                          "getRecvTransportLocalStats()"
                                        ),
                                        this._recvTransport)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._recvTransport.getStats()
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return S.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getAudioLocalStats",
                      value:
                        ((T = (0, i.Z)(
                          u().mark(function e() {
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("getAudioLocalStats()"),
                                        this._micProducer)
                                      ) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt(
                                        "return",
                                        this._micProducer.getStats()
                                      );
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return T.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getVideoLocalStats",
                      value:
                        ((E = (0, i.Z)(
                          u().mark(function e() {
                            var t;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (
                                        (We.debug("getVideoLocalStats()"),
                                        (t =
                                          this._webcamProducer ||
                                          this._shareProducer))
                                      ) {
                                        e.next = 4;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 4:
                                      return e.abrupt("return", t.getStats());
                                    case 5:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return E.apply(this, arguments);
                        }),
                    },
                    {
                      key: "getConsumerLocalStats",
                      value:
                        ((x = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if ((r = this._consumers.get(t))) {
                                        e.next = 3;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 3:
                                      return e.abrupt("return", r.getStats());
                                    case 4:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e) {
                          return x.apply(this, arguments);
                        }),
                    },
                    {
                      key: "applyNetworkThrottle",
                      value:
                        ((y = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a, i;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.uplink),
                                        (n = t.downlink),
                                        (a = t.rtt),
                                        (i = t.secret),
                                        We.debug(
                                          "applyNetworkThrottle() [uplink:%s, downlink:%s, rtt:%s]",
                                          r,
                                          n,
                                          a
                                        ),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "applyNetworkThrottle",
                                          {
                                            uplink: r,
                                            downlink: n,
                                            rtt: a,
                                            secret: i,
                                          }
                                        )
                                      );
                                    case 5:
                                      e.next = 11;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        We.error(
                                          "applyNetworkThrottle() | failed:%o",
                                          e.t0
                                        ),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error applying network throttle: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 11:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return y.apply(this, arguments);
                        }),
                    },
                    {
                      key: "resetNetworkThrottle",
                      value:
                        ((g = (0, i.Z)(
                          u().mark(function e(t) {
                            var r, n, a;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (r = t.silent),
                                        (n = void 0 !== r && r),
                                        (a = t.secret),
                                        We.debug("resetNetworkThrottle()"),
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request(
                                          "resetNetworkThrottle",
                                          { secret: a }
                                        )
                                      );
                                    case 5:
                                      e.next = 10;
                                      break;
                                    case 7:
                                      (e.prev = 7),
                                        (e.t0 = e.catch(2)),
                                        n ||
                                          (We.error(
                                            "resetNetworkThrottle() | failed:%o",
                                            e.t0
                                          ),
                                          Be.dispatch(
                                            oe({
                                              type: "error",
                                              text: "Error resetting network throttle: ".concat(
                                                e.t0
                                              ),
                                            })
                                          ));
                                    case 10:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 7]]
                            );
                          })
                        )),
                        function (e) {
                          return g.apply(this, arguments);
                        }),
                    },
                    {
                      key: "createProducerTransport",
                      value:
                        ((v = (0, i.Z)(
                          u().mark(function e(t, r) {
                            var n,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h,
                              _,
                              f,
                              m = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (o = t.id),
                                        (c = t.iceParameters),
                                        (d = t.iceCandidates),
                                        (l = t.dtlsParameters),
                                        (p = t.sctpParameters),
                                        (e.next = 3),
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "Creating Send Transport",
                                              span: r || null,
                                            })
                                      );
                                    case 3:
                                      (h = e.sent),
                                        (this._sendTransport =
                                          this._mediasoupDevice.createSendTransport(
                                            {
                                              id: o,
                                              iceParameters: c,
                                              iceCandidates: d,
                                              dtlsParameters: l,
                                              sctpParameters: p,
                                              iceServers: this._iceServers,
                                            }
                                          )),
                                        this._sendTransport.on(
                                          "connect",
                                          function (e, t, r) {
                                            var n,
                                              a = e.dtlsParameters;
                                            null === (n = m._openTelemetry) ||
                                              void 0 === n ||
                                              n.traceAutoComplete({
                                                spanName:
                                                  "this._sendTransport `connect` Event : Transport is about to establish the ICE+DTLS connection",
                                                status: 1,
                                              }),
                                              m._protoo
                                                .request(
                                                  "connectWebRtcTransport",
                                                  {
                                                    transportId:
                                                      m._sendTransport.id,
                                                    dtlsParameters: a,
                                                  }
                                                )
                                                .then(t)
                                                .catch(r);
                                          }
                                        ),
                                        this._sendTransport.on(
                                          "produce",
                                          (function () {
                                            var e = (0, i.Z)(
                                              u().mark(function e(t, r, n) {
                                                var a, i, s, o, c, d, l;
                                                return u().wrap(
                                                  function (e) {
                                                    for (;;)
                                                      switch (
                                                        (e.prev = e.next)
                                                      ) {
                                                        case 0:
                                                          return (
                                                            (a = t.kind),
                                                            (i =
                                                              t.rtpParameters),
                                                            (s = t.appData),
                                                            (e.prev = 1),
                                                            null ===
                                                              (o =
                                                                m._openTelemetry) ||
                                                              void 0 === o ||
                                                              o.traceAutoComplete(
                                                                {
                                                                  spanName:
                                                                    "this._sendTransport `produce` Event : Transmit information about a new producer ",
                                                                  status: 1,
                                                                }
                                                              ),
                                                            (e.next = 5),
                                                            m._protoo.request(
                                                              "produce",
                                                              {
                                                                transportId:
                                                                  m
                                                                    ._sendTransport
                                                                    .id,
                                                                kind: a,
                                                                rtpParameters:
                                                                  i,
                                                                appData: s,
                                                              }
                                                            )
                                                          );
                                                        case 5:
                                                          (c = e.sent),
                                                            (d = c.id),
                                                            r({ id: d }),
                                                            (e.next = 14);
                                                          break;
                                                        case 10:
                                                          (e.prev = 10),
                                                            (e.t0 = e.catch(1)),
                                                            null ===
                                                              (l =
                                                                m._videosdkLogs) ||
                                                              void 0 === l ||
                                                              l.pushLogs({
                                                                logText:
                                                                  'Error this._sendTransport "produce" Event catch',
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t0
                                                                      .message,
                                                                },
                                                              }),
                                                            n(e.t0);
                                                        case 14:
                                                        case "end":
                                                          return e.stop();
                                                      }
                                                  },
                                                  e,
                                                  null,
                                                  [[1, 10]]
                                                );
                                              })
                                            );
                                            return function (t, r, n) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        ),
                                        this._sendTransport.on(
                                          "producedata",
                                          (function () {
                                            var e = (0, i.Z)(
                                              u().mark(function e(t, r, n) {
                                                var a, i, s, o, c, d, l;
                                                return u().wrap(
                                                  function (e) {
                                                    for (;;)
                                                      switch (
                                                        (e.prev = e.next)
                                                      ) {
                                                        case 0:
                                                          return (
                                                            (a =
                                                              t.sctpStreamParameters),
                                                            (i = t.label),
                                                            (s = t.protocol),
                                                            (o = t.appData),
                                                            We.debug(
                                                              '"producedata" event: [sctpStreamParameters:%o, appData:%o]',
                                                              a,
                                                              o
                                                            ),
                                                            (e.prev = 2),
                                                            (e.next = 5),
                                                            m._protoo.request(
                                                              "produceData",
                                                              {
                                                                transportId:
                                                                  m
                                                                    ._sendTransport
                                                                    .id,
                                                                sctpStreamParameters:
                                                                  a,
                                                                label: i,
                                                                protocol: s,
                                                                appData: o,
                                                              }
                                                            )
                                                          );
                                                        case 5:
                                                          (c = e.sent),
                                                            (d = c.id),
                                                            r({ id: d }),
                                                            (e.next = 14);
                                                          break;
                                                        case 10:
                                                          (e.prev = 10),
                                                            (e.t0 = e.catch(2)),
                                                            null ===
                                                              (l =
                                                                m._videosdkLogs) ||
                                                              void 0 === l ||
                                                              l.pushLogs({
                                                                logText:
                                                                  "Error producedata event catch",
                                                                logType:
                                                                  "ERROR",
                                                                attributes: {
                                                                  error:
                                                                    e.t0
                                                                      .message,
                                                                },
                                                              }),
                                                            n(e.t0);
                                                        case 14:
                                                        case "end":
                                                          return e.stop();
                                                      }
                                                  },
                                                  e,
                                                  null,
                                                  [[2, 10]]
                                                );
                                              })
                                            );
                                            return function (t, r, n) {
                                              return e.apply(this, arguments);
                                            };
                                          })()
                                        ),
                                        this._sendTransport.on(
                                          "connectionstatechange",
                                          function (e) {
                                            var t;
                                            null === (t = m._openTelemetry) ||
                                              void 0 === t ||
                                              t.traceAutoComplete({
                                                spanName:
                                                  "_sendTransport Event connectionstatechange ".concat(
                                                    e
                                                  ),
                                                status: 1,
                                              }),
                                              "failed" === e && m.restartIce(),
                                              (m._transportState = e);
                                          }
                                        ),
                                        (_ = 0),
                                        ((f = this._metrics.addNewProbe(
                                          this._sendTransport,
                                          "sendTransport"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            var t, r, n, i;
                                            m._stats.producerStats ||
                                              (m._stats.producerStats = {}),
                                              m._stats.producerStats.audio ||
                                                (m._stats.producerStats.audio =
                                                  []),
                                              m._stats.producerStats
                                                .shareAudio ||
                                                (m._stats.producerStats.shareAudio =
                                                  []),
                                              m._micProducer &&
                                                (m._latestStats[
                                                  null ===
                                                    (t = m._micProducer) ||
                                                  void 0 === t
                                                    ? void 0
                                                    : t.id
                                                ] = []),
                                              m._shareAudioProducer &&
                                                (m._latestStats[
                                                  null ===
                                                    (r =
                                                      m._shareAudioProducer) ||
                                                  void 0 === r
                                                    ? void 0
                                                    : r.id
                                                ] = []),
                                              e.audio.forEach(function (e) {
                                                var t, r, n;
                                                if (
                                                  m._micProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (t = m._micProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.track.id)
                                                )
                                                  m._latestStats[
                                                    null ===
                                                      (n = m._micProducer) ||
                                                    void 0 === n
                                                      ? void 0
                                                      : n.id
                                                  ].push(e),
                                                    _ % 5 == 0 &&
                                                      m._stats.producerStats.audio.push(
                                                        e
                                                      );
                                                else if (
                                                  m._shareAudioProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (r =
                                                        m._shareAudioProducer) ||
                                                    void 0 === r
                                                      ? void 0
                                                      : r.track.id)
                                                ) {
                                                  var a;
                                                  m._latestStats[
                                                    null ===
                                                      (a =
                                                        m._shareAudioProducer) ||
                                                    void 0 === a
                                                      ? void 0
                                                      : a.id
                                                  ].push(e),
                                                    _ % 5 == 0 &&
                                                      m._stats.producerStats.shareAudio.push(
                                                        e
                                                      );
                                                }
                                              }),
                                              m._stats.producerStats.video ||
                                                (m._stats.producerStats.video =
                                                  []),
                                              m._stats.producerStats.share ||
                                                (m._stats.producerStats.share =
                                                  []),
                                              m._webcamProducer &&
                                                (m._latestStats[
                                                  null ===
                                                    (n = m._webcamProducer) ||
                                                  void 0 === n
                                                    ? void 0
                                                    : n.id
                                                ] = []),
                                              m._shareProducer &&
                                                (m._latestStats[
                                                  null ===
                                                    (i = m._shareProducer) ||
                                                  void 0 === i
                                                    ? void 0
                                                    : i.id
                                                ] = []),
                                              e.video.forEach(function (e) {
                                                var t, r, n;
                                                if (
                                                  m._webcamProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (t = m._webcamProducer) ||
                                                    void 0 === t
                                                      ? void 0
                                                      : t.track.id)
                                                )
                                                  m._latestStats[
                                                    null ===
                                                      (n = m._webcamProducer) ||
                                                    void 0 === n
                                                      ? void 0
                                                      : n.id
                                                  ].push(e);
                                                else if (
                                                  m._shareProducer &&
                                                  e.trackId ==
                                                    (null ===
                                                      (r = m._shareProducer) ||
                                                    void 0 === r
                                                      ? void 0
                                                      : r.track.id)
                                                ) {
                                                  var a;
                                                  m._latestStats[
                                                    null ===
                                                      (a = m._shareProducer) ||
                                                    void 0 === a
                                                      ? void 0
                                                      : a.id
                                                  ].push(e);
                                                }
                                              }),
                                              _ % 5 == 0 &&
                                                null != m._webcamProducer &&
                                                m._stats.producerStats.video.push(
                                                  {
                                                    timestamp: new Date(),
                                                    stats:
                                                      m._latestStats[
                                                        m._webcamProducer.id
                                                      ],
                                                  }
                                                ),
                                              _ % 5 == 0 &&
                                                null != m._shareProducer &&
                                                m._stats.producerStats.share.push(
                                                  {
                                                    timestamp: new Date(),
                                                    stats:
                                                      m._latestStats[
                                                        m._shareProducer.id
                                                      ],
                                                  }
                                                ),
                                              _++;
                                          } catch (e) {
                                            var s, o;
                                            null === (s = m._videosdkLogs) ||
                                              void 0 === s ||
                                              s.pushLogs({
                                                logText:
                                                  "Error PRODUCER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              (o = console).log.apply(
                                                o,
                                                (0, a.Z)(
                                                  Xe(
                                                    "3400940930_7",
                                                    "PRODUCER ERROR",
                                                    e
                                                  )
                                                )
                                              );
                                          }
                                        }),
                                        f.start(),
                                        this._sendTransport.observer.on(
                                          "close",
                                          function () {
                                            f.stop(),
                                              m._metrics.removeExistingProbe(f);
                                          }
                                        ),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: h,
                                            status: 1,
                                            message:
                                              "Send Transport Created Successfully",
                                          });
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return v.apply(this, arguments);
                        }),
                    },
                    {
                      key: "createConsumerTransport",
                      value:
                        ((m = (0, i.Z)(
                          u().mark(function e(t, r) {
                            var n,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h,
                              _,
                              f = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (s = t.id),
                                        (o = t.iceParameters),
                                        (c = t.iceCandidates),
                                        (d = t.dtlsParameters),
                                        (l = t.sctpParameters),
                                        (e.next = 3),
                                        null === (n = this._openTelemetry) ||
                                        void 0 === n
                                          ? void 0
                                          : n.trace({
                                              spanName:
                                                "Creating Recieve Transport",
                                              span: r || null,
                                            })
                                      );
                                    case 3:
                                      (p = e.sent),
                                        (this._recvTransport =
                                          this._mediasoupDevice.createRecvTransport(
                                            {
                                              id: s,
                                              iceParameters: o,
                                              iceCandidates: c,
                                              dtlsParameters: d,
                                              sctpParameters: l,
                                              iceServers: this._iceServers,
                                            }
                                          )),
                                        this._recvTransport.on(
                                          "connect",
                                          function (e, t, r) {
                                            var n,
                                              a = e.dtlsParameters;
                                            null === (n = f._openTelemetry) ||
                                              void 0 === n ||
                                              n.traceAutoComplete({
                                                spanName:
                                                  "this._recvTransport `connect` Event : Recieve Transport is about to establish the ICE+DTLS connection",
                                                status: 1,
                                              }),
                                              f._protoo
                                                .request(
                                                  "connectWebRtcTransport",
                                                  {
                                                    transportId:
                                                      f._recvTransport.id,
                                                    dtlsParameters: a,
                                                  }
                                                )
                                                .then(t)
                                                .catch(r);
                                          }
                                        ),
                                        this._recvTransport.on(
                                          "connectionstatechange",
                                          function (e) {
                                            var t;
                                            null === (t = f._openTelemetry) ||
                                              void 0 === t ||
                                              t.traceAutoComplete({
                                                spanName:
                                                  "_recvTransport Event connectionstatechange ".concat(
                                                    e
                                                  ),
                                                status: 1,
                                              }),
                                              "failed" === e && f.restartIce(),
                                              (f._transportState = e);
                                          }
                                        ),
                                        (h = 0),
                                        ((_ = this._metrics.addNewProbe(
                                          this._recvTransport,
                                          "transport"
                                        )).onStatsCollected = function (e) {
                                          try {
                                            e.audio.forEach(function (e) {
                                              var t = f._consumers.get(
                                                e.trackId
                                              );
                                              if (null != t) {
                                                var r =
                                                  1 == t.appData.share
                                                    ? "audio" == t.kind
                                                      ? "shareAudio"
                                                      : "share"
                                                    : t.kind;
                                                f._stats.consumerStats ||
                                                  (f._stats.consumerStats = {}),
                                                  f._stats.consumerStats[
                                                    t.appData.peerId
                                                  ] ||
                                                    (f._stats.consumerStats[
                                                      t.appData.peerId
                                                    ] = {}),
                                                  f._stats.consumerStats[
                                                    t.appData.peerId
                                                  ][r] ||
                                                    (f._stats.consumerStats[
                                                      t.appData.peerId
                                                    ][r] = []),
                                                  e.trackId == t.id &&
                                                    ((f._latestStats[t.id] =
                                                      []),
                                                    f._latestStats[t.id].push(
                                                      e
                                                    ),
                                                    h % 5 == 0 &&
                                                      f._stats.consumerStats[
                                                        t.appData.peerId
                                                      ][r].push(e));
                                              }
                                            }),
                                              e.video.forEach(function (e) {
                                                var t = f._consumers.get(
                                                  e.trackId
                                                );
                                                if (null != t) {
                                                  var r =
                                                    1 == t.appData.share
                                                      ? "audio" == t.kind
                                                        ? "shareAudio"
                                                        : "share"
                                                      : t.kind;
                                                  f._stats.consumerStats ||
                                                    (f._stats.consumerStats =
                                                      {}),
                                                    f._stats.consumerStats[
                                                      t.appData.peerId
                                                    ] ||
                                                      (f._stats.consumerStats[
                                                        t.appData.peerId
                                                      ] = {}),
                                                    f._stats.consumerStats[
                                                      t.appData.peerId
                                                    ][r] ||
                                                      (f._stats.consumerStats[
                                                        t.appData.peerId
                                                      ][r] = []),
                                                    e.trackId == t.id &&
                                                      ((f._latestStats[t.id] =
                                                        []),
                                                      f._latestStats[t.id].push(
                                                        e
                                                      ),
                                                      h % 5 == 0 &&
                                                        f._stats.consumerStats[
                                                          t.appData.peerId
                                                        ][r].push(e));
                                                }
                                              }),
                                              h++;
                                          } catch (e) {
                                            var t, r;
                                            null === (t = f._videosdkLogs) ||
                                              void 0 === t ||
                                              t.pushLogs({
                                                logText:
                                                  "Error CONSUMER Stats ERROR",
                                                logType: "ERROR",
                                                attributes: {
                                                  error: e.message,
                                                },
                                              }),
                                              (r = console).log.apply(
                                                r,
                                                (0, a.Z)(
                                                  Xe(
                                                    "3400940930_8",
                                                    "CONSUMER CATCH",
                                                    e
                                                  )
                                                )
                                              );
                                          }
                                        }),
                                        _.start(),
                                        this._recvTransport.observer.on(
                                          "close",
                                          function () {
                                            _.stop(),
                                              f._metrics.removeExistingProbe(_);
                                          }
                                        ),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.completeSpan({
                                            span: p,
                                            status: 1,
                                            message:
                                              "Recieve Transport Created Successfully",
                                          });
                                    case 13:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function (e, t) {
                          return m.apply(this, arguments);
                        }),
                    },
                    {
                      key: "joinRoom",
                      value:
                        ((f = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              d,
                              l,
                              h,
                              _,
                              f,
                              m,
                              v,
                              g,
                              y,
                              b,
                              x,
                              E,
                              T,
                              S,
                              w,
                              R,
                              P,
                              k;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        We.debug("joinRoom()"),
                                        (e.prev = 1),
                                        (e.next = 4),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "Loading Router Capabilities",
                                              span: this._joinSpan,
                                            })
                                      );
                                    case 4:
                                      return (
                                        (o = e.sent),
                                        (this._mediasoupDevice = new p.Device({
                                          handlerName: this._handlerName,
                                        })),
                                        (e.next = 8),
                                        this._protoo.request(
                                          "getRouterRtpCapabilities"
                                        )
                                      );
                                    case 8:
                                      return (
                                        (d = e.sent),
                                        null == o ||
                                          o.setAttributes(
                                            (0, c.Z)(
                                              {},
                                              "routerRtpCapabilities",
                                              JSON.stringify(d).toString()
                                            )
                                          ),
                                        (e.next = 12),
                                        this._mediasoupDevice.load({
                                          routerRtpCapabilities: d,
                                        })
                                      );
                                    case 12:
                                      if (
                                        (null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.completeSpan({
                                            span: o,
                                            status: 1,
                                            message:
                                              "Router Capabilities Loaded",
                                          }),
                                        !this._produce)
                                      ) {
                                        e.next = 18;
                                        break;
                                      }
                                      return (
                                        (e.next = 16),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !0,
                                            consuming: !1,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 16:
                                      (l = e.sent),
                                        this.createProducerTransport(
                                          l,
                                          this._joinSpan
                                        );
                                    case 18:
                                      if (!this._consume) {
                                        e.next = 23;
                                        break;
                                      }
                                      return (
                                        (e.next = 21),
                                        this._protoo.request(
                                          "createWebRtcTransport",
                                          {
                                            preferredProtocol:
                                              this._preferredProtocol,
                                            producing: !1,
                                            consuming: !0,
                                            sctpCapabilities: this
                                              ._useDataChannel
                                              ? this._mediasoupDevice
                                                  .sctpCapabilities
                                              : void 0,
                                          }
                                        )
                                      );
                                    case 21:
                                      (h = e.sent),
                                        this.createConsumerTransport(
                                          h,
                                          this._joinSpan
                                        );
                                    case 23:
                                      return (
                                        (e.next = 25),
                                        this._protoo.request("join", {
                                          displayName: this._displayName,
                                          device: this._device,
                                          secret: this._secret,
                                          rtpCapabilities:
                                            null ===
                                              (n = this._mediasoupDevice) ||
                                            void 0 === n
                                              ? void 0
                                              : n.rtpCapabilities,
                                          sctpCapabilities:
                                            null ===
                                              (a = this._mediasoupDevice) ||
                                            void 0 === a
                                              ? void 0
                                              : a.sctpCapabilities,
                                          deviceInfo: this._deviceInfo,
                                          autoConsume: this._autoConsume,
                                          metaData: this._metaData,
                                        })
                                      );
                                    case 25:
                                      (_ = e.sent),
                                        (f = _.peers),
                                        (m = _.poll),
                                        (v = _.messages),
                                        Be.dispatch(I("connected")),
                                        null === (i = this._openTelemetry) ||
                                          void 0 === i ||
                                          i.traceAutoComplete({
                                            spanName:
                                              "Emitted `MEETING_JOINED` Event",
                                            status: 1,
                                          }),
                                        this._eventEmitter.emit(
                                          "MEETING_JOINED",
                                          {
                                            peers: f,
                                            poll: m,
                                            messages: v,
                                            baseUrl: this._baseUrl,
                                          }
                                        ),
                                        Be.dispatch({
                                          type: "REMOVE_ALL_NOTIFICATIONS",
                                        }),
                                        Be.dispatch(
                                          oe({
                                            text: "You are in the room!",
                                            timeout: 3e3,
                                          })
                                        ),
                                        (g = Ae(f));
                                      try {
                                        for (g.s(); !(y = g.n()).done; )
                                          (b = y.value),
                                            (x = X(
                                              je(
                                                je({}, b),
                                                {},
                                                {
                                                  consumers: [],
                                                  dataConsumers: [],
                                                }
                                              )
                                            )),
                                            Be.dispatch(x),
                                            this._eventEmitter.emit(
                                              x.type,
                                              x.payload
                                            );
                                      } catch (e) {
                                        g.e(e);
                                      } finally {
                                        g.f();
                                      }
                                      this._produce &&
                                        (Be.dispatch(
                                          A({
                                            canSendMic:
                                              this._mediasoupDevice.canProduce(
                                                "audio"
                                              ),
                                            canSendWebcam:
                                              this._mediasoupDevice.canProduce(
                                                "video"
                                              ),
                                          })
                                        ),
                                        this._micEnabled
                                          ? this.enableMic(
                                              this.customMicrophoneAudioTrack,
                                              this._joinSpan
                                            )
                                          : this.customMicrophoneAudioTrack &&
                                            (null ===
                                              (E = this._openTelemetry) ||
                                              void 0 === E ||
                                              E.traceAutoComplete({
                                                spanName:
                                                  "Disposing Audio Track",
                                                status: 2,
                                              }),
                                            this.customMicrophoneAudioTrack
                                              .getTracks()
                                              .forEach(function (e) {
                                                e.stop();
                                              })),
                                        (T = O()),
                                        this._webcamEnabled &&
                                        (!T ||
                                          T.webcamEnabled ||
                                          this._externalVideo)
                                          ? this.enableWebcam(
                                              this.customCameraVideoTrack,
                                              this._joinSpan
                                            )
                                          : this.customCameraVideoTrack &&
                                            (null ===
                                              (S = this._openTelemetry) ||
                                              void 0 === S ||
                                              S.traceAutoComplete({
                                                spanName:
                                                  "Disposing Video Track",
                                                status: 2,
                                              }),
                                            this.customCameraVideoTrack
                                              .getTracks()
                                              .forEach(function (e) {
                                                e.stop();
                                              })),
                                        this.enableChatDataProducer()),
                                        window.SHOW_INFO &&
                                          ((w = Be.getState()),
                                          (R = w.me),
                                          Be.dispatch(D(R.id))),
                                        null === (s = this._openTelemetry) ||
                                          void 0 === s ||
                                          s.completeSpan({
                                            span: this._joinSpan,
                                            status: 1,
                                            message: "Room Joined",
                                          }),
                                        (e.next = 48);
                                      break;
                                    case 41:
                                      (e.prev = 41),
                                        (e.t0 = e.catch(1)),
                                        We.error("joinRoom() failed:%o", e.t0),
                                        null === (P = this._videosdkLogs) ||
                                          void 0 === P ||
                                          P.pushLogs({
                                            logText:
                                              "Error Could not join the room",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        null === (k = this._openTelemetry) ||
                                          void 0 === k ||
                                          k.completeSpan({
                                            span: this._joinSpan,
                                            status: 2,
                                            message:
                                              "Could not join the room ".concat(
                                                e.t0
                                              ),
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Could not join the room: ".concat(
                                              e.t0
                                            ),
                                          })
                                        ),
                                        this.close({ sendLeft: !0 });
                                    case 48:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[1, 41]]
                            );
                          })
                        )),
                        function () {
                          return f.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_updateMics",
                      value:
                        ((_ = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n =
                                          h.length > 0 && void 0 !== h[0]
                                            ? h[0]
                                            : void 0),
                                        (this._mics = new Map()),
                                        We.debug("_updateMics() |"),
                                        (e.next = 5),
                                        navigator.mediaDevices.enumerateDevices()
                                      );
                                    case 5:
                                      return (
                                        (a = e.sent),
                                        (e.next = 8),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "_updateMics() Calling for Getting System Mic list",
                                              attributes: {
                                                systemDevice: a
                                                  ? JSON.stringify(a)
                                                  : "Device not found",
                                              },
                                              span: n || null,
                                            })
                                      );
                                    case 8:
                                      (i = e.sent), (s = Ae(a));
                                      try {
                                        for (s.s(); !(o = s.n()).done; )
                                          "audioinput" == (c = o.value).kind &&
                                            this._mics.set(c.deviceId, c);
                                      } catch (e) {
                                        s.e(e);
                                      } finally {
                                        s.f();
                                      }
                                      (d = Array.from(this._mics.values())),
                                        (l = d.length),
                                        (p = this._mic.device
                                          ? this._mic.device.deviceId
                                          : void 0),
                                        0 === l
                                          ? (this._mic.device = null)
                                          : this._mics.has(p) ||
                                            (this._mic.device = d[0]),
                                        "react-native" !=
                                          this._deviceInfo.sdkType &&
                                          this._tracesEnabled &&
                                          i.setAttribute({
                                            "this._mic": JSON.stringify(
                                              this._mic
                                            ),
                                          }),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Update Mic",
                                          });
                                    case 17:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return _.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_updateWebcams",
                      value:
                        ((h = (0, i.Z)(
                          u().mark(function e() {
                            var t,
                              r,
                              n,
                              a,
                              i,
                              s,
                              o,
                              c,
                              d,
                              l,
                              p,
                              h = arguments;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      return (
                                        (n =
                                          h.length > 0 && void 0 !== h[0]
                                            ? h[0]
                                            : void 0),
                                        We.debug("_updateWebcams()"),
                                        (this._webcams = new Map()),
                                        We.debug(
                                          "_updateWebcams() | calling enumerateDevices()"
                                        ),
                                        (e.next = 6),
                                        navigator.mediaDevices.enumerateDevices()
                                      );
                                    case 6:
                                      return (
                                        (a = e.sent),
                                        (e.next = 9),
                                        null === (t = this._openTelemetry) ||
                                        void 0 === t
                                          ? void 0
                                          : t.trace({
                                              spanName:
                                                "_updateWebcams() Calling for Getting System Webcam list",
                                              attributes: {
                                                systemDevice: a
                                                  ? JSON.stringify(a)
                                                  : "Device not found",
                                              },
                                              span: n || null,
                                            })
                                      );
                                    case 9:
                                      (i = e.sent),
                                        (s = Ae(a)),
                                        (e.prev = 11),
                                        s.s();
                                    case 13:
                                      if ((o = s.n()).done) {
                                        e.next = 20;
                                        break;
                                      }
                                      if ("videoinput" === (c = o.value).kind) {
                                        e.next = 17;
                                        break;
                                      }
                                      return e.abrupt("continue", 18);
                                    case 17:
                                      this._webcams.set(c.deviceId, c);
                                    case 18:
                                      e.next = 13;
                                      break;
                                    case 20:
                                      e.next = 25;
                                      break;
                                    case 22:
                                      (e.prev = 22),
                                        (e.t0 = e.catch(11)),
                                        s.e(e.t0);
                                    case 25:
                                      return (e.prev = 25), s.f(), e.finish(25);
                                    case 28:
                                      (d = Array.from(this._webcams.values())),
                                        (l = d.length),
                                        (p = this._webcam.device
                                          ? this._webcam.device.deviceId
                                          : void 0),
                                        We.debug(
                                          "_updateWebcams() [webcams:%o]",
                                          d
                                        ),
                                        0 === l
                                          ? (this._webcam.device = null)
                                          : this._webcams.has(p) ||
                                            (this._webcam.device = d[0]),
                                        "react-native" !=
                                          this._deviceInfo.sdkType &&
                                          this._tracesEnabled &&
                                          i.setAttribute({
                                            "this._webcams": JSON.stringify(
                                              this._webcam
                                            ),
                                          }),
                                        null === (r = this._openTelemetry) ||
                                          void 0 === r ||
                                          r.completeSpan({
                                            span: i,
                                            status: 1,
                                            message: "Update Webcam",
                                          }),
                                        Be.dispatch(M(this._webcams.size > 1));
                                    case 36:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[11, 22, 25, 28]]
                            );
                          })
                        )),
                        function () {
                          return h.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_getWebcamType",
                      value: function (e) {
                        return /(back|rear)/i.test(e.label)
                          ? (We.debug(
                              "_getWebcamType() | it seems to be a back camera"
                            ),
                            "back")
                          : (We.debug(
                              "_getWebcamType() | it seems to be a front camera"
                            ),
                            "front");
                      },
                    },
                    {
                      key: "_pauseConsumer",
                      value:
                        ((d = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!t.paused) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      return (
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("pauseConsumer", {
                                          consumerId: t.id,
                                        })
                                      );
                                    case 5:
                                      t.pause(),
                                        Be.dispatch(Q(t.id, "local")),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(2)),
                                        We.error(
                                          "_pauseConsumer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error pausing Consumer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error pausing Consumer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 9]]
                            );
                          })
                        )),
                        function (e) {
                          return d.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_resumeConsumer",
                      value:
                        ((r = (0, i.Z)(
                          u().mark(function e(t) {
                            var r;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (t.paused) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt("return");
                                    case 2:
                                      return (
                                        (e.prev = 2),
                                        (e.next = 5),
                                        this._protoo.request("resumeConsumer", {
                                          consumerId: t.id,
                                        })
                                      );
                                    case 5:
                                      t.resume(),
                                        Be.dispatch(ee(t.id, "local")),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      (e.prev = 9),
                                        (e.t0 = e.catch(2)),
                                        We.error(
                                          "_resumeConsumer() | failed:%o",
                                          e.t0
                                        ),
                                        null === (r = this._videosdkLogs) ||
                                          void 0 === r ||
                                          r.pushLogs({
                                            logText: "Error resuming Consumer",
                                            logType: "ERROR",
                                            attributes: { error: e.t0.message },
                                          }),
                                        Be.dispatch(
                                          oe({
                                            type: "error",
                                            text: "Error resuming Consumer: ".concat(
                                              e.t0
                                            ),
                                          })
                                        );
                                    case 14:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this,
                              [[2, 9]]
                            );
                          })
                        )),
                        function (e) {
                          return r.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_getExternalVideoStream",
                      value:
                        ((t = (0, i.Z)(
                          u().mark(function e() {
                            var t = this;
                            return u().wrap(
                              function (e) {
                                for (;;)
                                  switch ((e.prev = e.next)) {
                                    case 0:
                                      if (!this._externalVideoStream) {
                                        e.next = 2;
                                        break;
                                      }
                                      return e.abrupt(
                                        "return",
                                        this._externalVideoStream
                                      );
                                    case 2:
                                      if (
                                        !(this._externalVideo.readyState < 3)
                                      ) {
                                        e.next = 5;
                                        break;
                                      }
                                      return (
                                        (e.next = 5),
                                        new Promise(function (e) {
                                          return t._externalVideo.addEventListener(
                                            "canplay",
                                            e
                                          );
                                        })
                                      );
                                    case 5:
                                      if (!this._externalVideo.captureStream) {
                                        e.next = 9;
                                        break;
                                      }
                                      (this._externalVideoStream =
                                        this._externalVideo.captureStream()),
                                        (e.next = 14);
                                      break;
                                    case 9:
                                      if (
                                        !this._externalVideo.mozCaptureStream
                                      ) {
                                        e.next = 13;
                                        break;
                                      }
                                      (this._externalVideoStream =
                                        this._externalVideo.mozCaptureStream()),
                                        (e.next = 14);
                                      break;
                                    case 13:
                                      throw new Error(
                                        "video.captureStream() not supported"
                                      );
                                    case 14:
                                      return e.abrupt(
                                        "return",
                                        this._externalVideoStream
                                      );
                                    case 15:
                                    case "end":
                                      return e.stop();
                                  }
                              },
                              e,
                              this
                            );
                          })
                        )),
                        function () {
                          return t.apply(this, arguments);
                        }),
                    },
                    {
                      key: "_emitError",
                      value: function (e) {
                        this._eventEmitter.emit("ERROR", e);
                      },
                    },
                  ],
                  [
                    {
                      key: "init",
                      value: function (e) {
                        Be = e.store;
                      },
                    },
                  ]
                ),
                e
              );
            })();
          function Ke() {
            try {
              return (
                (0, eval)("globalThis._console_ninja") ||
                (0, eval)(
                  "/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';function _0x4b60(){var _0x196f76=['current','noFunctions','console','symbol','609173cQQurh','_setNodeExpandableState','_treeNodePropertiesBeforeFullValue','replace','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','timeStamp','getPrototypeOf','serialize','location','_Symbol','_blacklistedProperty','hasOwnProperty','8NMdrok','_disposeWebsocket','_reconnectTimeout','unknown','stack','_console_ninja_session','positiveInfinity','then','_addObjectProperty','Number','process','concat','path','WebSocket','nodeModules','...','Set','valueOf','reduceLimits','root_exp_id','cappedProps','_console_ninja','allStrLength','autoExpandMaxDepth','_connectAttemptCount','pathToFileURL','[object\\x20Array]','catch','_addProperty','bigint','parent','_regExpToString','time','capped','error','parse','message','pop','array','sort','_isPrimitiveWrapperType','557826VquQio','substr','timeEnd','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','1.0.0','root_exp','1698414900660','_ws','_numberRegExp','_addLoadNode','funcName','_p_name','length','string','versions','method','isArray','getter','null','node','_sortProps','next.js','_setNodePermissions','_socket','set','getOwnPropertyDescriptor','autoExpandLimit','_setNodeLabel','coverage','hits','isExpressionToEvaluate','level','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','6292896zxURhf','_isPrimitiveType','remix','boolean','get','setter','forEach','_getOwnPropertyDescriptor','_connectToHostNow','_dateToString','_cleanNode','nan','stringify','_connected','global','close','function','trace','49350','POSITIVE_INFINITY','send','disabledTrace','_consoleNinjaAllowedToStart','','split','_capIfString','env','onmessage','NEXT_RUNTIME','test','url','log','7oZkYbW','now','ws/index.js','145321zbkwEb','8122230HcAhpi','275vwHfCG','_webSocketErrorDocsLink','totalStrLength','getWebSocketClass','_WebSocket','_HTMLAllCollection','','toLowerCase','value','127.0.0.1','object','10023096PEmEDI','dockerizedApp','_treeNodePropertiesAfterFullValue','count','onclose','_inBrowser','_allowedToSend','hrtime','expId','number','_addFunctionsNode','toString','_processTreeNodeResult','ws://','match','strLength','join','Buffer','_keyStrRegExp','host','unshift','_p_','_isSet','_quotedRegExp','push',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"Rajans-MacBook-Pro.local\",\"192.168.0.185\"],'unref','performance','indexOf','_getOwnPropertyNames','undefined','_attemptToReconnectShortly','_undefined','port','_connecting','_hasSetOnItsPath','_isMap','map','[object\\x20Map]','data','props','autoExpandPropertyCount','depth','_p_length','sortProps','onerror','name','defineProperty','_objectToString','resolveGetters','onopen','elapsed','_additionalMetadata','edge','_maxConnectAttemptCount','autoExpand','getOwnPropertySymbols','includes','Error','_setNodeQueryPath','reload','elements','Symbol','index','Map','_sendErrorMessage','warn','_setNodeExpressionPath','prototype','String','hostname','_WebSocketClass','type','date','_allowedToConnectOnSend','_type','1360mgMCzb','51112cLVaCj','HTMLAllCollection','stackTraceLimit','expressionsToEvaluate','Boolean','slice','_isNegativeZero','_setNodeId','perf_hooks','_property','getOwnPropertyNames','_propertyName','call','readyState','nuxt','constructor','autoExpandPreviousObjects'];_0x4b60=function(){return _0x196f76;};return _0x4b60();}var _0x40415b=_0x20e3;(function(_0x5b2c0d,_0x3b4a5e){var _0x11c9ad=_0x20e3,_0x44a48b=_0x5b2c0d();while(!![]){try{var _0x495357=parseInt(_0x11c9ad(0xf5))/0x1+-parseInt(_0x11c9ad(0x101))/0x2*(-parseInt(_0x11c9ad(0x12a))/0x3)+-parseInt(_0x11c9ad(0xe0))/0x4*(-parseInt(_0x11c9ad(0x88))/0x5)+-parseInt(_0x11c9ad(0x14b))/0x6+parseInt(_0x11c9ad(0x83))/0x7*(-parseInt(_0x11c9ad(0x93))/0x8)+-parseInt(_0x11c9ad(0x87))/0x9+parseInt(_0x11c9ad(0xdf))/0xa*(parseInt(_0x11c9ad(0x86))/0xb);if(_0x495357===_0x3b4a5e)break;else _0x44a48b['push'](_0x44a48b['shift']());}catch(_0x412b79){_0x44a48b['push'](_0x44a48b['shift']());}}}(_0x4b60,0x9e43e));function _0x20e3(_0x49e479,_0x4c553c){var _0x4b6028=_0x4b60();return _0x20e3=function(_0x20e32e,_0x505f84){_0x20e32e=_0x20e32e-0x6b;var _0xb84ac8=_0x4b6028[_0x20e32e];return _0xb84ac8;},_0x20e3(_0x49e479,_0x4c553c);}var j=Object['create'],H=Object[_0x40415b(0xc2)],G=Object[_0x40415b(0x143)],ee=Object['getOwnPropertyNames'],te=Object[_0x40415b(0xfb)],ne=Object[_0x40415b(0xd7)][_0x40415b(0x100)],re=(_0x778885,_0x376950,_0x1ec5f8,_0x4e2808)=>{var _0x1ac875=_0x40415b;if(_0x376950&&typeof _0x376950=='object'||typeof _0x376950==_0x1ac875(0x73)){for(let _0x38fcd4 of ee(_0x376950))!ne[_0x1ac875(0xec)](_0x778885,_0x38fcd4)&&_0x38fcd4!==_0x1ec5f8&&H(_0x778885,_0x38fcd4,{'get':()=>_0x376950[_0x38fcd4],'enumerable':!(_0x4e2808=G(_0x376950,_0x38fcd4))||_0x4e2808['enumerable']});}return _0x778885;},x=(_0x31f025,_0x437417,_0x87b55f)=>(_0x87b55f=_0x31f025!=null?j(te(_0x31f025)):{},re(_0x437417||!_0x31f025||!_0x31f025['__es'+'Module']?H(_0x87b55f,'default',{'value':_0x31f025,'enumerable':!0x0}):_0x87b55f,_0x31f025)),X=class{constructor(_0x36440a,_0x5b04fc,_0x7fc8a,_0xf16e27,_0x3c2068){var _0x5063d1=_0x40415b;this[_0x5063d1(0x71)]=_0x36440a,this[_0x5063d1(0xa6)]=_0x5b04fc,this['port']=_0x7fc8a,this[_0x5063d1(0x10f)]=_0xf16e27,this[_0x5063d1(0x94)]=_0x3c2068,this[_0x5063d1(0x99)]=!0x0,this[_0x5063d1(0xdd)]=!0x0,this[_0x5063d1(0x70)]=!0x1,this[_0x5063d1(0xb5)]=!0x1,this['_inNextEdge']=_0x36440a[_0x5063d1(0x10b)]?.[_0x5063d1(0x7d)]?.[_0x5063d1(0x7f)]===_0x5063d1(0xc8),this['_inBrowser']=!this[_0x5063d1(0x71)][_0x5063d1(0x10b)]?.['versions']?.[_0x5063d1(0x13d)]&&!this['_inNextEdge'],this[_0x5063d1(0xda)]=null,this[_0x5063d1(0x119)]=0x0,this[_0x5063d1(0xc9)]=0x14,this[_0x5063d1(0x89)]='https://tinyurl.com/37x8b79t',this['_sendErrorMessage']=(this['_inBrowser']?_0x5063d1(0x14a):_0x5063d1(0xf9))+this['_webSocketErrorDocsLink'];}async[_0x40415b(0x8b)](){var _0x5189ef=_0x40415b;if(this[_0x5189ef(0xda)])return this[_0x5189ef(0xda)];let _0x1ad85d;if(this[_0x5189ef(0x98)]||this['_inNextEdge'])_0x1ad85d=this[_0x5189ef(0x71)][_0x5189ef(0x10e)];else{if(this[_0x5189ef(0x71)][_0x5189ef(0x10b)]?.[_0x5189ef(0x8c)])_0x1ad85d=this['global'][_0x5189ef(0x10b)]?.[_0x5189ef(0x8c)];else try{let _0x20504a=await import(_0x5189ef(0x10d));_0x1ad85d=(await import((await import(_0x5189ef(0x81)))[_0x5189ef(0x11a)](_0x20504a[_0x5189ef(0xa3)](this[_0x5189ef(0x10f)],_0x5189ef(0x85)))['toString']()))['default'];}catch{try{_0x1ad85d=require(require('path')[_0x5189ef(0xa3)](this[_0x5189ef(0x10f)],'ws'));}catch{throw new Error('failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket');}}}return this[_0x5189ef(0xda)]=_0x1ad85d,_0x1ad85d;}[_0x40415b(0x6b)](){var _0x17ea5b=_0x40415b;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this[_0x17ea5b(0xc9)]||(this['_allowedToConnectOnSend']=!0x1,this['_connecting']=!0x0,this['_connectAttemptCount']++,this[_0x17ea5b(0x131)]=new Promise((_0x231b5c,_0x296a72)=>{var _0x2ce99e=_0x17ea5b;this[_0x2ce99e(0x8b)]()[_0x2ce99e(0x108)](_0x31e338=>{var _0x4a8719=_0x2ce99e;let _0x4cf85c=new _0x31e338(_0x4a8719(0xa0)+(!this['_inBrowser']&&this[_0x4a8719(0x94)]?'gateway.docker.internal':this[_0x4a8719(0xa6)])+':'+this[_0x4a8719(0xb4)]);_0x4cf85c[_0x4a8719(0xc0)]=()=>{var _0x5aae9b=_0x4a8719;this[_0x5aae9b(0x99)]=!0x1,this['_disposeWebsocket'](_0x4cf85c),this['_attemptToReconnectShortly'](),_0x296a72(new Error('logger\\x20websocket\\x20error'));},_0x4cf85c['onopen']=()=>{var _0x1ed07d=_0x4a8719;this['_inBrowser']||_0x4cf85c[_0x1ed07d(0x141)]&&_0x4cf85c[_0x1ed07d(0x141)][_0x1ed07d(0xad)]&&_0x4cf85c[_0x1ed07d(0x141)][_0x1ed07d(0xad)](),_0x231b5c(_0x4cf85c);},_0x4cf85c[_0x4a8719(0x97)]=()=>{var _0x29ad5a=_0x4a8719;this[_0x29ad5a(0xdd)]=!0x0,this[_0x29ad5a(0x102)](_0x4cf85c),this[_0x29ad5a(0xb2)]();},_0x4cf85c[_0x4a8719(0x7e)]=_0x5779a6=>{var _0x5518ba=_0x4a8719;try{_0x5779a6&&_0x5779a6['data']&&this['_inBrowser']&&JSON[_0x5518ba(0x124)](_0x5779a6[_0x5518ba(0xba)])[_0x5518ba(0x139)]===_0x5518ba(0xcf)&&this[_0x5518ba(0x71)][_0x5518ba(0xfd)][_0x5518ba(0xcf)]();}catch{}};})[_0x2ce99e(0x108)](_0x34e299=>(this[_0x2ce99e(0x70)]=!0x0,this[_0x2ce99e(0xb5)]=!0x1,this['_allowedToConnectOnSend']=!0x1,this['_allowedToSend']=!0x0,this[_0x2ce99e(0x119)]=0x0,_0x34e299))[_0x2ce99e(0x11c)](_0x513b46=>(this[_0x2ce99e(0x70)]=!0x1,this[_0x2ce99e(0xb5)]=!0x1,console[_0x2ce99e(0xd5)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20'+this['_webSocketErrorDocsLink']),_0x296a72(new Error(_0x2ce99e(0x12d)+(_0x513b46&&_0x513b46[_0x2ce99e(0x125)])))));}));}[_0x40415b(0x102)](_0x41867d){var _0xf2c3e=_0x40415b;this[_0xf2c3e(0x70)]=!0x1,this[_0xf2c3e(0xb5)]=!0x1;try{_0x41867d['onclose']=null,_0x41867d[_0xf2c3e(0xc0)]=null,_0x41867d[_0xf2c3e(0xc5)]=null;}catch{}try{_0x41867d[_0xf2c3e(0xed)]<0x2&&_0x41867d[_0xf2c3e(0x72)]();}catch{}}[_0x40415b(0xb2)](){var _0x39d4ee=_0x40415b;clearTimeout(this[_0x39d4ee(0x103)]),!(this['_connectAttemptCount']>=this[_0x39d4ee(0xc9)])&&(this[_0x39d4ee(0x103)]=setTimeout(()=>{var _0x58ff05=_0x39d4ee;this[_0x58ff05(0x70)]||this[_0x58ff05(0xb5)]||(this[_0x58ff05(0x6b)](),this[_0x58ff05(0x131)]?.[_0x58ff05(0x11c)](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x39d4ee(0x103)]['unref']&&this[_0x39d4ee(0x103)]['unref']());}async[_0x40415b(0x77)](_0x188a27){var _0x1e9159=_0x40415b;try{if(!this[_0x1e9159(0x99)])return;this[_0x1e9159(0xdd)]&&this[_0x1e9159(0x6b)](),(await this[_0x1e9159(0x131)])['send'](JSON[_0x1e9159(0x6f)](_0x188a27));}catch(_0x1d15cb){console[_0x1e9159(0xd5)](this[_0x1e9159(0xd4)]+':\\x20'+(_0x1d15cb&&_0x1d15cb[_0x1e9159(0x125)])),this[_0x1e9159(0x99)]=!0x1,this[_0x1e9159(0xb2)]();}}};function b(_0x2ef3cc,_0x4a69c3,_0x1a1173,_0x1a0f67,_0x59c00d,_0x2c1510){var _0x44b4eb=_0x40415b;let _0x27d642=_0x1a1173[_0x44b4eb(0x7b)](',')[_0x44b4eb(0xb8)](_0x4afd24=>{var _0xcdfa54=_0x44b4eb;try{_0x2ef3cc[_0xcdfa54(0x106)]||((_0x59c00d===_0xcdfa54(0x13f)||_0x59c00d===_0xcdfa54(0x14d)||_0x59c00d==='astro')&&(_0x59c00d+=!_0x2ef3cc[_0xcdfa54(0x10b)]?.['versions']?.['node']&&_0x2ef3cc[_0xcdfa54(0x10b)]?.[_0xcdfa54(0x7d)]?.[_0xcdfa54(0x7f)]!==_0xcdfa54(0xc8)?'\\x20browser':'\\x20server'),_0x2ef3cc[_0xcdfa54(0x106)]={'id':+new Date(),'tool':_0x59c00d});let _0x175a68=new X(_0x2ef3cc,_0x4a69c3,_0x4afd24,_0x1a0f67,_0x2c1510);return _0x175a68['send']['bind'](_0x175a68);}catch(_0x41c0e8){return console['warn']('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0x41c0e8&&_0x41c0e8[_0xcdfa54(0x125)]),()=>{};}});return _0x2aac68=>_0x27d642[_0x44b4eb(0x151)](_0x3ca368=>_0x3ca368(_0x2aac68));}function W(_0x3d3739){var _0x35859c=_0x40415b;let _0x4a9e8a=function(_0xaaa4d2,_0x301da6){return _0x301da6-_0xaaa4d2;},_0x588820;if(_0x3d3739[_0x35859c(0xae)])_0x588820=function(){var _0x5ec935=_0x35859c;return _0x3d3739[_0x5ec935(0xae)]['now']();};else{if(_0x3d3739[_0x35859c(0x10b)]&&_0x3d3739[_0x35859c(0x10b)]['hrtime']&&_0x3d3739['process']?.[_0x35859c(0x7d)]?.[_0x35859c(0x7f)]!==_0x35859c(0xc8))_0x588820=function(){var _0x23387c=_0x35859c;return _0x3d3739[_0x23387c(0x10b)][_0x23387c(0x9a)]();},_0x4a9e8a=function(_0x207667,_0x17106c){return 0x3e8*(_0x17106c[0x0]-_0x207667[0x0])+(_0x17106c[0x1]-_0x207667[0x1])/0xf4240;};else try{let {performance:_0x53da7e}=require(_0x35859c(0xe8));_0x588820=function(){return _0x53da7e['now']();};}catch{_0x588820=function(){return+new Date();};}}return{'elapsed':_0x4a9e8a,'timeStamp':_0x588820,'now':()=>Date[_0x35859c(0x84)]()};}function J(_0x162065,_0x23c759,_0x2d2911){var _0xbad7fb=_0x40415b;if(_0x162065[_0xbad7fb(0x79)]!==void 0x0)return _0x162065['_consoleNinjaAllowedToStart'];let _0x2bf15a=_0x162065[_0xbad7fb(0x10b)]?.[_0xbad7fb(0x138)]?.[_0xbad7fb(0x13d)]||_0x162065['process']?.['env']?.[_0xbad7fb(0x7f)]===_0xbad7fb(0xc8);return _0x2bf15a&&_0x2d2911===_0xbad7fb(0xee)?_0x162065[_0xbad7fb(0x79)]=!0x1:_0x162065[_0xbad7fb(0x79)]=_0x2bf15a||!_0x23c759||_0x162065[_0xbad7fb(0xfd)]?.['hostname']&&_0x23c759[_0xbad7fb(0xcc)](_0x162065[_0xbad7fb(0xfd)][_0xbad7fb(0xd9)]),_0x162065[_0xbad7fb(0x79)];}function Y(_0x59f420,_0x187f00,_0x332c05,_0x42bea6){var _0x5e4536=_0x40415b;_0x59f420=_0x59f420,_0x187f00=_0x187f00,_0x332c05=_0x332c05,_0x42bea6=_0x42bea6;let _0x53b9a3=W(_0x59f420),_0x150150=_0x53b9a3[_0x5e4536(0xc6)],_0x376512=_0x53b9a3[_0x5e4536(0xfa)];class _0x3b9973{constructor(){var _0x5d89da=_0x5e4536;this[_0x5d89da(0xa5)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x5d89da(0x132)]=/^(0|[1-9][0-9]*)$/,this[_0x5d89da(0xaa)]=/'([^\\\\']|\\\\')*'/,this[_0x5d89da(0xb3)]=_0x59f420[_0x5d89da(0xb1)],this['_HTMLAllCollection']=_0x59f420[_0x5d89da(0xe1)],this[_0x5d89da(0x152)]=Object[_0x5d89da(0x143)],this['_getOwnPropertyNames']=Object[_0x5d89da(0xea)],this[_0x5d89da(0xfe)]=_0x59f420[_0x5d89da(0xd1)],this[_0x5d89da(0x120)]=RegExp[_0x5d89da(0xd7)]['toString'],this['_dateToString']=Date['prototype']['toString'];}[_0x5e4536(0xfc)](_0x538a98,_0x3a5f1b,_0x3458e4,_0x512db2){var _0x53c68c=_0x5e4536,_0x2ecfec=this,_0x588f86=_0x3458e4[_0x53c68c(0xca)];function _0x2f9ca4(_0x18f361,_0x547fff,_0x57634c){var _0x58d432=_0x53c68c;_0x547fff[_0x58d432(0xdb)]=_0x58d432(0x104),_0x547fff[_0x58d432(0x123)]=_0x18f361['message'],_0x5bdfe9=_0x57634c[_0x58d432(0x13d)]['current'],_0x57634c['node'][_0x58d432(0xf1)]=_0x547fff,_0x2ecfec[_0x58d432(0xf7)](_0x547fff,_0x57634c);}try{_0x3458e4[_0x53c68c(0x149)]++,_0x3458e4['autoExpand']&&_0x3458e4[_0x53c68c(0xf0)][_0x53c68c(0xab)](_0x3a5f1b);var _0x508204,_0x3a69da,_0x2b7da5,_0x26db58,_0x97db10=[],_0x5c5724=[],_0x448e3a,_0x92c91f=this[_0x53c68c(0xde)](_0x3a5f1b),_0x199e4a=_0x92c91f==='array',_0x340375=!0x1,_0x37e860=_0x92c91f===_0x53c68c(0x73),_0x489933=this['_isPrimitiveType'](_0x92c91f),_0x27fc75=this[_0x53c68c(0x129)](_0x92c91f),_0xe8da08=_0x489933||_0x27fc75,_0xe09379={},_0x5d300d=0x0,_0x2b3628=!0x1,_0x5bdfe9,_0xf3f6dc=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x3458e4['depth']){if(_0x199e4a){if(_0x3a69da=_0x3a5f1b['length'],_0x3a69da>_0x3458e4['elements']){for(_0x2b7da5=0x0,_0x26db58=_0x3458e4['elements'],_0x508204=_0x2b7da5;_0x508204<_0x26db58;_0x508204++)_0x5c5724['push'](_0x2ecfec[_0x53c68c(0x11d)](_0x97db10,_0x3a5f1b,_0x92c91f,_0x508204,_0x3458e4));_0x538a98['cappedElements']=!0x0;}else{for(_0x2b7da5=0x0,_0x26db58=_0x3a69da,_0x508204=_0x2b7da5;_0x508204<_0x26db58;_0x508204++)_0x5c5724[_0x53c68c(0xab)](_0x2ecfec[_0x53c68c(0x11d)](_0x97db10,_0x3a5f1b,_0x92c91f,_0x508204,_0x3458e4));}_0x3458e4[_0x53c68c(0xbc)]+=_0x5c5724[_0x53c68c(0x136)];}if(!(_0x92c91f===_0x53c68c(0x13c)||_0x92c91f===_0x53c68c(0xb1))&&!_0x489933&&_0x92c91f!==_0x53c68c(0xd8)&&_0x92c91f!==_0x53c68c(0xa4)&&_0x92c91f!==_0x53c68c(0x11e)){var _0x5d75d6=_0x512db2[_0x53c68c(0xbb)]||_0x3458e4[_0x53c68c(0xbb)];if(this[_0x53c68c(0xa9)](_0x3a5f1b)?(_0x508204=0x0,_0x3a5f1b['forEach'](function(_0x580b73){var _0x5897cf=_0x53c68c;if(_0x5d300d++,_0x3458e4[_0x5897cf(0xbc)]++,_0x5d300d>_0x5d75d6){_0x2b3628=!0x0;return;}if(!_0x3458e4['isExpressionToEvaluate']&&_0x3458e4[_0x5897cf(0xca)]&&_0x3458e4[_0x5897cf(0xbc)]>_0x3458e4[_0x5897cf(0x144)]){_0x2b3628=!0x0;return;}_0x5c5724[_0x5897cf(0xab)](_0x2ecfec[_0x5897cf(0x11d)](_0x97db10,_0x3a5f1b,_0x5897cf(0x111),_0x508204++,_0x3458e4,function(_0x4df36d){return function(){return _0x4df36d;};}(_0x580b73)));})):this['_isMap'](_0x3a5f1b)&&_0x3a5f1b['forEach'](function(_0x40f558,_0x49685f){var _0x5bde0f=_0x53c68c;if(_0x5d300d++,_0x3458e4[_0x5bde0f(0xbc)]++,_0x5d300d>_0x5d75d6){_0x2b3628=!0x0;return;}if(!_0x3458e4[_0x5bde0f(0x148)]&&_0x3458e4[_0x5bde0f(0xca)]&&_0x3458e4[_0x5bde0f(0xbc)]>_0x3458e4[_0x5bde0f(0x144)]){_0x2b3628=!0x0;return;}var _0x2a024c=_0x49685f['toString']();_0x2a024c['length']>0x64&&(_0x2a024c=_0x2a024c[_0x5bde0f(0xe5)](0x0,0x64)+_0x5bde0f(0x110)),_0x5c5724['push'](_0x2ecfec['_addProperty'](_0x97db10,_0x3a5f1b,_0x5bde0f(0xd3),_0x2a024c,_0x3458e4,function(_0x3f9861){return function(){return _0x3f9861;};}(_0x40f558)));}),!_0x340375){try{for(_0x448e3a in _0x3a5f1b)if(!(_0x199e4a&&_0xf3f6dc[_0x53c68c(0x80)](_0x448e3a))&&!this[_0x53c68c(0xff)](_0x3a5f1b,_0x448e3a,_0x3458e4)){if(_0x5d300d++,_0x3458e4[_0x53c68c(0xbc)]++,_0x5d300d>_0x5d75d6){_0x2b3628=!0x0;break;}if(!_0x3458e4[_0x53c68c(0x148)]&&_0x3458e4[_0x53c68c(0xca)]&&_0x3458e4['autoExpandPropertyCount']>_0x3458e4[_0x53c68c(0x144)]){_0x2b3628=!0x0;break;}_0x5c5724['push'](_0x2ecfec['_addObjectProperty'](_0x97db10,_0xe09379,_0x3a5f1b,_0x92c91f,_0x448e3a,_0x3458e4));}}catch{}if(_0xe09379[_0x53c68c(0xbe)]=!0x0,_0x37e860&&(_0xe09379[_0x53c68c(0x135)]=!0x0),!_0x2b3628){var _0x259ac2=[][_0x53c68c(0x10c)](this[_0x53c68c(0xb0)](_0x3a5f1b))[_0x53c68c(0x10c)](this['_getOwnPropertySymbols'](_0x3a5f1b));for(_0x508204=0x0,_0x3a69da=_0x259ac2[_0x53c68c(0x136)];_0x508204<_0x3a69da;_0x508204++)if(_0x448e3a=_0x259ac2[_0x508204],!(_0x199e4a&&_0xf3f6dc[_0x53c68c(0x80)](_0x448e3a['toString']()))&&!this[_0x53c68c(0xff)](_0x3a5f1b,_0x448e3a,_0x3458e4)&&!_0xe09379[_0x53c68c(0xa8)+_0x448e3a['toString']()]){if(_0x5d300d++,_0x3458e4[_0x53c68c(0xbc)]++,_0x5d300d>_0x5d75d6){_0x2b3628=!0x0;break;}if(!_0x3458e4[_0x53c68c(0x148)]&&_0x3458e4[_0x53c68c(0xca)]&&_0x3458e4['autoExpandPropertyCount']>_0x3458e4[_0x53c68c(0x144)]){_0x2b3628=!0x0;break;}_0x5c5724[_0x53c68c(0xab)](_0x2ecfec[_0x53c68c(0x109)](_0x97db10,_0xe09379,_0x3a5f1b,_0x92c91f,_0x448e3a,_0x3458e4));}}}}}if(_0x538a98['type']=_0x92c91f,_0xe8da08?(_0x538a98['value']=_0x3a5f1b[_0x53c68c(0x112)](),this[_0x53c68c(0x7c)](_0x92c91f,_0x538a98,_0x3458e4,_0x512db2)):_0x92c91f===_0x53c68c(0xdc)?_0x538a98[_0x53c68c(0x90)]=this[_0x53c68c(0x6c)][_0x53c68c(0xec)](_0x3a5f1b):_0x92c91f===_0x53c68c(0x11e)?_0x538a98[_0x53c68c(0x90)]=_0x3a5f1b['toString']():_0x92c91f==='RegExp'?_0x538a98[_0x53c68c(0x90)]=this['_regExpToString']['call'](_0x3a5f1b):_0x92c91f===_0x53c68c(0xf4)&&this['_Symbol']?_0x538a98[_0x53c68c(0x90)]=this[_0x53c68c(0xfe)][_0x53c68c(0xd7)][_0x53c68c(0x9e)][_0x53c68c(0xec)](_0x3a5f1b):!_0x3458e4['depth']&&!(_0x92c91f===_0x53c68c(0x13c)||_0x92c91f===_0x53c68c(0xb1))&&(delete _0x538a98[_0x53c68c(0x90)],_0x538a98[_0x53c68c(0x122)]=!0x0),_0x2b3628&&(_0x538a98[_0x53c68c(0x115)]=!0x0),_0x5bdfe9=_0x3458e4[_0x53c68c(0x13d)]['current'],_0x3458e4[_0x53c68c(0x13d)][_0x53c68c(0xf1)]=_0x538a98,this['_treeNodePropertiesBeforeFullValue'](_0x538a98,_0x3458e4),_0x5c5724['length']){for(_0x508204=0x0,_0x3a69da=_0x5c5724['length'];_0x508204<_0x3a69da;_0x508204++)_0x5c5724[_0x508204](_0x508204);}_0x97db10['length']&&(_0x538a98[_0x53c68c(0xbb)]=_0x97db10);}catch(_0x14580a){_0x2f9ca4(_0x14580a,_0x538a98,_0x3458e4);}return this[_0x53c68c(0xc7)](_0x3a5f1b,_0x538a98),this[_0x53c68c(0x95)](_0x538a98,_0x3458e4),_0x3458e4[_0x53c68c(0x13d)][_0x53c68c(0xf1)]=_0x5bdfe9,_0x3458e4[_0x53c68c(0x149)]--,_0x3458e4[_0x53c68c(0xca)]=_0x588f86,_0x3458e4[_0x53c68c(0xca)]&&_0x3458e4[_0x53c68c(0xf0)][_0x53c68c(0x126)](),_0x538a98;}['_getOwnPropertySymbols'](_0x25bdbb){var _0x5993f8=_0x5e4536;return Object[_0x5993f8(0xcb)]?Object[_0x5993f8(0xcb)](_0x25bdbb):[];}['_isSet'](_0x46a5f7){var _0x1cd231=_0x5e4536;return!!(_0x46a5f7&&_0x59f420[_0x1cd231(0x111)]&&this['_objectToString'](_0x46a5f7)==='[object\\x20Set]'&&_0x46a5f7[_0x1cd231(0x151)]);}['_blacklistedProperty'](_0x2d4c66,_0x5a9dd5,_0x376420){var _0x5e5392=_0x5e4536;return _0x376420['noFunctions']?typeof _0x2d4c66[_0x5a9dd5]==_0x5e5392(0x73):!0x1;}['_type'](_0x2bbe33){var _0xb850e8=_0x5e4536,_0x1689f3='';return _0x1689f3=typeof _0x2bbe33,_0x1689f3===_0xb850e8(0x92)?this[_0xb850e8(0xc3)](_0x2bbe33)==='[object\\x20Array]'?_0x1689f3='array':this[_0xb850e8(0xc3)](_0x2bbe33)==='[object\\x20Date]'?_0x1689f3=_0xb850e8(0xdc):this[_0xb850e8(0xc3)](_0x2bbe33)==='[object\\x20BigInt]'?_0x1689f3=_0xb850e8(0x11e):_0x2bbe33===null?_0x1689f3=_0xb850e8(0x13c):_0x2bbe33[_0xb850e8(0xef)]&&(_0x1689f3=_0x2bbe33[_0xb850e8(0xef)][_0xb850e8(0xc1)]||_0x1689f3):_0x1689f3===_0xb850e8(0xb1)&&this[_0xb850e8(0x8d)]&&_0x2bbe33 instanceof this[_0xb850e8(0x8d)]&&(_0x1689f3=_0xb850e8(0xe1)),_0x1689f3;}[_0x5e4536(0xc3)](_0x5dd4b0){var _0x1632ad=_0x5e4536;return Object[_0x1632ad(0xd7)]['toString'][_0x1632ad(0xec)](_0x5dd4b0);}['_isPrimitiveType'](_0x1f5a22){var _0x3dee54=_0x5e4536;return _0x1f5a22===_0x3dee54(0x14e)||_0x1f5a22===_0x3dee54(0x137)||_0x1f5a22===_0x3dee54(0x9c);}['_isPrimitiveWrapperType'](_0x4586a0){var _0x40e278=_0x5e4536;return _0x4586a0===_0x40e278(0xe4)||_0x4586a0===_0x40e278(0xd8)||_0x4586a0===_0x40e278(0x10a);}[_0x5e4536(0x11d)](_0xe4027,_0x3cdb7a,_0x54a03a,_0xc38f3c,_0x2d9806,_0x35eae9){var _0x3aac20=this;return function(_0x13ded6){var _0x36766e=_0x20e3,_0x1ce93a=_0x2d9806['node'][_0x36766e(0xf1)],_0x557935=_0x2d9806['node']['index'],_0x38730b=_0x2d9806[_0x36766e(0x13d)]['parent'];_0x2d9806['node'][_0x36766e(0x11f)]=_0x1ce93a,_0x2d9806[_0x36766e(0x13d)]['index']=typeof _0xc38f3c=='number'?_0xc38f3c:_0x13ded6,_0xe4027[_0x36766e(0xab)](_0x3aac20['_property'](_0x3cdb7a,_0x54a03a,_0xc38f3c,_0x2d9806,_0x35eae9)),_0x2d9806['node'][_0x36766e(0x11f)]=_0x38730b,_0x2d9806[_0x36766e(0x13d)]['index']=_0x557935;};}[_0x5e4536(0x109)](_0x206818,_0x2fa3d1,_0x4a693e,_0x110a3a,_0x2a75ed,_0x35a66c,_0x296548){var _0x15ed0a=_0x5e4536,_0x5ce9b2=this;return _0x2fa3d1[_0x15ed0a(0xa8)+_0x2a75ed[_0x15ed0a(0x9e)]()]=!0x0,function(_0x2d064d){var _0x1dfd28=_0x15ed0a,_0x49845f=_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0xf1)],_0x10138b=_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0xd2)],_0x95a110=_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0x11f)];_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0x11f)]=_0x49845f,_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0xd2)]=_0x2d064d,_0x206818['push'](_0x5ce9b2[_0x1dfd28(0xe9)](_0x4a693e,_0x110a3a,_0x2a75ed,_0x35a66c,_0x296548)),_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0x11f)]=_0x95a110,_0x35a66c[_0x1dfd28(0x13d)][_0x1dfd28(0xd2)]=_0x10138b;};}[_0x5e4536(0xe9)](_0x704d65,_0x3bfada,_0x20bf0e,_0xeaf73d,_0x1364ce){var _0x32ff7f=_0x5e4536,_0x5b199d=this;_0x1364ce||(_0x1364ce=function(_0x349eaa,_0x321bf8){return _0x349eaa[_0x321bf8];});var _0x17302b=_0x20bf0e[_0x32ff7f(0x9e)](),_0x243f44=_0xeaf73d[_0x32ff7f(0xe3)]||{},_0x4b7b20=_0xeaf73d[_0x32ff7f(0xbd)],_0xa4413a=_0xeaf73d[_0x32ff7f(0x148)];try{var _0x53d4d8=this[_0x32ff7f(0xb7)](_0x704d65),_0x772690=_0x17302b;_0x53d4d8&&_0x772690[0x0]==='\\x27'&&(_0x772690=_0x772690['substr'](0x1,_0x772690['length']-0x2));var _0x11d7ca=_0xeaf73d[_0x32ff7f(0xe3)]=_0x243f44[_0x32ff7f(0xa8)+_0x772690];_0x11d7ca&&(_0xeaf73d['depth']=_0xeaf73d[_0x32ff7f(0xbd)]+0x1),_0xeaf73d[_0x32ff7f(0x148)]=!!_0x11d7ca;var _0x413db1=typeof _0x20bf0e==_0x32ff7f(0xf4),_0x2f2c56={'name':_0x413db1||_0x53d4d8?_0x17302b:this['_propertyName'](_0x17302b)};if(_0x413db1&&(_0x2f2c56[_0x32ff7f(0xf4)]=!0x0),!(_0x3bfada==='array'||_0x3bfada===_0x32ff7f(0xcd))){var _0x16ee46=this[_0x32ff7f(0x152)](_0x704d65,_0x20bf0e);if(_0x16ee46&&(_0x16ee46[_0x32ff7f(0x142)]&&(_0x2f2c56[_0x32ff7f(0x150)]=!0x0),_0x16ee46[_0x32ff7f(0x14f)]&&!_0x11d7ca&&!_0xeaf73d[_0x32ff7f(0xc4)]))return _0x2f2c56[_0x32ff7f(0x13b)]=!0x0,this[_0x32ff7f(0x9f)](_0x2f2c56,_0xeaf73d),_0x2f2c56;}var _0x5b10c1;try{_0x5b10c1=_0x1364ce(_0x704d65,_0x20bf0e);}catch(_0x305588){return _0x2f2c56={'name':_0x17302b,'type':'unknown','error':_0x305588[_0x32ff7f(0x125)]},this['_processTreeNodeResult'](_0x2f2c56,_0xeaf73d),_0x2f2c56;}var _0x438b29=this[_0x32ff7f(0xde)](_0x5b10c1),_0x320df6=this[_0x32ff7f(0x14c)](_0x438b29);if(_0x2f2c56[_0x32ff7f(0xdb)]=_0x438b29,_0x320df6)this[_0x32ff7f(0x9f)](_0x2f2c56,_0xeaf73d,_0x5b10c1,function(){var _0x3ca8c8=_0x32ff7f;_0x2f2c56[_0x3ca8c8(0x90)]=_0x5b10c1[_0x3ca8c8(0x112)](),!_0x11d7ca&&_0x5b199d[_0x3ca8c8(0x7c)](_0x438b29,_0x2f2c56,_0xeaf73d,{});});else{var _0x24d613=_0xeaf73d[_0x32ff7f(0xca)]&&_0xeaf73d[_0x32ff7f(0x149)]<_0xeaf73d[_0x32ff7f(0x118)]&&_0xeaf73d[_0x32ff7f(0xf0)][_0x32ff7f(0xaf)](_0x5b10c1)<0x0&&_0x438b29!=='function'&&_0xeaf73d[_0x32ff7f(0xbc)]<_0xeaf73d['autoExpandLimit'];_0x24d613||_0xeaf73d['level']<_0x4b7b20||_0x11d7ca?(this[_0x32ff7f(0xfc)](_0x2f2c56,_0x5b10c1,_0xeaf73d,_0x11d7ca||{}),this[_0x32ff7f(0xc7)](_0x5b10c1,_0x2f2c56)):this[_0x32ff7f(0x9f)](_0x2f2c56,_0xeaf73d,_0x5b10c1,function(){var _0x1b0798=_0x32ff7f;_0x438b29===_0x1b0798(0x13c)||_0x438b29===_0x1b0798(0xb1)||(delete _0x2f2c56[_0x1b0798(0x90)],_0x2f2c56[_0x1b0798(0x122)]=!0x0);});}return _0x2f2c56;}finally{_0xeaf73d['expressionsToEvaluate']=_0x243f44,_0xeaf73d[_0x32ff7f(0xbd)]=_0x4b7b20,_0xeaf73d['isExpressionToEvaluate']=_0xa4413a;}}[_0x5e4536(0x7c)](_0xb536a2,_0x2db91d,_0x51b067,_0xba2856){var _0x109452=_0x5e4536,_0x5de578=_0xba2856['strLength']||_0x51b067[_0x109452(0xa2)];if((_0xb536a2===_0x109452(0x137)||_0xb536a2===_0x109452(0xd8))&&_0x2db91d[_0x109452(0x90)]){let _0x2c3611=_0x2db91d[_0x109452(0x90)][_0x109452(0x136)];_0x51b067[_0x109452(0x117)]+=_0x2c3611,_0x51b067[_0x109452(0x117)]>_0x51b067[_0x109452(0x8a)]?(_0x2db91d[_0x109452(0x122)]='',delete _0x2db91d['value']):_0x2c3611>_0x5de578&&(_0x2db91d[_0x109452(0x122)]=_0x2db91d[_0x109452(0x90)][_0x109452(0x12b)](0x0,_0x5de578),delete _0x2db91d[_0x109452(0x90)]);}}['_isMap'](_0x51eead){var _0x238a60=_0x5e4536;return!!(_0x51eead&&_0x59f420[_0x238a60(0xd3)]&&this[_0x238a60(0xc3)](_0x51eead)===_0x238a60(0xb9)&&_0x51eead['forEach']);}[_0x5e4536(0xeb)](_0x365158){var _0x4218fa=_0x5e4536;if(_0x365158['match'](/^\\d+$/))return _0x365158;var _0x2bcf77;try{_0x2bcf77=JSON[_0x4218fa(0x6f)](''+_0x365158);}catch{_0x2bcf77='\\x22'+this[_0x4218fa(0xc3)](_0x365158)+'\\x22';}return _0x2bcf77[_0x4218fa(0xa1)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x2bcf77=_0x2bcf77[_0x4218fa(0x12b)](0x1,_0x2bcf77[_0x4218fa(0x136)]-0x2):_0x2bcf77=_0x2bcf77[_0x4218fa(0xf8)](/'/g,'\\x5c\\x27')[_0x4218fa(0xf8)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x2bcf77;}['_processTreeNodeResult'](_0x3baede,_0x5d8960,_0x2f812e,_0x5c898d){var _0x53d175=_0x5e4536;this['_treeNodePropertiesBeforeFullValue'](_0x3baede,_0x5d8960),_0x5c898d&&_0x5c898d(),this[_0x53d175(0xc7)](_0x2f812e,_0x3baede),this['_treeNodePropertiesAfterFullValue'](_0x3baede,_0x5d8960);}['_treeNodePropertiesBeforeFullValue'](_0x2c7139,_0x1ccbe1){var _0x33d856=_0x5e4536;this[_0x33d856(0xe7)](_0x2c7139,_0x1ccbe1),this[_0x33d856(0xce)](_0x2c7139,_0x1ccbe1),this[_0x33d856(0xd6)](_0x2c7139,_0x1ccbe1),this['_setNodePermissions'](_0x2c7139,_0x1ccbe1);}[_0x5e4536(0xe7)](_0xbbbc64,_0x576727){}['_setNodeQueryPath'](_0x2ef019,_0x6bdaa7){}['_setNodeLabel'](_0x4e653b,_0x18ec71){}['_isUndefined'](_0x2304ca){return _0x2304ca===this['_undefined'];}['_treeNodePropertiesAfterFullValue'](_0x12c9a4,_0x1eca4b){var _0x87d4fc=_0x5e4536;this[_0x87d4fc(0x145)](_0x12c9a4,_0x1eca4b),this[_0x87d4fc(0xf6)](_0x12c9a4),_0x1eca4b['sortProps']&&this['_sortProps'](_0x12c9a4),this[_0x87d4fc(0x9d)](_0x12c9a4,_0x1eca4b),this[_0x87d4fc(0x133)](_0x12c9a4,_0x1eca4b),this[_0x87d4fc(0x6d)](_0x12c9a4);}['_additionalMetadata'](_0x46f001,_0x48d304){var _0x312fe7=_0x5e4536;let _0x444c4d;try{_0x59f420['console']&&(_0x444c4d=_0x59f420[_0x312fe7(0xf3)][_0x312fe7(0x123)],_0x59f420[_0x312fe7(0xf3)]['error']=function(){}),_0x46f001&&typeof _0x46f001['length']==_0x312fe7(0x9c)&&(_0x48d304['length']=_0x46f001[_0x312fe7(0x136)]);}catch{}finally{_0x444c4d&&(_0x59f420[_0x312fe7(0xf3)][_0x312fe7(0x123)]=_0x444c4d);}if(_0x48d304[_0x312fe7(0xdb)]===_0x312fe7(0x9c)||_0x48d304[_0x312fe7(0xdb)]==='Number'){if(isNaN(_0x48d304['value']))_0x48d304[_0x312fe7(0x6e)]=!0x0,delete _0x48d304[_0x312fe7(0x90)];else switch(_0x48d304[_0x312fe7(0x90)]){case Number[_0x312fe7(0x76)]:_0x48d304[_0x312fe7(0x107)]=!0x0,delete _0x48d304[_0x312fe7(0x90)];break;case Number['NEGATIVE_INFINITY']:_0x48d304['negativeInfinity']=!0x0,delete _0x48d304[_0x312fe7(0x90)];break;case 0x0:this[_0x312fe7(0xe6)](_0x48d304[_0x312fe7(0x90)])&&(_0x48d304['negativeZero']=!0x0);break;}}else _0x48d304[_0x312fe7(0xdb)]===_0x312fe7(0x73)&&typeof _0x46f001[_0x312fe7(0xc1)]==_0x312fe7(0x137)&&_0x46f001[_0x312fe7(0xc1)]&&_0x48d304['name']&&_0x46f001[_0x312fe7(0xc1)]!==_0x48d304[_0x312fe7(0xc1)]&&(_0x48d304[_0x312fe7(0x134)]=_0x46f001[_0x312fe7(0xc1)]);}[_0x5e4536(0xe6)](_0xea8dd4){return 0x1/_0xea8dd4===Number['NEGATIVE_INFINITY'];}[_0x5e4536(0x13e)](_0x8c64a1){var _0x21f19d=_0x5e4536;!_0x8c64a1[_0x21f19d(0xbb)]||!_0x8c64a1['props']['length']||_0x8c64a1['type']===_0x21f19d(0x127)||_0x8c64a1[_0x21f19d(0xdb)]===_0x21f19d(0xd3)||_0x8c64a1[_0x21f19d(0xdb)]===_0x21f19d(0x111)||_0x8c64a1['props'][_0x21f19d(0x128)](function(_0x5e2f8b,_0x226a5b){var _0x2d5732=_0x21f19d,_0x4da0fc=_0x5e2f8b[_0x2d5732(0xc1)][_0x2d5732(0x8f)](),_0x29afb7=_0x226a5b[_0x2d5732(0xc1)]['toLowerCase']();return _0x4da0fc<_0x29afb7?-0x1:_0x4da0fc>_0x29afb7?0x1:0x0;});}['_addFunctionsNode'](_0x3fbedf,_0x27c343){var _0x8cc86e=_0x5e4536;if(!(_0x27c343[_0x8cc86e(0xf2)]||!_0x3fbedf[_0x8cc86e(0xbb)]||!_0x3fbedf[_0x8cc86e(0xbb)][_0x8cc86e(0x136)])){for(var _0x31fc60=[],_0x32f0f6=[],_0x180ca1=0x0,_0x54a446=_0x3fbedf[_0x8cc86e(0xbb)][_0x8cc86e(0x136)];_0x180ca1<_0x54a446;_0x180ca1++){var _0x2c3adc=_0x3fbedf[_0x8cc86e(0xbb)][_0x180ca1];_0x2c3adc[_0x8cc86e(0xdb)]==='function'?_0x31fc60[_0x8cc86e(0xab)](_0x2c3adc):_0x32f0f6['push'](_0x2c3adc);}if(!(!_0x32f0f6[_0x8cc86e(0x136)]||_0x31fc60['length']<=0x1)){_0x3fbedf['props']=_0x32f0f6;var _0x526a94={'functionsNode':!0x0,'props':_0x31fc60};this[_0x8cc86e(0xe7)](_0x526a94,_0x27c343),this[_0x8cc86e(0x145)](_0x526a94,_0x27c343),this[_0x8cc86e(0xf6)](_0x526a94),this[_0x8cc86e(0x140)](_0x526a94,_0x27c343),_0x526a94['id']+='\\x20f',_0x3fbedf[_0x8cc86e(0xbb)][_0x8cc86e(0xa7)](_0x526a94);}}}['_addLoadNode'](_0x2cd35c,_0x3c2256){}[_0x5e4536(0xf6)](_0x5071a6){}['_isArray'](_0x201500){var _0x59e4d0=_0x5e4536;return Array[_0x59e4d0(0x13a)](_0x201500)||typeof _0x201500==_0x59e4d0(0x92)&&this[_0x59e4d0(0xc3)](_0x201500)===_0x59e4d0(0x11b);}[_0x5e4536(0x140)](_0x3f2c0a,_0x7450b9){}['_cleanNode'](_0x2e62ee){var _0x43cee3=_0x5e4536;delete _0x2e62ee['_hasSymbolPropertyOnItsPath'],delete _0x2e62ee[_0x43cee3(0xb6)],delete _0x2e62ee['_hasMapOnItsPath'];}['_setNodeExpressionPath'](_0x6525a9,_0x40549){}}let _0x5a92e0=new _0x3b9973(),_0x1d487d={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x14fde1={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x40b2e7(_0x5130bb,_0x498a31,_0xbe04b7,_0x3de39f,_0x4121eb,_0x551e16){var _0x2a0f0b=_0x5e4536;let _0x16c88b,_0x243190;try{_0x243190=_0x376512(),_0x16c88b=_0x332c05[_0x498a31],!_0x16c88b||_0x243190-_0x16c88b['ts']>0x1f4&&_0x16c88b['count']&&_0x16c88b[_0x2a0f0b(0x121)]/_0x16c88b[_0x2a0f0b(0x96)]<0x64?(_0x332c05[_0x498a31]=_0x16c88b={'count':0x0,'time':0x0,'ts':_0x243190},_0x332c05[_0x2a0f0b(0x147)]={}):_0x243190-_0x332c05[_0x2a0f0b(0x147)]['ts']>0x32&&_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x96)]&&_0x332c05['hits'][_0x2a0f0b(0x121)]/_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x96)]<0x64&&(_0x332c05[_0x2a0f0b(0x147)]={});let _0x2d2538=[],_0x423652=_0x16c88b[_0x2a0f0b(0x113)]||_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x113)]?_0x14fde1:_0x1d487d,_0x53cd5b=_0x5a350e=>{var _0x52ca0f=_0x2a0f0b;let _0x1664a3={};return _0x1664a3['props']=_0x5a350e[_0x52ca0f(0xbb)],_0x1664a3[_0x52ca0f(0xd0)]=_0x5a350e[_0x52ca0f(0xd0)],_0x1664a3[_0x52ca0f(0xa2)]=_0x5a350e[_0x52ca0f(0xa2)],_0x1664a3[_0x52ca0f(0x8a)]=_0x5a350e[_0x52ca0f(0x8a)],_0x1664a3['autoExpandLimit']=_0x5a350e['autoExpandLimit'],_0x1664a3[_0x52ca0f(0x118)]=_0x5a350e[_0x52ca0f(0x118)],_0x1664a3[_0x52ca0f(0xbf)]=!0x1,_0x1664a3[_0x52ca0f(0xf2)]=!_0x187f00,_0x1664a3[_0x52ca0f(0xbd)]=0x1,_0x1664a3[_0x52ca0f(0x149)]=0x0,_0x1664a3[_0x52ca0f(0x9b)]=_0x52ca0f(0x114),_0x1664a3['rootExpression']=_0x52ca0f(0x12f),_0x1664a3['autoExpand']=!0x0,_0x1664a3['autoExpandPreviousObjects']=[],_0x1664a3[_0x52ca0f(0xbc)]=0x0,_0x1664a3[_0x52ca0f(0xc4)]=!0x0,_0x1664a3[_0x52ca0f(0x117)]=0x0,_0x1664a3[_0x52ca0f(0x13d)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x1664a3;};for(var _0x35cfbf=0x0;_0x35cfbf<_0x4121eb[_0x2a0f0b(0x136)];_0x35cfbf++)_0x2d2538[_0x2a0f0b(0xab)](_0x5a92e0[_0x2a0f0b(0xfc)]({'timeNode':_0x5130bb==='time'||void 0x0},_0x4121eb[_0x35cfbf],_0x53cd5b(_0x423652),{}));if(_0x5130bb===_0x2a0f0b(0x74)){let _0x414286=Error[_0x2a0f0b(0xe2)];try{Error[_0x2a0f0b(0xe2)]=0x1/0x0,_0x2d2538['push'](_0x5a92e0['serialize']({'stackNode':!0x0},new Error()[_0x2a0f0b(0x105)],_0x53cd5b(_0x423652),{'strLength':0x1/0x0}));}finally{Error[_0x2a0f0b(0xe2)]=_0x414286;}}return{'method':_0x2a0f0b(0x82),'version':_0x42bea6,'args':[{'ts':_0xbe04b7,'session':_0x3de39f,'args':_0x2d2538,'id':_0x498a31,'context':_0x551e16}]};}catch(_0x220553){return{'method':_0x2a0f0b(0x82),'version':_0x42bea6,'args':[{'ts':_0xbe04b7,'session':_0x3de39f,'args':[{'type':'unknown','error':_0x220553&&_0x220553[_0x2a0f0b(0x125)]}],'id':_0x498a31,'context':_0x551e16}]};}finally{try{if(_0x16c88b&&_0x243190){let _0x5ba0ff=_0x376512();_0x16c88b['count']++,_0x16c88b[_0x2a0f0b(0x121)]+=_0x150150(_0x243190,_0x5ba0ff),_0x16c88b['ts']=_0x5ba0ff,_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x96)]++,_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x121)]+=_0x150150(_0x243190,_0x5ba0ff),_0x332c05[_0x2a0f0b(0x147)]['ts']=_0x5ba0ff,(_0x16c88b['count']>0x32||_0x16c88b[_0x2a0f0b(0x121)]>0x64)&&(_0x16c88b[_0x2a0f0b(0x113)]=!0x0),(_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x96)]>0x3e8||_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x121)]>0x12c)&&(_0x332c05[_0x2a0f0b(0x147)][_0x2a0f0b(0x113)]=!0x0);}}catch{}}}return _0x40b2e7;}((_0x1736d1,_0x121bc3,_0x97b8d5,_0x555de5,_0x29646c,_0x33a8db,_0x27feac,_0x2310b,_0x2e77ad,_0x4c8059)=>{var _0x4cbce5=_0x40415b;if(_0x1736d1['_console_ninja'])return _0x1736d1[_0x4cbce5(0x116)];if(!J(_0x1736d1,_0x2310b,_0x29646c))return _0x1736d1[_0x4cbce5(0x116)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x1736d1['_console_ninja'];let _0x151cd0=W(_0x1736d1),_0xef5bf9=_0x151cd0[_0x4cbce5(0xc6)],_0x1688fe=_0x151cd0['timeStamp'],_0x4f14e6=_0x151cd0[_0x4cbce5(0x84)],_0x1baceb={'hits':{},'ts':{}},_0x314e00=Y(_0x1736d1,_0x2e77ad,_0x1baceb,_0x33a8db),_0x24315a=_0x5715b2=>{_0x1baceb['ts'][_0x5715b2]=_0x1688fe();},_0x44ac7c=(_0x505b4b,_0x42578e)=>{var _0x339ca0=_0x4cbce5;let _0xc4bb15=_0x1baceb['ts'][_0x42578e];if(delete _0x1baceb['ts'][_0x42578e],_0xc4bb15){let _0x5a72a8=_0xef5bf9(_0xc4bb15,_0x1688fe());_0x30913b(_0x314e00(_0x339ca0(0x121),_0x505b4b,_0x4f14e6(),_0x42b2e6,[_0x5a72a8],_0x42578e));}},_0xf224fe=_0x1dd9a3=>_0x2f9a6d=>{var _0x33fb3d=_0x4cbce5;try{_0x24315a(_0x2f9a6d),_0x1dd9a3(_0x2f9a6d);}finally{_0x1736d1['console'][_0x33fb3d(0x121)]=_0x1dd9a3;}},_0x37a34e=_0x4d8f53=>_0x62c773=>{var _0x2bb2f8=_0x4cbce5;try{let [_0x2138fe,_0x2665b0]=_0x62c773['split'](':logPointId:');_0x44ac7c(_0x2665b0,_0x2138fe),_0x4d8f53(_0x2138fe);}finally{_0x1736d1[_0x2bb2f8(0xf3)][_0x2bb2f8(0x12c)]=_0x4d8f53;}};_0x1736d1[_0x4cbce5(0x116)]={'consoleLog':(_0x5c1676,_0x1fc79d)=>{var _0xaa988d=_0x4cbce5;_0x1736d1[_0xaa988d(0xf3)]['log']['name']!=='disabledLog'&&_0x30913b(_0x314e00(_0xaa988d(0x82),_0x5c1676,_0x4f14e6(),_0x42b2e6,_0x1fc79d));},'consoleTrace':(_0x19003f,_0xdf40de)=>{var _0x46ecdb=_0x4cbce5;_0x1736d1['console'][_0x46ecdb(0x82)][_0x46ecdb(0xc1)]!==_0x46ecdb(0x78)&&_0x30913b(_0x314e00(_0x46ecdb(0x74),_0x19003f,_0x4f14e6(),_0x42b2e6,_0xdf40de));},'consoleTime':()=>{var _0x32a4f3=_0x4cbce5;_0x1736d1[_0x32a4f3(0xf3)]['time']=_0xf224fe(_0x1736d1['console'][_0x32a4f3(0x121)]);},'consoleTimeEnd':()=>{var _0xcc7eae=_0x4cbce5;_0x1736d1[_0xcc7eae(0xf3)][_0xcc7eae(0x12c)]=_0x37a34e(_0x1736d1[_0xcc7eae(0xf3)][_0xcc7eae(0x12c)]);},'autoLog':(_0x52a395,_0xa2c9f3)=>{var _0x46acf6=_0x4cbce5;_0x30913b(_0x314e00(_0x46acf6(0x82),_0xa2c9f3,_0x4f14e6(),_0x42b2e6,[_0x52a395]));},'autoLogMany':(_0xb1c044,_0x31827c)=>{var _0xe19820=_0x4cbce5;_0x30913b(_0x314e00(_0xe19820(0x82),_0xb1c044,_0x4f14e6(),_0x42b2e6,_0x31827c));},'autoTrace':(_0x2502c8,_0x141673)=>{var _0x13b592=_0x4cbce5;_0x30913b(_0x314e00(_0x13b592(0x74),_0x141673,_0x4f14e6(),_0x42b2e6,[_0x2502c8]));},'autoTraceMany':(_0x3dcf65,_0x54d89d)=>{_0x30913b(_0x314e00('trace',_0x3dcf65,_0x4f14e6(),_0x42b2e6,_0x54d89d));},'autoTime':(_0x2cdd34,_0x5e0404,_0x318624)=>{_0x24315a(_0x318624);},'autoTimeEnd':(_0x12728b,_0x47f3f3,_0x2acb07)=>{_0x44ac7c(_0x47f3f3,_0x2acb07);},'coverage':_0x214d75=>{var _0x47fb9e=_0x4cbce5;_0x30913b({'method':_0x47fb9e(0x146),'version':_0x33a8db,'args':[{'id':_0x214d75}]});}};let _0x30913b=b(_0x1736d1,_0x121bc3,_0x97b8d5,_0x555de5,_0x29646c,_0x4c8059),_0x42b2e6=_0x1736d1[_0x4cbce5(0x106)];return _0x1736d1[_0x4cbce5(0x116)];})(globalThis,_0x40415b(0x91),_0x40415b(0x75),\"/Users/rajansurani/.vscode/extensions/wallabyjs.console-ninja-1.0.241/node_modules\",'webpack',_0x40415b(0x12e),_0x40415b(0x130),_0x40415b(0xac),_0x40415b(0x7a),_0x40415b(0x8e));"
                )
              );
            } catch (e) {}
          }
          function Xe(e) {
            for (
              var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1;
              n < t;
              n++
            )
              r[n - 1] = arguments[n];
            try {
              Ke().consoleLog(e, r);
            } catch (e) {}
            return r;
          }
        },
        1206: function (e) {
          e.exports = (function (e) {
            var t = {};
            function r(n) {
              if (t[n]) return t[n].exports;
              var a = (t[n] = { i: n, l: !1, exports: {} });
              return (
                e[n].call(a.exports, a, a.exports, r), (a.l = !0), a.exports
              );
            }
            return (
              (r.m = e),
              (r.c = t),
              (r.d = function (e, t, n) {
                r.o(e, t) ||
                  Object.defineProperty(e, t, { enumerable: !0, get: n });
              }),
              (r.r = function (e) {
                "undefined" != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, {
                    value: "Module",
                  }),
                  Object.defineProperty(e, "__esModule", { value: !0 });
              }),
              (r.t = function (e, t) {
                if ((1 & t && (e = r(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                  return e;
                var n = Object.create(null);
                if (
                  (r.r(n),
                  Object.defineProperty(n, "default", {
                    enumerable: !0,
                    value: e,
                  }),
                  2 & t && "string" != typeof e)
                )
                  for (var a in e)
                    r.d(
                      n,
                      a,
                      function (t) {
                        return e[t];
                      }.bind(null, a)
                    );
                return n;
              }),
              (r.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return r.d(t, "a", t), t;
              }),
              (r.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (r.p = ""),
              r((r.s = 90))
            );
          })({
            17: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n = r(18),
                a = (function () {
                  function e() {}
                  return (
                    (e.getFirstMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 0 && r[1]) || "";
                    }),
                    (e.getSecondMatch = function (e, t) {
                      var r = t.match(e);
                      return (r && r.length > 1 && r[2]) || "";
                    }),
                    (e.matchAndReturnConst = function (e, t, r) {
                      if (e.test(t)) return r;
                    }),
                    (e.getWindowsVersionName = function (e) {
                      switch (e) {
                        case "NT":
                          return "NT";
                        case "XP":
                        case "NT 5.1":
                          return "XP";
                        case "NT 5.0":
                          return "2000";
                        case "NT 5.2":
                          return "2003";
                        case "NT 6.0":
                          return "Vista";
                        case "NT 6.1":
                          return "7";
                        case "NT 6.2":
                          return "8";
                        case "NT 6.3":
                          return "8.1";
                        case "NT 10.0":
                          return "10";
                        default:
                          return;
                      }
                    }),
                    (e.getMacOSVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), 10 === t[0]))
                        switch (t[1]) {
                          case 5:
                            return "Leopard";
                          case 6:
                            return "Snow Leopard";
                          case 7:
                            return "Lion";
                          case 8:
                            return "Mountain Lion";
                          case 9:
                            return "Mavericks";
                          case 10:
                            return "Yosemite";
                          case 11:
                            return "El Capitan";
                          case 12:
                            return "Sierra";
                          case 13:
                            return "High Sierra";
                          case 14:
                            return "Mojave";
                          case 15:
                            return "Catalina";
                          default:
                            return;
                        }
                    }),
                    (e.getAndroidVersionName = function (e) {
                      var t = e
                        .split(".")
                        .splice(0, 2)
                        .map(function (e) {
                          return parseInt(e, 10) || 0;
                        });
                      if ((t.push(0), !(1 === t[0] && t[1] < 5)))
                        return 1 === t[0] && t[1] < 6
                          ? "Cupcake"
                          : 1 === t[0] && t[1] >= 6
                          ? "Donut"
                          : 2 === t[0] && t[1] < 2
                          ? "Eclair"
                          : 2 === t[0] && 2 === t[1]
                          ? "Froyo"
                          : 2 === t[0] && t[1] > 2
                          ? "Gingerbread"
                          : 3 === t[0]
                          ? "Honeycomb"
                          : 4 === t[0] && t[1] < 1
                          ? "Ice Cream Sandwich"
                          : 4 === t[0] && t[1] < 4
                          ? "Jelly Bean"
                          : 4 === t[0] && t[1] >= 4
                          ? "KitKat"
                          : 5 === t[0]
                          ? "Lollipop"
                          : 6 === t[0]
                          ? "Marshmallow"
                          : 7 === t[0]
                          ? "Nougat"
                          : 8 === t[0]
                          ? "Oreo"
                          : 9 === t[0]
                          ? "Pie"
                          : void 0;
                    }),
                    (e.getVersionPrecision = function (e) {
                      return e.split(".").length;
                    }),
                    (e.compareVersions = function (t, r, n) {
                      void 0 === n && (n = !1);
                      var a = e.getVersionPrecision(t),
                        i = e.getVersionPrecision(r),
                        s = Math.max(a, i),
                        o = 0,
                        c = e.map([t, r], function (t) {
                          var r = s - e.getVersionPrecision(t),
                            n = t + new Array(r + 1).join(".0");
                          return e
                            .map(n.split("."), function (e) {
                              return new Array(20 - e.length).join("0") + e;
                            })
                            .reverse();
                        });
                      for (n && (o = s - Math.min(a, i)), s -= 1; s >= o; ) {
                        if (c[0][s] > c[1][s]) return 1;
                        if (c[0][s] === c[1][s]) {
                          if (s === o) return 0;
                          s -= 1;
                        } else if (c[0][s] < c[1][s]) return -1;
                      }
                    }),
                    (e.map = function (e, t) {
                      var r,
                        n = [];
                      if (Array.prototype.map)
                        return Array.prototype.map.call(e, t);
                      for (r = 0; r < e.length; r += 1) n.push(t(e[r]));
                      return n;
                    }),
                    (e.find = function (e, t) {
                      var r, n;
                      if (Array.prototype.find)
                        return Array.prototype.find.call(e, t);
                      for (r = 0, n = e.length; r < n; r += 1) {
                        var a = e[r];
                        if (t(a, r)) return a;
                      }
                    }),
                    (e.assign = function (e) {
                      for (
                        var t,
                          r,
                          n = e,
                          a = arguments.length,
                          i = new Array(a > 1 ? a - 1 : 0),
                          s = 1;
                        s < a;
                        s++
                      )
                        i[s - 1] = arguments[s];
                      if (Object.assign)
                        return Object.assign.apply(Object, [e].concat(i));
                      var o = function () {
                        var e = i[t];
                        "object" == typeof e &&
                          null !== e &&
                          Object.keys(e).forEach(function (t) {
                            n[t] = e[t];
                          });
                      };
                      for (t = 0, r = i.length; t < r; t += 1) o();
                      return e;
                    }),
                    (e.getBrowserAlias = function (e) {
                      return n.BROWSER_ALIASES_MAP[e];
                    }),
                    (e.getBrowserTypeByAlias = function (e) {
                      return n.BROWSER_MAP[e] || "";
                    }),
                    e
                  );
                })();
              (t.default = a), (e.exports = t.default);
            },
            18: function (e, t, r) {
              "use strict";
              (t.__esModule = !0),
                (t.ENGINE_MAP =
                  t.OS_MAP =
                  t.PLATFORMS_MAP =
                  t.BROWSER_MAP =
                  t.BROWSER_ALIASES_MAP =
                    void 0),
                (t.BROWSER_ALIASES_MAP = {
                  "Amazon Silk": "amazon_silk",
                  "Android Browser": "android",
                  Bada: "bada",
                  BlackBerry: "blackberry",
                  Chrome: "chrome",
                  Chromium: "chromium",
                  Electron: "electron",
                  Epiphany: "epiphany",
                  Firefox: "firefox",
                  Focus: "focus",
                  Generic: "generic",
                  "Google Search": "google_search",
                  Googlebot: "googlebot",
                  "Internet Explorer": "ie",
                  "K-Meleon": "k_meleon",
                  Maxthon: "maxthon",
                  "Microsoft Edge": "edge",
                  "MZ Browser": "mz",
                  "NAVER Whale Browser": "naver",
                  Opera: "opera",
                  "Opera Coast": "opera_coast",
                  PhantomJS: "phantomjs",
                  Puffin: "puffin",
                  QupZilla: "qupzilla",
                  QQ: "qq",
                  QQLite: "qqlite",
                  Safari: "safari",
                  Sailfish: "sailfish",
                  "Samsung Internet for Android": "samsung_internet",
                  SeaMonkey: "seamonkey",
                  Sleipnir: "sleipnir",
                  Swing: "swing",
                  Tizen: "tizen",
                  "UC Browser": "uc",
                  Vivaldi: "vivaldi",
                  "WebOS Browser": "webos",
                  WeChat: "wechat",
                  "Yandex Browser": "yandex",
                  Roku: "roku",
                }),
                (t.BROWSER_MAP = {
                  amazon_silk: "Amazon Silk",
                  android: "Android Browser",
                  bada: "Bada",
                  blackberry: "BlackBerry",
                  chrome: "Chrome",
                  chromium: "Chromium",
                  electron: "Electron",
                  epiphany: "Epiphany",
                  firefox: "Firefox",
                  focus: "Focus",
                  generic: "Generic",
                  googlebot: "Googlebot",
                  google_search: "Google Search",
                  ie: "Internet Explorer",
                  k_meleon: "K-Meleon",
                  maxthon: "Maxthon",
                  edge: "Microsoft Edge",
                  mz: "MZ Browser",
                  naver: "NAVER Whale Browser",
                  opera: "Opera",
                  opera_coast: "Opera Coast",
                  phantomjs: "PhantomJS",
                  puffin: "Puffin",
                  qupzilla: "QupZilla",
                  qq: "QQ Browser",
                  qqlite: "QQ Browser Lite",
                  safari: "Safari",
                  sailfish: "Sailfish",
                  samsung_internet: "Samsung Internet for Android",
                  seamonkey: "SeaMonkey",
                  sleipnir: "Sleipnir",
                  swing: "Swing",
                  tizen: "Tizen",
                  uc: "UC Browser",
                  vivaldi: "Vivaldi",
                  webos: "WebOS Browser",
                  wechat: "WeChat",
                  yandex: "Yandex Browser",
                }),
                (t.PLATFORMS_MAP = {
                  tablet: "tablet",
                  mobile: "mobile",
                  desktop: "desktop",
                  tv: "tv",
                }),
                (t.OS_MAP = {
                  WindowsPhone: "Windows Phone",
                  Windows: "Windows",
                  MacOS: "macOS",
                  iOS: "iOS",
                  Android: "Android",
                  WebOS: "WebOS",
                  BlackBerry: "BlackBerry",
                  Bada: "Bada",
                  Tizen: "Tizen",
                  Linux: "Linux",
                  ChromeOS: "Chrome OS",
                  PlayStation4: "PlayStation 4",
                  Roku: "Roku",
                }),
                (t.ENGINE_MAP = {
                  EdgeHTML: "EdgeHTML",
                  Blink: "Blink",
                  Trident: "Trident",
                  Presto: "Presto",
                  Gecko: "Gecko",
                  WebKit: "WebKit",
                });
            },
            90: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(91)) && n.__esModule ? n : { default: n },
                i = r(18);
              function s(e, t) {
                for (var r = 0; r < t.length; r++) {
                  var n = t[r];
                  (n.enumerable = n.enumerable || !1),
                    (n.configurable = !0),
                    "value" in n && (n.writable = !0),
                    Object.defineProperty(e, n.key, n);
                }
              }
              var o = (function () {
                function e() {}
                var t, r, n;
                return (
                  (e.getParser = function (e, t) {
                    if ((void 0 === t && (t = !1), "string" != typeof e))
                      throw new Error("UserAgent should be a string");
                    return new a.default(e, t);
                  }),
                  (e.parse = function (e) {
                    return new a.default(e).getResult();
                  }),
                  (t = e),
                  (n = [
                    {
                      key: "BROWSER_MAP",
                      get: function () {
                        return i.BROWSER_MAP;
                      },
                    },
                    {
                      key: "ENGINE_MAP",
                      get: function () {
                        return i.ENGINE_MAP;
                      },
                    },
                    {
                      key: "OS_MAP",
                      get: function () {
                        return i.OS_MAP;
                      },
                    },
                    {
                      key: "PLATFORMS_MAP",
                      get: function () {
                        return i.PLATFORMS_MAP;
                      },
                    },
                  ]),
                  (r = null) && s(t.prototype, r),
                  n && s(t, n),
                  e
                );
              })();
              (t.default = o), (e.exports = t.default);
            },
            91: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n = c(r(92)),
                a = c(r(93)),
                i = c(r(94)),
                s = c(r(95)),
                o = c(r(17));
              function c(e) {
                return e && e.__esModule ? e : { default: e };
              }
              var d = (function () {
                function e(e, t) {
                  if ((void 0 === t && (t = !1), null == e || "" === e))
                    throw new Error("UserAgent parameter can't be empty");
                  (this._ua = e),
                    (this.parsedResult = {}),
                    !0 !== t && this.parse();
                }
                var t = e.prototype;
                return (
                  (t.getUA = function () {
                    return this._ua;
                  }),
                  (t.test = function (e) {
                    return e.test(this._ua);
                  }),
                  (t.parseBrowser = function () {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.browser = t.describe(this.getUA())),
                      this.parsedResult.browser
                    );
                  }),
                  (t.getBrowser = function () {
                    return this.parsedResult.browser
                      ? this.parsedResult.browser
                      : this.parseBrowser();
                  }),
                  (t.getBrowserName = function (e) {
                    return e
                      ? String(this.getBrowser().name).toLowerCase() || ""
                      : this.getBrowser().name || "";
                  }),
                  (t.getBrowserVersion = function () {
                    return this.getBrowser().version;
                  }),
                  (t.getOS = function () {
                    return this.parsedResult.os
                      ? this.parsedResult.os
                      : this.parseOS();
                  }),
                  (t.parseOS = function () {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(a.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t && (this.parsedResult.os = t.describe(this.getUA())),
                      this.parsedResult.os
                    );
                  }),
                  (t.getOSName = function (e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.getOSVersion = function () {
                    return this.getOS().version;
                  }),
                  (t.getPlatform = function () {
                    return this.parsedResult.platform
                      ? this.parsedResult.platform
                      : this.parsePlatform();
                  }),
                  (t.getPlatformType = function (e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                  }),
                  (t.parsePlatform = function () {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(i.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.platform = t.describe(this.getUA())),
                      this.parsedResult.platform
                    );
                  }),
                  (t.getEngine = function () {
                    return this.parsedResult.engine
                      ? this.parsedResult.engine
                      : this.parseEngine();
                  }),
                  (t.getEngineName = function (e) {
                    return e
                      ? String(this.getEngine().name).toLowerCase() || ""
                      : this.getEngine().name || "";
                  }),
                  (t.parseEngine = function () {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(s.default, function (t) {
                      if ("function" == typeof t.test) return t.test(e);
                      if (t.test instanceof Array)
                        return t.test.some(function (t) {
                          return e.test(t);
                        });
                      throw new Error("Browser's test function is not valid");
                    });
                    return (
                      t &&
                        (this.parsedResult.engine = t.describe(this.getUA())),
                      this.parsedResult.engine
                    );
                  }),
                  (t.parse = function () {
                    return (
                      this.parseBrowser(),
                      this.parseOS(),
                      this.parsePlatform(),
                      this.parseEngine(),
                      this
                    );
                  }),
                  (t.getResult = function () {
                    return o.default.assign({}, this.parsedResult);
                  }),
                  (t.satisfies = function (e) {
                    var t = this,
                      r = {},
                      n = 0,
                      a = {},
                      i = 0;
                    if (
                      (Object.keys(e).forEach(function (t) {
                        var s = e[t];
                        "string" == typeof s
                          ? ((a[t] = s), (i += 1))
                          : "object" == typeof s && ((r[t] = s), (n += 1));
                      }),
                      n > 0)
                    ) {
                      var s = Object.keys(r),
                        c = o.default.find(s, function (e) {
                          return t.isOS(e);
                        });
                      if (c) {
                        var d = this.satisfies(r[c]);
                        if (void 0 !== d) return d;
                      }
                      var u = o.default.find(s, function (e) {
                        return t.isPlatform(e);
                      });
                      if (u) {
                        var l = this.satisfies(r[u]);
                        if (void 0 !== l) return l;
                      }
                    }
                    if (i > 0) {
                      var p = Object.keys(a),
                        h = o.default.find(p, function (e) {
                          return t.isBrowser(e, !0);
                        });
                      if (void 0 !== h) return this.compareVersion(a[h]);
                    }
                  }),
                  (t.isBrowser = function (e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(),
                      n = e.toLowerCase(),
                      a = o.default.getBrowserTypeByAlias(n);
                    return t && a && (n = a.toLowerCase()), n === r;
                  }),
                  (t.compareVersion = function (e) {
                    var t = [0],
                      r = e,
                      n = !1,
                      a = this.getBrowserVersion();
                    if ("string" == typeof a)
                      return (
                        ">" === e[0] || "<" === e[0]
                          ? ((r = e.substr(1)),
                            "=" === e[1]
                              ? ((n = !0), (r = e.substr(2)))
                              : (t = []),
                            ">" === e[0] ? t.push(1) : t.push(-1))
                          : "=" === e[0]
                          ? (r = e.substr(1))
                          : "~" === e[0] && ((n = !0), (r = e.substr(1))),
                        t.indexOf(o.default.compareVersions(a, r, n)) > -1
                      );
                  }),
                  (t.isOS = function (e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                  }),
                  (t.isPlatform = function (e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                  }),
                  (t.isEngine = function (e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                  }),
                  (t.is = function (e, t) {
                    return (
                      void 0 === t && (t = !1),
                      this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e)
                    );
                  }),
                  (t.some = function (e) {
                    var t = this;
                    return (
                      void 0 === e && (e = []),
                      e.some(function (e) {
                        return t.is(e);
                      })
                    );
                  }),
                  e
                );
              })();
              (t.default = d), (e.exports = t.default);
            },
            92: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = /version\/(\d+(\.?_?\d+)+)/i,
                s = [
                  {
                    test: [/googlebot/i],
                    describe: function (e) {
                      var t = { name: "Googlebot" },
                        r =
                          a.default.getFirstMatch(
                            /googlebot\/(\d+(\.\d+))/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opera/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opr\/|opios/i],
                    describe: function (e) {
                      var t = { name: "Opera" },
                        r =
                          a.default.getFirstMatch(
                            /(?:opr|opios)[\s/](\S+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/SamsungBrowser/i],
                    describe: function (e) {
                      var t = { name: "Samsung Internet for Android" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Whale/i],
                    describe: function (e) {
                      var t = { name: "NAVER Whale Browser" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MZBrowser/i],
                    describe: function (e) {
                      var t = { name: "MZ Browser" },
                        r =
                          a.default.getFirstMatch(
                            /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/focus/i],
                    describe: function (e) {
                      var t = { name: "Focus" },
                        r =
                          a.default.getFirstMatch(
                            /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/swing/i],
                    describe: function (e) {
                      var t = { name: "Swing" },
                        r =
                          a.default.getFirstMatch(
                            /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/coast/i],
                    describe: function (e) {
                      var t = { name: "Opera Coast" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/opt\/\d+(?:.?_?\d+)+/i],
                    describe: function (e) {
                      var t = { name: "Opera Touch" },
                        r =
                          a.default.getFirstMatch(
                            /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/yabrowser/i],
                    describe: function (e) {
                      var t = { name: "Yandex Browser" },
                        r =
                          a.default.getFirstMatch(
                            /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/ucbrowser/i],
                    describe: function (e) {
                      var t = { name: "UC Browser" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/Maxthon|mxios/i],
                    describe: function (e) {
                      var t = { name: "Maxthon" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/epiphany/i],
                    describe: function (e) {
                      var t = { name: "Epiphany" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/puffin/i],
                    describe: function (e) {
                      var t = { name: "Puffin" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sleipnir/i],
                    describe: function (e) {
                      var t = { name: "Sleipnir" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/k-meleon/i],
                    describe: function (e) {
                      var t = { name: "K-Meleon" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/micromessenger/i],
                    describe: function (e) {
                      var t = { name: "WeChat" },
                        r =
                          a.default.getFirstMatch(
                            /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qqbrowser/i],
                    describe: function (e) {
                      var t = {
                          name: /qqbrowserlite/i.test(e)
                            ? "QQ Browser Lite"
                            : "QQ Browser",
                        },
                        r =
                          a.default.getFirstMatch(
                            /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/msie|trident/i],
                    describe: function (e) {
                      var t = { name: "Internet Explorer" },
                        r = a.default.getFirstMatch(
                          /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/\sedg\//i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = a.default.getFirstMatch(
                          /\sedg\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/edg([ea]|ios)/i],
                    describe: function (e) {
                      var t = { name: "Microsoft Edge" },
                        r = a.default.getSecondMatch(
                          /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/vivaldi/i],
                    describe: function (e) {
                      var t = { name: "Vivaldi" },
                        r = a.default.getFirstMatch(
                          /vivaldi\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/seamonkey/i],
                    describe: function (e) {
                      var t = { name: "SeaMonkey" },
                        r = a.default.getFirstMatch(
                          /seamonkey\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/sailfish/i],
                    describe: function (e) {
                      var t = { name: "Sailfish" },
                        r = a.default.getFirstMatch(
                          /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function (e) {
                      var t = { name: "Amazon Silk" },
                        r = a.default.getFirstMatch(
                          /silk\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/phantom/i],
                    describe: function (e) {
                      var t = { name: "PhantomJS" },
                        r = a.default.getFirstMatch(
                          /phantomjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/slimerjs/i],
                    describe: function (e) {
                      var t = { name: "SlimerJS" },
                        r = a.default.getFirstMatch(
                          /slimerjs\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t = { name: "BlackBerry" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = { name: "WebOS Browser" },
                        r =
                          a.default.getFirstMatch(i, e) ||
                          a.default.getFirstMatch(
                            /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                            e
                          );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = { name: "Bada" },
                        r = a.default.getFirstMatch(
                          /dolfin\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = { name: "Tizen" },
                        r =
                          a.default.getFirstMatch(
                            /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/qupzilla/i],
                    describe: function (e) {
                      var t = { name: "QupZilla" },
                        r =
                          a.default.getFirstMatch(
                            /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/firefox|iceweasel|fxios/i],
                    describe: function (e) {
                      var t = { name: "Firefox" },
                        r = a.default.getFirstMatch(
                          /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/electron/i],
                    describe: function (e) {
                      var t = { name: "Electron" },
                        r = a.default.getFirstMatch(
                          /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/MiuiBrowser/i],
                    describe: function (e) {
                      var t = { name: "Miui" },
                        r = a.default.getFirstMatch(
                          /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chromium/i],
                    describe: function (e) {
                      var t = { name: "Chromium" },
                        r =
                          a.default.getFirstMatch(
                            /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                            e
                          ) || a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/chrome|crios|crmo/i],
                    describe: function (e) {
                      var t = { name: "Chrome" },
                        r = a.default.getFirstMatch(
                          /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/GSA/i],
                    describe: function (e) {
                      var t = { name: "Google Search" },
                        r = a.default.getFirstMatch(
                          /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = { name: "Android Browser" },
                        r = a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/playstation 4/i],
                    describe: function (e) {
                      var t = { name: "PlayStation 4" },
                        r = a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/safari|applewebkit/i],
                    describe: function (e) {
                      var t = { name: "Safari" },
                        r = a.default.getFirstMatch(i, e);
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/.*/i],
                    describe: function (e) {
                      var t =
                        -1 !== e.search("\\(")
                          ? /^(.*)\/(.*)[ \t]\((.*)/
                          : /^(.*)\/(.*) /;
                      return {
                        name: a.default.getFirstMatch(t, e),
                        version: a.default.getSecondMatch(t, e),
                      };
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
            93: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                s = [
                  {
                    test: [/Roku\/DVP/],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /Roku\/DVP-(\d+\.\d+)/i,
                        e
                      );
                      return { name: i.OS_MAP.Roku, version: t };
                    },
                  },
                  {
                    test: [/windows phone/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.WindowsPhone, version: t };
                    },
                  },
                  {
                    test: [/windows /i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                          /Windows ((NT|XP)( \d\d?.\d)?)/i,
                          e
                        ),
                        r = a.default.getWindowsVersionName(t);
                      return {
                        name: i.OS_MAP.Windows,
                        version: t,
                        versionName: r,
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function (e) {
                      var t = { name: i.OS_MAP.iOS },
                        r = a.default.getSecondMatch(
                          /(Version\/)(\d[\d.]+)/,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/macintosh/i],
                    describe: function (e) {
                      var t = a.default
                          .getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e)
                          .replace(/[_\s]/g, "."),
                        r = a.default.getMacOSVersionName(t),
                        n = { name: i.OS_MAP.MacOS, version: t };
                      return r && (n.versionName = r), n;
                    },
                  },
                  {
                    test: [/(ipod|iphone|ipad)/i],
                    describe: function (e) {
                      var t = a.default
                        .getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e)
                        .replace(/[_\s]/g, ".");
                      return { name: i.OS_MAP.iOS, version: t };
                    },
                  },
                  {
                    test: function (e) {
                      var t = !e.test(/like android/i),
                        r = e.test(/android/i);
                      return t && r;
                    },
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                          /android[\s/-](\d+(\.\d+)*)/i,
                          e
                        ),
                        r = a.default.getAndroidVersionName(t),
                        n = { name: i.OS_MAP.Android, version: t };
                      return r && (n.versionName = r), n;
                    },
                  },
                  {
                    test: [/(web|hpw)[o0]s/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                          /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                          e
                        ),
                        r = { name: i.OS_MAP.WebOS };
                      return t && t.length && (r.version = t), r;
                    },
                  },
                  {
                    test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                    describe: function (e) {
                      var t =
                        a.default.getFirstMatch(
                          /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                          e
                        ) ||
                        a.default.getFirstMatch(
                          /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                          e
                        ) ||
                        a.default.getFirstMatch(/\bbb(\d+)/i, e);
                      return { name: i.OS_MAP.BlackBerry, version: t };
                    },
                  },
                  {
                    test: [/bada/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /bada\/(\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.Bada, version: t };
                    },
                  },
                  {
                    test: [/tizen/i],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /tizen[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.Tizen, version: t };
                    },
                  },
                  {
                    test: [/linux/i],
                    describe: function () {
                      return { name: i.OS_MAP.Linux };
                    },
                  },
                  {
                    test: [/CrOS/],
                    describe: function () {
                      return { name: i.OS_MAP.ChromeOS };
                    },
                  },
                  {
                    test: [/PlayStation 4/],
                    describe: function (e) {
                      var t = a.default.getFirstMatch(
                        /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                        e
                      );
                      return { name: i.OS_MAP.PlayStation4, version: t };
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
            94: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                s = [
                  {
                    test: [/googlebot/i],
                    describe: function () {
                      return { type: "bot", vendor: "Google" };
                    },
                  },
                  {
                    test: [/huawei/i],
                    describe: function (e) {
                      var t =
                          a.default.getFirstMatch(/(can-l01)/i, e) && "Nova",
                        r = { type: i.PLATFORMS_MAP.mobile, vendor: "Huawei" };
                      return t && (r.model = t), r;
                    },
                  },
                  {
                    test: [/nexus\s*(?:7|8|9|10).*/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/ipad/i],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/Macintosh(.*?) FxiOS(.*?)\//],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Apple",
                        model: "iPad",
                      };
                    },
                  },
                  {
                    test: [/kftt build/i],
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.tablet,
                        vendor: "Amazon",
                        model: "Kindle Fire HD 7",
                      };
                    },
                  },
                  {
                    test: [/silk/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet, vendor: "Amazon" };
                    },
                  },
                  {
                    test: [/tablet(?! pc)/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/ipod|iphone/i),
                        r = e.test(/like (ipod|iphone)/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = a.default.getFirstMatch(/(ipod|iphone)/i, e);
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Apple",
                        model: t,
                      };
                    },
                  },
                  {
                    test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile, vendor: "Nexus" };
                    },
                  },
                  {
                    test: [/[^-]mobi/i],
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "BlackBerry",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      return "bada" === e.getBrowserName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows phone" === e.getBrowserName();
                    },
                    describe: function () {
                      return {
                        type: i.PLATFORMS_MAP.mobile,
                        vendor: "Microsoft",
                      };
                    },
                  },
                  {
                    test: function (e) {
                      var t = Number(String(e.getOSVersion()).split(".")[0]);
                      return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tablet };
                    },
                  },
                  {
                    test: function (e) {
                      return "android" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.mobile };
                    },
                  },
                  {
                    test: function (e) {
                      return "macos" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop, vendor: "Apple" };
                    },
                  },
                  {
                    test: function (e) {
                      return "windows" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "linux" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.desktop };
                    },
                  },
                  {
                    test: function (e) {
                      return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tv };
                    },
                  },
                  {
                    test: function (e) {
                      return "roku" === e.getOSName(!0);
                    },
                    describe: function () {
                      return { type: i.PLATFORMS_MAP.tv };
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
            95: function (e, t, r) {
              "use strict";
              (t.__esModule = !0), (t.default = void 0);
              var n,
                a = (n = r(17)) && n.__esModule ? n : { default: n },
                i = r(18),
                s = [
                  {
                    test: function (e) {
                      return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function (e) {
                      if (/\sedg\//i.test(e))
                        return { name: i.ENGINE_MAP.Blink };
                      var t = a.default.getFirstMatch(
                        /edge\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                      return { name: i.ENGINE_MAP.EdgeHTML, version: t };
                    },
                  },
                  {
                    test: [/trident/i],
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Trident },
                        r = a.default.getFirstMatch(
                          /trident\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      return e.test(/presto/i);
                    },
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Presto },
                        r = a.default.getFirstMatch(
                          /presto\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: function (e) {
                      var t = e.test(/gecko/i),
                        r = e.test(/like gecko/i);
                      return t && !r;
                    },
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.Gecko },
                        r = a.default.getFirstMatch(
                          /gecko\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                  {
                    test: [/(apple)?webkit\/537\.36/i],
                    describe: function () {
                      return { name: i.ENGINE_MAP.Blink };
                    },
                  },
                  {
                    test: [/(apple)?webkit/i],
                    describe: function (e) {
                      var t = { name: i.ENGINE_MAP.WebKit },
                        r = a.default.getFirstMatch(
                          /webkit\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                      return r && (t.version = r), t;
                    },
                  },
                ];
              (t.default = s), (e.exports = t.default);
            },
          });
        },
        452: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.BlockCipher,
                r = e.algo,
                a = [],
                i = [],
                s = [],
                o = [],
                c = [],
                d = [],
                u = [],
                l = [],
                p = [],
                h = [];
              !(function () {
                for (var e = [], t = 0; t < 256; t++)
                  e[t] = t < 128 ? t << 1 : (t << 1) ^ 283;
                var r = 0,
                  n = 0;
                for (t = 0; t < 256; t++) {
                  var _ = n ^ (n << 1) ^ (n << 2) ^ (n << 3) ^ (n << 4);
                  (_ = (_ >>> 8) ^ (255 & _) ^ 99), (a[r] = _), (i[_] = r);
                  var f = e[r],
                    m = e[f],
                    v = e[m],
                    g = (257 * e[_]) ^ (16843008 * _);
                  (s[r] = (g << 24) | (g >>> 8)),
                    (o[r] = (g << 16) | (g >>> 16)),
                    (c[r] = (g << 8) | (g >>> 24)),
                    (d[r] = g),
                    (g =
                      (16843009 * v) ^
                      (65537 * m) ^
                      (257 * f) ^
                      (16843008 * r)),
                    (u[_] = (g << 24) | (g >>> 8)),
                    (l[_] = (g << 16) | (g >>> 16)),
                    (p[_] = (g << 8) | (g >>> 24)),
                    (h[_] = g),
                    r
                      ? ((r = f ^ e[e[e[v ^ f]]]), (n ^= e[e[n]]))
                      : (r = n = 1);
                }
              })();
              var _ = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
                f = (r.AES = t.extend({
                  _doReset: function () {
                    if (!this._nRounds || this._keyPriorReset !== this._key) {
                      for (
                        var e = (this._keyPriorReset = this._key),
                          t = e.words,
                          r = e.sigBytes / 4,
                          n = 4 * ((this._nRounds = r + 6) + 1),
                          i = (this._keySchedule = []),
                          s = 0;
                        s < n;
                        s++
                      )
                        s < r
                          ? (i[s] = t[s])
                          : ((d = i[s - 1]),
                            s % r
                              ? r > 6 &&
                                s % r == 4 &&
                                (d =
                                  (a[d >>> 24] << 24) |
                                  (a[(d >>> 16) & 255] << 16) |
                                  (a[(d >>> 8) & 255] << 8) |
                                  a[255 & d])
                              : ((d =
                                  (a[(d = (d << 8) | (d >>> 24)) >>> 24] <<
                                    24) |
                                  (a[(d >>> 16) & 255] << 16) |
                                  (a[(d >>> 8) & 255] << 8) |
                                  a[255 & d]),
                                (d ^= _[(s / r) | 0] << 24)),
                            (i[s] = i[s - r] ^ d));
                      for (
                        var o = (this._invKeySchedule = []), c = 0;
                        c < n;
                        c++
                      ) {
                        if (((s = n - c), c % 4)) var d = i[s];
                        else d = i[s - 4];
                        o[c] =
                          c < 4 || s <= 4
                            ? d
                            : u[a[d >>> 24]] ^
                              l[a[(d >>> 16) & 255]] ^
                              p[a[(d >>> 8) & 255]] ^
                              h[a[255 & d]];
                      }
                    }
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._keySchedule, s, o, c, d, a);
                  },
                  decryptBlock: function (e, t) {
                    var r = e[t + 1];
                    (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r),
                      this._doCryptBlock(
                        e,
                        t,
                        this._invKeySchedule,
                        u,
                        l,
                        p,
                        h,
                        i
                      ),
                      (r = e[t + 1]),
                      (e[t + 1] = e[t + 3]),
                      (e[t + 3] = r);
                  },
                  _doCryptBlock: function (e, t, r, n, a, i, s, o) {
                    for (
                      var c = this._nRounds,
                        d = e[t] ^ r[0],
                        u = e[t + 1] ^ r[1],
                        l = e[t + 2] ^ r[2],
                        p = e[t + 3] ^ r[3],
                        h = 4,
                        _ = 1;
                      _ < c;
                      _++
                    ) {
                      var f =
                          n[d >>> 24] ^
                          a[(u >>> 16) & 255] ^
                          i[(l >>> 8) & 255] ^
                          s[255 & p] ^
                          r[h++],
                        m =
                          n[u >>> 24] ^
                          a[(l >>> 16) & 255] ^
                          i[(p >>> 8) & 255] ^
                          s[255 & d] ^
                          r[h++],
                        v =
                          n[l >>> 24] ^
                          a[(p >>> 16) & 255] ^
                          i[(d >>> 8) & 255] ^
                          s[255 & u] ^
                          r[h++],
                        g =
                          n[p >>> 24] ^
                          a[(d >>> 16) & 255] ^
                          i[(u >>> 8) & 255] ^
                          s[255 & l] ^
                          r[h++];
                      (d = f), (u = m), (l = v), (p = g);
                    }
                    (f =
                      ((o[d >>> 24] << 24) |
                        (o[(u >>> 16) & 255] << 16) |
                        (o[(l >>> 8) & 255] << 8) |
                        o[255 & p]) ^
                      r[h++]),
                      (m =
                        ((o[u >>> 24] << 24) |
                          (o[(l >>> 16) & 255] << 16) |
                          (o[(p >>> 8) & 255] << 8) |
                          o[255 & d]) ^
                        r[h++]),
                      (v =
                        ((o[l >>> 24] << 24) |
                          (o[(p >>> 16) & 255] << 16) |
                          (o[(d >>> 8) & 255] << 8) |
                          o[255 & u]) ^
                        r[h++]),
                      (g =
                        ((o[p >>> 24] << 24) |
                          (o[(d >>> 16) & 255] << 16) |
                          (o[(u >>> 8) & 255] << 8) |
                          o[255 & l]) ^
                        r[h++]),
                      (e[t] = f),
                      (e[t + 1] = m),
                      (e[t + 2] = v),
                      (e[t + 3] = g);
                  },
                  keySize: 8,
                }));
              e.AES = t._createHelper(f);
            })(),
            n.AES);
        },
        5109: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(888),
            void (
              n.lib.Cipher ||
              (function (e) {
                var t = n,
                  r = t.lib,
                  a = r.Base,
                  i = r.WordArray,
                  s = r.BufferedBlockAlgorithm,
                  o = t.enc,
                  c = (o.Utf8, o.Base64),
                  d = t.algo.EvpKDF,
                  u = (r.Cipher = s.extend({
                    cfg: a.extend(),
                    createEncryptor: function (e, t) {
                      return this.create(this._ENC_XFORM_MODE, e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.create(this._DEC_XFORM_MODE, e, t);
                    },
                    init: function (e, t, r) {
                      (this.cfg = this.cfg.extend(r)),
                        (this._xformMode = e),
                        (this._key = t),
                        this.reset();
                    },
                    reset: function () {
                      s.reset.call(this), this._doReset();
                    },
                    process: function (e) {
                      return this._append(e), this._process();
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    keySize: 4,
                    ivSize: 4,
                    _ENC_XFORM_MODE: 1,
                    _DEC_XFORM_MODE: 2,
                    _createHelper: (function () {
                      function e(e) {
                        return "string" == typeof e ? y : v;
                      }
                      return function (t) {
                        return {
                          encrypt: function (r, n, a) {
                            return e(n).encrypt(t, r, n, a);
                          },
                          decrypt: function (r, n, a) {
                            return e(n).decrypt(t, r, n, a);
                          },
                        };
                      };
                    })(),
                  })),
                  l =
                    ((r.StreamCipher = u.extend({
                      _doFinalize: function () {
                        return this._process(!0);
                      },
                      blockSize: 1,
                    })),
                    (t.mode = {})),
                  p = (r.BlockCipherMode = a.extend({
                    createEncryptor: function (e, t) {
                      return this.Encryptor.create(e, t);
                    },
                    createDecryptor: function (e, t) {
                      return this.Decryptor.create(e, t);
                    },
                    init: function (e, t) {
                      (this._cipher = e), (this._iv = t);
                    },
                  })),
                  h = (l.CBC = (function () {
                    var t = p.extend();
                    function r(t, r, n) {
                      var a,
                        i = this._iv;
                      i ? ((a = i), (this._iv = e)) : (a = this._prevBlock);
                      for (var s = 0; s < n; s++) t[r + s] ^= a[s];
                    }
                    return (
                      (t.Encryptor = t.extend({
                        processBlock: function (e, t) {
                          var n = this._cipher,
                            a = n.blockSize;
                          r.call(this, e, t, a),
                            n.encryptBlock(e, t),
                            (this._prevBlock = e.slice(t, t + a));
                        },
                      })),
                      (t.Decryptor = t.extend({
                        processBlock: function (e, t) {
                          var n = this._cipher,
                            a = n.blockSize,
                            i = e.slice(t, t + a);
                          n.decryptBlock(e, t),
                            r.call(this, e, t, a),
                            (this._prevBlock = i);
                        },
                      })),
                      t
                    );
                  })()),
                  _ = ((t.pad = {}).Pkcs7 = {
                    pad: function (e, t) {
                      for (
                        var r = 4 * t,
                          n = r - (e.sigBytes % r),
                          a = (n << 24) | (n << 16) | (n << 8) | n,
                          s = [],
                          o = 0;
                        o < n;
                        o += 4
                      )
                        s.push(a);
                      var c = i.create(s, n);
                      e.concat(c);
                    },
                    unpad: function (e) {
                      var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                      e.sigBytes -= t;
                    },
                  }),
                  f =
                    ((r.BlockCipher = u.extend({
                      cfg: u.cfg.extend({ mode: h, padding: _ }),
                      reset: function () {
                        var e;
                        u.reset.call(this);
                        var t = this.cfg,
                          r = t.iv,
                          n = t.mode;
                        this._xformMode == this._ENC_XFORM_MODE
                          ? (e = n.createEncryptor)
                          : ((e = n.createDecryptor),
                            (this._minBufferSize = 1)),
                          this._mode && this._mode.__creator == e
                            ? this._mode.init(this, r && r.words)
                            : ((this._mode = e.call(n, this, r && r.words)),
                              (this._mode.__creator = e));
                      },
                      _doProcessBlock: function (e, t) {
                        this._mode.processBlock(e, t);
                      },
                      _doFinalize: function () {
                        var e,
                          t = this.cfg.padding;
                        return (
                          this._xformMode == this._ENC_XFORM_MODE
                            ? (t.pad(this._data, this.blockSize),
                              (e = this._process(!0)))
                            : ((e = this._process(!0)), t.unpad(e)),
                          e
                        );
                      },
                      blockSize: 4,
                    })),
                    (r.CipherParams = a.extend({
                      init: function (e) {
                        this.mixIn(e);
                      },
                      toString: function (e) {
                        return (e || this.formatter).stringify(this);
                      },
                    }))),
                  m = ((t.format = {}).OpenSSL = {
                    stringify: function (e) {
                      var t = e.ciphertext,
                        r = e.salt;
                      return (
                        r
                          ? i
                              .create([1398893684, 1701076831])
                              .concat(r)
                              .concat(t)
                          : t
                      ).toString(c);
                    },
                    parse: function (e) {
                      var t,
                        r = c.parse(e),
                        n = r.words;
                      return (
                        1398893684 == n[0] &&
                          1701076831 == n[1] &&
                          ((t = i.create(n.slice(2, 4))),
                          n.splice(0, 4),
                          (r.sigBytes -= 16)),
                        f.create({ ciphertext: r, salt: t })
                      );
                    },
                  }),
                  v = (r.SerializableCipher = a.extend({
                    cfg: a.extend({ format: m }),
                    encrypt: function (e, t, r, n) {
                      n = this.cfg.extend(n);
                      var a = e.createEncryptor(r, n),
                        i = a.finalize(t),
                        s = a.cfg;
                      return f.create({
                        ciphertext: i,
                        key: r,
                        iv: s.iv,
                        algorithm: e,
                        mode: s.mode,
                        padding: s.padding,
                        blockSize: e.blockSize,
                        formatter: n.format,
                      });
                    },
                    decrypt: function (e, t, r, n) {
                      return (
                        (n = this.cfg.extend(n)),
                        (t = this._parse(t, n.format)),
                        e.createDecryptor(r, n).finalize(t.ciphertext)
                      );
                    },
                    _parse: function (e, t) {
                      return "string" == typeof e ? t.parse(e, this) : e;
                    },
                  })),
                  g = ((t.kdf = {}).OpenSSL = {
                    execute: function (e, t, r, n) {
                      n || (n = i.random(8));
                      var a = d.create({ keySize: t + r }).compute(e, n),
                        s = i.create(a.words.slice(t), 4 * r);
                      return (
                        (a.sigBytes = 4 * t),
                        f.create({ key: a, iv: s, salt: n })
                      );
                    },
                  }),
                  y = (r.PasswordBasedCipher = v.extend({
                    cfg: v.cfg.extend({ kdf: g }),
                    encrypt: function (e, t, r, n) {
                      var a = (n = this.cfg.extend(n)).kdf.execute(
                        r,
                        e.keySize,
                        e.ivSize
                      );
                      n.iv = a.iv;
                      var i = v.encrypt.call(this, e, t, a.key, n);
                      return i.mixIn(a), i;
                    },
                    decrypt: function (e, t, r, n) {
                      (n = this.cfg.extend(n)), (t = this._parse(t, n.format));
                      var a = n.kdf.execute(r, e.keySize, e.ivSize, t.salt);
                      return (
                        (n.iv = a.iv), v.decrypt.call(this, e, t, a.key, n)
                      );
                    },
                  }));
              })()
            ));
        },
        8249: function (e, t, r) {
          var n;
          e.exports =
            ((n =
              n ||
              (function (e, t) {
                var n;
                if (
                  ("undefined" != typeof window &&
                    window.crypto &&
                    (n = window.crypto),
                  "undefined" != typeof self &&
                    self.crypto &&
                    (n = self.crypto),
                  "undefined" != typeof globalThis &&
                    globalThis.crypto &&
                    (n = globalThis.crypto),
                  !n &&
                    "undefined" != typeof window &&
                    window.msCrypto &&
                    (n = window.msCrypto),
                  !n && void 0 !== r.g && r.g.crypto && (n = r.g.crypto),
                  !n)
                )
                  try {
                    n = r(2480);
                  } catch (e) {}
                var a = function () {
                    if (n) {
                      if ("function" == typeof n.getRandomValues)
                        try {
                          return n.getRandomValues(new Uint32Array(1))[0];
                        } catch (e) {}
                      if ("function" == typeof n.randomBytes)
                        try {
                          return n.randomBytes(4).readInt32LE();
                        } catch (e) {}
                    }
                    throw new Error(
                      "Native crypto module could not be used to get secure random number."
                    );
                  },
                  i =
                    Object.create ||
                    (function () {
                      function e() {}
                      return function (t) {
                        var r;
                        return (
                          (e.prototype = t),
                          (r = new e()),
                          (e.prototype = null),
                          r
                        );
                      };
                    })(),
                  s = {},
                  o = (s.lib = {}),
                  c = (o.Base = {
                    extend: function (e) {
                      var t = i(this);
                      return (
                        e && t.mixIn(e),
                        (t.hasOwnProperty("init") && this.init !== t.init) ||
                          (t.init = function () {
                            t.$super.init.apply(this, arguments);
                          }),
                        (t.init.prototype = t),
                        (t.$super = this),
                        t
                      );
                    },
                    create: function () {
                      var e = this.extend();
                      return e.init.apply(e, arguments), e;
                    },
                    init: function () {},
                    mixIn: function (e) {
                      for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                      e.hasOwnProperty("toString") &&
                        (this.toString = e.toString);
                    },
                    clone: function () {
                      return this.init.prototype.extend(this);
                    },
                  }),
                  d = (o.WordArray = c.extend({
                    init: function (e, r) {
                      (e = this.words = e || []),
                        (this.sigBytes = r != t ? r : 4 * e.length);
                    },
                    toString: function (e) {
                      return (e || l).stringify(this);
                    },
                    concat: function (e) {
                      var t = this.words,
                        r = e.words,
                        n = this.sigBytes,
                        a = e.sigBytes;
                      if ((this.clamp(), n % 4))
                        for (var i = 0; i < a; i++) {
                          var s = (r[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                          t[(n + i) >>> 2] |= s << (24 - ((n + i) % 4) * 8);
                        }
                      else
                        for (var o = 0; o < a; o += 4)
                          t[(n + o) >>> 2] = r[o >>> 2];
                      return (this.sigBytes += a), this;
                    },
                    clamp: function () {
                      var t = this.words,
                        r = this.sigBytes;
                      (t[r >>> 2] &= 4294967295 << (32 - (r % 4) * 8)),
                        (t.length = e.ceil(r / 4));
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e.words = this.words.slice(0)), e;
                    },
                    random: function (e) {
                      for (var t = [], r = 0; r < e; r += 4) t.push(a());
                      return new d.init(t, e);
                    },
                  })),
                  u = (s.enc = {}),
                  l = (u.Hex = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, n = [], a = 0;
                        a < r;
                        a++
                      ) {
                        var i = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                        n.push((i >>> 4).toString(16)),
                          n.push((15 & i).toString(16));
                      }
                      return n.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], n = 0; n < t; n += 2)
                        r[n >>> 3] |=
                          parseInt(e.substr(n, 2), 16) << (24 - (n % 8) * 4);
                      return new d.init(r, t / 2);
                    },
                  }),
                  p = (u.Latin1 = {
                    stringify: function (e) {
                      for (
                        var t = e.words, r = e.sigBytes, n = [], a = 0;
                        a < r;
                        a++
                      ) {
                        var i = (t[a >>> 2] >>> (24 - (a % 4) * 8)) & 255;
                        n.push(String.fromCharCode(i));
                      }
                      return n.join("");
                    },
                    parse: function (e) {
                      for (var t = e.length, r = [], n = 0; n < t; n++)
                        r[n >>> 2] |=
                          (255 & e.charCodeAt(n)) << (24 - (n % 4) * 8);
                      return new d.init(r, t);
                    },
                  }),
                  h = (u.Utf8 = {
                    stringify: function (e) {
                      try {
                        return decodeURIComponent(escape(p.stringify(e)));
                      } catch (e) {
                        throw new Error("Malformed UTF-8 data");
                      }
                    },
                    parse: function (e) {
                      return p.parse(unescape(encodeURIComponent(e)));
                    },
                  }),
                  _ = (o.BufferedBlockAlgorithm = c.extend({
                    reset: function () {
                      (this._data = new d.init()), (this._nDataBytes = 0);
                    },
                    _append: function (e) {
                      "string" == typeof e && (e = h.parse(e)),
                        this._data.concat(e),
                        (this._nDataBytes += e.sigBytes);
                    },
                    _process: function (t) {
                      var r,
                        n = this._data,
                        a = n.words,
                        i = n.sigBytes,
                        s = this.blockSize,
                        o = i / (4 * s),
                        c =
                          (o = t
                            ? e.ceil(o)
                            : e.max((0 | o) - this._minBufferSize, 0)) * s,
                        u = e.min(4 * c, i);
                      if (c) {
                        for (var l = 0; l < c; l += s)
                          this._doProcessBlock(a, l);
                        (r = a.splice(0, c)), (n.sigBytes -= u);
                      }
                      return new d.init(r, u);
                    },
                    clone: function () {
                      var e = c.clone.call(this);
                      return (e._data = this._data.clone()), e;
                    },
                    _minBufferSize: 0,
                  })),
                  f =
                    ((o.Hasher = _.extend({
                      cfg: c.extend(),
                      init: function (e) {
                        (this.cfg = this.cfg.extend(e)), this.reset();
                      },
                      reset: function () {
                        _.reset.call(this), this._doReset();
                      },
                      update: function (e) {
                        return this._append(e), this._process(), this;
                      },
                      finalize: function (e) {
                        return e && this._append(e), this._doFinalize();
                      },
                      blockSize: 16,
                      _createHelper: function (e) {
                        return function (t, r) {
                          return new e.init(r).finalize(t);
                        };
                      },
                      _createHmacHelper: function (e) {
                        return function (t, r) {
                          return new f.HMAC.init(e, r).finalize(t);
                        };
                      },
                    })),
                    (s.algo = {}));
                return s;
              })(Math)),
            n);
        },
        8269: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              var e = n,
                t = e.lib.WordArray;
              function r(e, r, n) {
                for (var a = [], i = 0, s = 0; s < r; s++)
                  if (s % 4) {
                    var o =
                      (n[e.charCodeAt(s - 1)] << ((s % 4) * 2)) |
                      (n[e.charCodeAt(s)] >>> (6 - (s % 4) * 2));
                    (a[i >>> 2] |= o << (24 - (i % 4) * 8)), i++;
                  }
                return t.create(a, i);
              }
              e.enc.Base64 = {
                stringify: function (e) {
                  var t = e.words,
                    r = e.sigBytes,
                    n = this._map;
                  e.clamp();
                  for (var a = [], i = 0; i < r; i += 3)
                    for (
                      var s =
                          (((t[i >>> 2] >>> (24 - (i % 4) * 8)) & 255) << 16) |
                          (((t[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((t[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) &
                            255),
                        o = 0;
                      o < 4 && i + 0.75 * o < r;
                      o++
                    )
                      a.push(n.charAt((s >>> (6 * (3 - o))) & 63));
                  var c = n.charAt(64);
                  if (c) for (; a.length % 4; ) a.push(c);
                  return a.join("");
                },
                parse: function (e) {
                  var t = e.length,
                    n = this._map,
                    a = this._reverseMap;
                  if (!a) {
                    a = this._reverseMap = [];
                    for (var i = 0; i < n.length; i++) a[n.charCodeAt(i)] = i;
                  }
                  var s = n.charAt(64);
                  if (s) {
                    var o = e.indexOf(s);
                    -1 !== o && (t = o);
                  }
                  return r(e, t, a);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
              };
            })(),
            n.enc.Base64);
        },
        3786: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              var e = n,
                t = e.lib.WordArray;
              function r(e, r, n) {
                for (var a = [], i = 0, s = 0; s < r; s++)
                  if (s % 4) {
                    var o =
                      (n[e.charCodeAt(s - 1)] << ((s % 4) * 2)) |
                      (n[e.charCodeAt(s)] >>> (6 - (s % 4) * 2));
                    (a[i >>> 2] |= o << (24 - (i % 4) * 8)), i++;
                  }
                return t.create(a, i);
              }
              e.enc.Base64url = {
                stringify: function (e, t = !0) {
                  var r = e.words,
                    n = e.sigBytes,
                    a = t ? this._safe_map : this._map;
                  e.clamp();
                  for (var i = [], s = 0; s < n; s += 3)
                    for (
                      var o =
                          (((r[s >>> 2] >>> (24 - (s % 4) * 8)) & 255) << 16) |
                          (((r[(s + 1) >>> 2] >>> (24 - ((s + 1) % 4) * 8)) &
                            255) <<
                            8) |
                          ((r[(s + 2) >>> 2] >>> (24 - ((s + 2) % 4) * 8)) &
                            255),
                        c = 0;
                      c < 4 && s + 0.75 * c < n;
                      c++
                    )
                      i.push(a.charAt((o >>> (6 * (3 - c))) & 63));
                  var d = a.charAt(64);
                  if (d) for (; i.length % 4; ) i.push(d);
                  return i.join("");
                },
                parse: function (e, t = !0) {
                  var n = e.length,
                    a = t ? this._safe_map : this._map,
                    i = this._reverseMap;
                  if (!i) {
                    i = this._reverseMap = [];
                    for (var s = 0; s < a.length; s++) i[a.charCodeAt(s)] = s;
                  }
                  var o = a.charAt(64);
                  if (o) {
                    var c = e.indexOf(o);
                    -1 !== c && (n = c);
                  }
                  return r(e, n, i);
                },
                _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
                _safe_map:
                  "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
              };
            })(),
            n.enc.Base64url);
        },
        298: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              var e = n,
                t = e.lib.WordArray,
                r = e.enc;
              function a(e) {
                return ((e << 8) & 4278255360) | ((e >>> 8) & 16711935);
              }
              (r.Utf16 = r.Utf16BE =
                {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, n = [], a = 0;
                      a < r;
                      a += 2
                    ) {
                      var i = (t[a >>> 2] >>> (16 - (a % 4) * 8)) & 65535;
                      n.push(String.fromCharCode(i));
                    }
                    return n.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, n = [], a = 0; a < r; a++)
                      n[a >>> 1] |= e.charCodeAt(a) << (16 - (a % 2) * 16);
                    return t.create(n, 2 * r);
                  },
                }),
                (r.Utf16LE = {
                  stringify: function (e) {
                    for (
                      var t = e.words, r = e.sigBytes, n = [], i = 0;
                      i < r;
                      i += 2
                    ) {
                      var s = a((t[i >>> 2] >>> (16 - (i % 4) * 8)) & 65535);
                      n.push(String.fromCharCode(s));
                    }
                    return n.join("");
                  },
                  parse: function (e) {
                    for (var r = e.length, n = [], i = 0; i < r; i++)
                      n[i >>> 1] |= a(e.charCodeAt(i) << (16 - (i % 2) * 16));
                    return t.create(n, 2 * r);
                  },
                });
            })(),
            n.enc.Utf16);
        },
        888: function (e, t, r) {
          var n, a, i, s, o, c, d, u;
          e.exports =
            ((u = r(8249)),
            r(2783),
            r(9824),
            (a = (n = u).lib),
            (i = a.Base),
            (s = a.WordArray),
            (o = n.algo),
            (c = o.MD5),
            (d = o.EvpKDF =
              i.extend({
                cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r,
                      n = this.cfg,
                      a = n.hasher.create(),
                      i = s.create(),
                      o = i.words,
                      c = n.keySize,
                      d = n.iterations;
                    o.length < c;

                  ) {
                    r && a.update(r), (r = a.update(e).finalize(t)), a.reset();
                    for (var u = 1; u < d; u++) (r = a.finalize(r)), a.reset();
                    i.concat(r);
                  }
                  return (i.sigBytes = 4 * c), i;
                },
              })),
            (n.EvpKDF = function (e, t, r) {
              return d.create(r).compute(e, t);
            }),
            u.EvpKDF);
        },
        2209: function (e, t, r) {
          var n, a, i, s;
          e.exports =
            ((s = r(8249)),
            r(5109),
            (a = (n = s).lib.CipherParams),
            (i = n.enc.Hex),
            (n.format.Hex = {
              stringify: function (e) {
                return e.ciphertext.toString(i);
              },
              parse: function (e) {
                var t = i.parse(e);
                return a.create({ ciphertext: t });
              },
            }),
            s.format.Hex);
        },
        9824: function (e, t, r) {
          var n, a, i, s;
          e.exports =
            ((n = r(8249)),
            (i = (a = n).lib.Base),
            (s = a.enc.Utf8),
            void (a.algo.HMAC = i.extend({
              init: function (e, t) {
                (e = this._hasher = new e.init()),
                  "string" == typeof t && (t = s.parse(t));
                var r = e.blockSize,
                  n = 4 * r;
                t.sigBytes > n && (t = e.finalize(t)), t.clamp();
                for (
                  var a = (this._oKey = t.clone()),
                    i = (this._iKey = t.clone()),
                    o = a.words,
                    c = i.words,
                    d = 0;
                  d < r;
                  d++
                )
                  (o[d] ^= 1549556828), (c[d] ^= 909522486);
                (a.sigBytes = i.sigBytes = n), this.reset();
              },
              reset: function () {
                var e = this._hasher;
                e.reset(), e.update(this._iKey);
              },
              update: function (e) {
                return this._hasher.update(e), this;
              },
              finalize: function (e) {
                var t = this._hasher,
                  r = t.finalize(e);
                return t.reset(), t.finalize(this._oKey.clone().concat(r));
              },
            })));
        },
        1354: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(4938),
            r(4433),
            r(298),
            r(8269),
            r(3786),
            r(8214),
            r(2783),
            r(2153),
            r(7792),
            r(34),
            r(7460),
            r(3327),
            r(706),
            r(9824),
            r(2112),
            r(888),
            r(5109),
            r(8568),
            r(4242),
            r(9968),
            r(7660),
            r(1148),
            r(3615),
            r(2807),
            r(1077),
            r(6475),
            r(6991),
            r(2209),
            r(452),
            r(4253),
            r(1857),
            r(4454),
            r(3974),
            n);
        },
        4433: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function () {
              if ("function" == typeof ArrayBuffer) {
                var e = n.lib.WordArray,
                  t = e.init,
                  r = (e.init = function (e) {
                    if (
                      (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                      (e instanceof Int8Array ||
                        ("undefined" != typeof Uint8ClampedArray &&
                          e instanceof Uint8ClampedArray) ||
                        e instanceof Int16Array ||
                        e instanceof Uint16Array ||
                        e instanceof Int32Array ||
                        e instanceof Uint32Array ||
                        e instanceof Float32Array ||
                        e instanceof Float64Array) &&
                        (e = new Uint8Array(
                          e.buffer,
                          e.byteOffset,
                          e.byteLength
                        )),
                      e instanceof Uint8Array)
                    ) {
                      for (var r = e.byteLength, n = [], a = 0; a < r; a++)
                        n[a >>> 2] |= e[a] << (24 - (a % 4) * 8);
                      t.call(this, n, r);
                    } else t.apply(this, arguments);
                  });
                r.prototype = e;
              }
            })(),
            n.lib.WordArray);
        },
        8214: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.algo,
                o = [];
              !(function () {
                for (var t = 0; t < 64; t++)
                  o[t] = (4294967296 * e.abs(e.sin(t + 1))) | 0;
              })();
              var c = (s.MD5 = i.extend({
                _doReset: function () {
                  this._hash = new a.init([
                    1732584193, 4023233417, 2562383102, 271733878,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (var r = 0; r < 16; r++) {
                    var n = t + r,
                      a = e[n];
                    e[n] =
                      (16711935 & ((a << 8) | (a >>> 24))) |
                      (4278255360 & ((a << 24) | (a >>> 8)));
                  }
                  var i = this._hash.words,
                    s = e[t + 0],
                    c = e[t + 1],
                    h = e[t + 2],
                    _ = e[t + 3],
                    f = e[t + 4],
                    m = e[t + 5],
                    v = e[t + 6],
                    g = e[t + 7],
                    y = e[t + 8],
                    b = e[t + 9],
                    x = e[t + 10],
                    E = e[t + 11],
                    T = e[t + 12],
                    S = e[t + 13],
                    w = e[t + 14],
                    R = e[t + 15],
                    P = i[0],
                    O = i[1],
                    k = i[2],
                    C = i[3];
                  (P = d(P, O, k, C, s, 7, o[0])),
                    (C = d(C, P, O, k, c, 12, o[1])),
                    (k = d(k, C, P, O, h, 17, o[2])),
                    (O = d(O, k, C, P, _, 22, o[3])),
                    (P = d(P, O, k, C, f, 7, o[4])),
                    (C = d(C, P, O, k, m, 12, o[5])),
                    (k = d(k, C, P, O, v, 17, o[6])),
                    (O = d(O, k, C, P, g, 22, o[7])),
                    (P = d(P, O, k, C, y, 7, o[8])),
                    (C = d(C, P, O, k, b, 12, o[9])),
                    (k = d(k, C, P, O, x, 17, o[10])),
                    (O = d(O, k, C, P, E, 22, o[11])),
                    (P = d(P, O, k, C, T, 7, o[12])),
                    (C = d(C, P, O, k, S, 12, o[13])),
                    (k = d(k, C, P, O, w, 17, o[14])),
                    (P = u(
                      P,
                      (O = d(O, k, C, P, R, 22, o[15])),
                      k,
                      C,
                      c,
                      5,
                      o[16]
                    )),
                    (C = u(C, P, O, k, v, 9, o[17])),
                    (k = u(k, C, P, O, E, 14, o[18])),
                    (O = u(O, k, C, P, s, 20, o[19])),
                    (P = u(P, O, k, C, m, 5, o[20])),
                    (C = u(C, P, O, k, x, 9, o[21])),
                    (k = u(k, C, P, O, R, 14, o[22])),
                    (O = u(O, k, C, P, f, 20, o[23])),
                    (P = u(P, O, k, C, b, 5, o[24])),
                    (C = u(C, P, O, k, w, 9, o[25])),
                    (k = u(k, C, P, O, _, 14, o[26])),
                    (O = u(O, k, C, P, y, 20, o[27])),
                    (P = u(P, O, k, C, S, 5, o[28])),
                    (C = u(C, P, O, k, h, 9, o[29])),
                    (k = u(k, C, P, O, g, 14, o[30])),
                    (P = l(
                      P,
                      (O = u(O, k, C, P, T, 20, o[31])),
                      k,
                      C,
                      m,
                      4,
                      o[32]
                    )),
                    (C = l(C, P, O, k, y, 11, o[33])),
                    (k = l(k, C, P, O, E, 16, o[34])),
                    (O = l(O, k, C, P, w, 23, o[35])),
                    (P = l(P, O, k, C, c, 4, o[36])),
                    (C = l(C, P, O, k, f, 11, o[37])),
                    (k = l(k, C, P, O, g, 16, o[38])),
                    (O = l(O, k, C, P, x, 23, o[39])),
                    (P = l(P, O, k, C, S, 4, o[40])),
                    (C = l(C, P, O, k, s, 11, o[41])),
                    (k = l(k, C, P, O, _, 16, o[42])),
                    (O = l(O, k, C, P, v, 23, o[43])),
                    (P = l(P, O, k, C, b, 4, o[44])),
                    (C = l(C, P, O, k, T, 11, o[45])),
                    (k = l(k, C, P, O, R, 16, o[46])),
                    (P = p(
                      P,
                      (O = l(O, k, C, P, h, 23, o[47])),
                      k,
                      C,
                      s,
                      6,
                      o[48]
                    )),
                    (C = p(C, P, O, k, g, 10, o[49])),
                    (k = p(k, C, P, O, w, 15, o[50])),
                    (O = p(O, k, C, P, m, 21, o[51])),
                    (P = p(P, O, k, C, T, 6, o[52])),
                    (C = p(C, P, O, k, _, 10, o[53])),
                    (k = p(k, C, P, O, x, 15, o[54])),
                    (O = p(O, k, C, P, c, 21, o[55])),
                    (P = p(P, O, k, C, y, 6, o[56])),
                    (C = p(C, P, O, k, R, 10, o[57])),
                    (k = p(k, C, P, O, v, 15, o[58])),
                    (O = p(O, k, C, P, S, 21, o[59])),
                    (P = p(P, O, k, C, f, 6, o[60])),
                    (C = p(C, P, O, k, E, 10, o[61])),
                    (k = p(k, C, P, O, h, 15, o[62])),
                    (O = p(O, k, C, P, b, 21, o[63])),
                    (i[0] = (i[0] + P) | 0),
                    (i[1] = (i[1] + O) | 0),
                    (i[2] = (i[2] + k) | 0),
                    (i[3] = (i[3] + C) | 0);
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    n = 8 * this._nDataBytes,
                    a = 8 * t.sigBytes;
                  r[a >>> 5] |= 128 << (24 - (a % 32));
                  var i = e.floor(n / 4294967296),
                    s = n;
                  (r[15 + (((a + 64) >>> 9) << 4)] =
                    (16711935 & ((i << 8) | (i >>> 24))) |
                    (4278255360 & ((i << 24) | (i >>> 8)))),
                    (r[14 + (((a + 64) >>> 9) << 4)] =
                      (16711935 & ((s << 8) | (s >>> 24))) |
                      (4278255360 & ((s << 24) | (s >>> 8)))),
                    (t.sigBytes = 4 * (r.length + 1)),
                    this._process();
                  for (var o = this._hash, c = o.words, d = 0; d < 4; d++) {
                    var u = c[d];
                    c[d] =
                      (16711935 & ((u << 8) | (u >>> 24))) |
                      (4278255360 & ((u << 24) | (u >>> 8)));
                  }
                  return o;
                },
                clone: function () {
                  var e = i.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
              function d(e, t, r, n, a, i, s) {
                var o = e + ((t & r) | (~t & n)) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function u(e, t, r, n, a, i, s) {
                var o = e + ((t & n) | (r & ~n)) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function l(e, t, r, n, a, i, s) {
                var o = e + (t ^ r ^ n) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              function p(e, t, r, n, a, i, s) {
                var o = e + (r ^ (t | ~n)) + a + s;
                return ((o << i) | (o >>> (32 - i))) + t;
              }
              (t.MD5 = i._createHelper(c)),
                (t.HmacMD5 = i._createHmacHelper(c));
            })(Math),
            n.MD5);
        },
        8568: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.mode.CFB = (function () {
              var e = n.lib.BlockCipherMode.extend();
              function t(e, t, r, n) {
                var a,
                  i = this._iv;
                i
                  ? ((a = i.slice(0)), (this._iv = void 0))
                  : (a = this._prevBlock),
                  n.encryptBlock(a, 0);
                for (var s = 0; s < r; s++) e[t + s] ^= a[s];
              }
              return (
                (e.Encryptor = e.extend({
                  processBlock: function (e, r) {
                    var n = this._cipher,
                      a = n.blockSize;
                    t.call(this, e, r, a, n),
                      (this._prevBlock = e.slice(r, r + a));
                  },
                })),
                (e.Decryptor = e.extend({
                  processBlock: function (e, r) {
                    var n = this._cipher,
                      a = n.blockSize,
                      i = e.slice(r, r + a);
                    t.call(this, e, r, a, n), (this._prevBlock = i);
                  },
                })),
                e
              );
            })()),
            n.mode.CFB);
        },
        9968: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.mode.CTRGladman = (function () {
              var e = n.lib.BlockCipherMode.extend();
              function t(e) {
                if (255 == ((e >> 24) & 255)) {
                  var t = (e >> 16) & 255,
                    r = (e >> 8) & 255,
                    n = 255 & e;
                  255 === t
                    ? ((t = 0),
                      255 === r ? ((r = 0), 255 === n ? (n = 0) : ++n) : ++r)
                    : ++t,
                    (e = 0),
                    (e += t << 16),
                    (e += r << 8),
                    (e += n);
                } else e += 1 << 24;
                return e;
              }
              function r(e) {
                return 0 === (e[0] = t(e[0])) && (e[1] = t(e[1])), e;
              }
              var a = (e.Encryptor = e.extend({
                processBlock: function (e, t) {
                  var n = this._cipher,
                    a = n.blockSize,
                    i = this._iv,
                    s = this._counter;
                  i && ((s = this._counter = i.slice(0)), (this._iv = void 0)),
                    r(s);
                  var o = s.slice(0);
                  n.encryptBlock(o, 0);
                  for (var c = 0; c < a; c++) e[t + c] ^= o[c];
                },
              }));
              return (e.Decryptor = a), e;
            })()),
            n.mode.CTRGladman);
        },
        4242: function (e, t, r) {
          var n, a, i;
          e.exports =
            ((i = r(8249)),
            r(5109),
            (i.mode.CTR =
              ((n = i.lib.BlockCipherMode.extend()),
              (a = n.Encryptor =
                n.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      n = r.blockSize,
                      a = this._iv,
                      i = this._counter;
                    a &&
                      ((i = this._counter = a.slice(0)), (this._iv = void 0));
                    var s = i.slice(0);
                    r.encryptBlock(s, 0), (i[n - 1] = (i[n - 1] + 1) | 0);
                    for (var o = 0; o < n; o++) e[t + o] ^= s[o];
                  },
                })),
              (n.Decryptor = a),
              n)),
            i.mode.CTR);
        },
        1148: function (e, t, r) {
          var n, a;
          e.exports =
            ((a = r(8249)),
            r(5109),
            (a.mode.ECB =
              (((n = a.lib.BlockCipherMode.extend()).Encryptor = n.extend({
                processBlock: function (e, t) {
                  this._cipher.encryptBlock(e, t);
                },
              })),
              (n.Decryptor = n.extend({
                processBlock: function (e, t) {
                  this._cipher.decryptBlock(e, t);
                },
              })),
              n)),
            a.mode.ECB);
        },
        7660: function (e, t, r) {
          var n, a, i;
          e.exports =
            ((i = r(8249)),
            r(5109),
            (i.mode.OFB =
              ((n = i.lib.BlockCipherMode.extend()),
              (a = n.Encryptor =
                n.extend({
                  processBlock: function (e, t) {
                    var r = this._cipher,
                      n = r.blockSize,
                      a = this._iv,
                      i = this._keystream;
                    a &&
                      ((i = this._keystream = a.slice(0)), (this._iv = void 0)),
                      r.encryptBlock(i, 0);
                    for (var s = 0; s < n; s++) e[t + s] ^= i[s];
                  },
                })),
              (n.Decryptor = a),
              n)),
            i.mode.OFB);
        },
        3615: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.AnsiX923 = {
              pad: function (e, t) {
                var r = e.sigBytes,
                  n = 4 * t,
                  a = n - (r % n),
                  i = r + a - 1;
                e.clamp(),
                  (e.words[i >>> 2] |= a << (24 - (i % 4) * 8)),
                  (e.sigBytes += a);
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            n.pad.Ansix923);
        },
        2807: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.Iso10126 = {
              pad: function (e, t) {
                var r = 4 * t,
                  a = r - (e.sigBytes % r);
                e.concat(n.lib.WordArray.random(a - 1)).concat(
                  n.lib.WordArray.create([a << 24], 1)
                );
              },
              unpad: function (e) {
                var t = 255 & e.words[(e.sigBytes - 1) >>> 2];
                e.sigBytes -= t;
              },
            }),
            n.pad.Iso10126);
        },
        1077: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.Iso97971 = {
              pad: function (e, t) {
                e.concat(n.lib.WordArray.create([2147483648], 1)),
                  n.pad.ZeroPadding.pad(e, t);
              },
              unpad: function (e) {
                n.pad.ZeroPadding.unpad(e), e.sigBytes--;
              },
            }),
            n.pad.Iso97971);
        },
        6991: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.NoPadding = { pad: function () {}, unpad: function () {} }),
            n.pad.NoPadding);
        },
        6475: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(5109),
            (n.pad.ZeroPadding = {
              pad: function (e, t) {
                var r = 4 * t;
                e.clamp(), (e.sigBytes += r - (e.sigBytes % r || r));
              },
              unpad: function (e) {
                var t = e.words,
                  r = e.sigBytes - 1;
                for (r = e.sigBytes - 1; r >= 0; r--)
                  if ((t[r >>> 2] >>> (24 - (r % 4) * 8)) & 255) {
                    e.sigBytes = r + 1;
                    break;
                  }
              },
            }),
            n.pad.ZeroPadding);
        },
        2112: function (e, t, r) {
          var n, a, i, s, o, c, d, u, l;
          e.exports =
            ((l = r(8249)),
            r(2783),
            r(9824),
            (a = (n = l).lib),
            (i = a.Base),
            (s = a.WordArray),
            (o = n.algo),
            (c = o.SHA1),
            (d = o.HMAC),
            (u = o.PBKDF2 =
              i.extend({
                cfg: i.extend({ keySize: 4, hasher: c, iterations: 1 }),
                init: function (e) {
                  this.cfg = this.cfg.extend(e);
                },
                compute: function (e, t) {
                  for (
                    var r = this.cfg,
                      n = d.create(r.hasher, e),
                      a = s.create(),
                      i = s.create([1]),
                      o = a.words,
                      c = i.words,
                      u = r.keySize,
                      l = r.iterations;
                    o.length < u;

                  ) {
                    var p = n.update(t).finalize(i);
                    n.reset();
                    for (
                      var h = p.words, _ = h.length, f = p, m = 1;
                      m < l;
                      m++
                    ) {
                      (f = n.finalize(f)), n.reset();
                      for (var v = f.words, g = 0; g < _; g++) h[g] ^= v[g];
                    }
                    a.concat(p), c[0]++;
                  }
                  return (a.sigBytes = 4 * u), a;
                },
              })),
            (n.PBKDF2 = function (e, t, r) {
              return u.create(r).compute(e, t);
            }),
            l.PBKDF2);
        },
        3974: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                a = [],
                i = [],
                s = [],
                o = (r.RabbitLegacy = t.extend({
                  _doReset: function () {
                    var e = this._key.words,
                      t = this.cfg.iv,
                      r = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      n = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    this._b = 0;
                    for (var a = 0; a < 4; a++) c.call(this);
                    for (a = 0; a < 8; a++) n[a] ^= r[(a + 4) & 7];
                    if (t) {
                      var i = t.words,
                        s = i[0],
                        o = i[1],
                        d =
                          (16711935 & ((s << 8) | (s >>> 24))) |
                          (4278255360 & ((s << 24) | (s >>> 8))),
                        u =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        l = (d >>> 16) | (4294901760 & u),
                        p = (u << 16) | (65535 & d);
                      for (
                        n[0] ^= d,
                          n[1] ^= l,
                          n[2] ^= u,
                          n[3] ^= p,
                          n[4] ^= d,
                          n[5] ^= l,
                          n[6] ^= u,
                          n[7] ^= p,
                          a = 0;
                        a < 4;
                        a++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (a[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (a[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (a[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (a[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var n = 0; n < 4; n++)
                      (a[n] =
                        (16711935 & ((a[n] << 8) | (a[n] >>> 24))) |
                        (4278255360 & ((a[n] << 24) | (a[n] >>> 8)))),
                        (e[t + n] ^= a[n]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  i[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < i[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < i[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < i[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < i[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < i[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < i[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < i[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < i[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var n = e[r] + t[r],
                    a = 65535 & n,
                    o = n >>> 16,
                    c = ((((a * a) >>> 17) + a * o) >>> 15) + o * o,
                    d = (((4294901760 & n) * n) | 0) + (((65535 & n) * n) | 0);
                  s[r] = c ^ d;
                }
                (e[0] =
                  (s[0] +
                    ((s[7] << 16) | (s[7] >>> 16)) +
                    ((s[6] << 16) | (s[6] >>> 16))) |
                  0),
                  (e[1] = (s[1] + ((s[0] << 8) | (s[0] >>> 24)) + s[7]) | 0),
                  (e[2] =
                    (s[2] +
                      ((s[1] << 16) | (s[1] >>> 16)) +
                      ((s[0] << 16) | (s[0] >>> 16))) |
                    0),
                  (e[3] = (s[3] + ((s[2] << 8) | (s[2] >>> 24)) + s[1]) | 0),
                  (e[4] =
                    (s[4] +
                      ((s[3] << 16) | (s[3] >>> 16)) +
                      ((s[2] << 16) | (s[2] >>> 16))) |
                    0),
                  (e[5] = (s[5] + ((s[4] << 8) | (s[4] >>> 24)) + s[3]) | 0),
                  (e[6] =
                    (s[6] +
                      ((s[5] << 16) | (s[5] >>> 16)) +
                      ((s[4] << 16) | (s[4] >>> 16))) |
                    0),
                  (e[7] = (s[7] + ((s[6] << 8) | (s[6] >>> 24)) + s[5]) | 0);
              }
              e.RabbitLegacy = t._createHelper(o);
            })(),
            n.RabbitLegacy);
        },
        4454: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                a = [],
                i = [],
                s = [],
                o = (r.Rabbit = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key.words, t = this.cfg.iv, r = 0;
                      r < 4;
                      r++
                    )
                      e[r] =
                        (16711935 & ((e[r] << 8) | (e[r] >>> 24))) |
                        (4278255360 & ((e[r] << 24) | (e[r] >>> 8)));
                    var n = (this._X = [
                        e[0],
                        (e[3] << 16) | (e[2] >>> 16),
                        e[1],
                        (e[0] << 16) | (e[3] >>> 16),
                        e[2],
                        (e[1] << 16) | (e[0] >>> 16),
                        e[3],
                        (e[2] << 16) | (e[1] >>> 16),
                      ]),
                      a = (this._C = [
                        (e[2] << 16) | (e[2] >>> 16),
                        (4294901760 & e[0]) | (65535 & e[1]),
                        (e[3] << 16) | (e[3] >>> 16),
                        (4294901760 & e[1]) | (65535 & e[2]),
                        (e[0] << 16) | (e[0] >>> 16),
                        (4294901760 & e[2]) | (65535 & e[3]),
                        (e[1] << 16) | (e[1] >>> 16),
                        (4294901760 & e[3]) | (65535 & e[0]),
                      ]);
                    for (this._b = 0, r = 0; r < 4; r++) c.call(this);
                    for (r = 0; r < 8; r++) a[r] ^= n[(r + 4) & 7];
                    if (t) {
                      var i = t.words,
                        s = i[0],
                        o = i[1],
                        d =
                          (16711935 & ((s << 8) | (s >>> 24))) |
                          (4278255360 & ((s << 24) | (s >>> 8))),
                        u =
                          (16711935 & ((o << 8) | (o >>> 24))) |
                          (4278255360 & ((o << 24) | (o >>> 8))),
                        l = (d >>> 16) | (4294901760 & u),
                        p = (u << 16) | (65535 & d);
                      for (
                        a[0] ^= d,
                          a[1] ^= l,
                          a[2] ^= u,
                          a[3] ^= p,
                          a[4] ^= d,
                          a[5] ^= l,
                          a[6] ^= u,
                          a[7] ^= p,
                          r = 0;
                        r < 4;
                        r++
                      )
                        c.call(this);
                    }
                  },
                  _doProcessBlock: function (e, t) {
                    var r = this._X;
                    c.call(this),
                      (a[0] = r[0] ^ (r[5] >>> 16) ^ (r[3] << 16)),
                      (a[1] = r[2] ^ (r[7] >>> 16) ^ (r[5] << 16)),
                      (a[2] = r[4] ^ (r[1] >>> 16) ^ (r[7] << 16)),
                      (a[3] = r[6] ^ (r[3] >>> 16) ^ (r[1] << 16));
                    for (var n = 0; n < 4; n++)
                      (a[n] =
                        (16711935 & ((a[n] << 8) | (a[n] >>> 24))) |
                        (4278255360 & ((a[n] << 24) | (a[n] >>> 8)))),
                        (e[t + n] ^= a[n]);
                  },
                  blockSize: 4,
                  ivSize: 2,
                }));
              function c() {
                for (var e = this._X, t = this._C, r = 0; r < 8; r++)
                  i[r] = t[r];
                for (
                  t[0] = (t[0] + 1295307597 + this._b) | 0,
                    t[1] =
                      (t[1] + 3545052371 + (t[0] >>> 0 < i[0] >>> 0 ? 1 : 0)) |
                      0,
                    t[2] =
                      (t[2] + 886263092 + (t[1] >>> 0 < i[1] >>> 0 ? 1 : 0)) |
                      0,
                    t[3] =
                      (t[3] + 1295307597 + (t[2] >>> 0 < i[2] >>> 0 ? 1 : 0)) |
                      0,
                    t[4] =
                      (t[4] + 3545052371 + (t[3] >>> 0 < i[3] >>> 0 ? 1 : 0)) |
                      0,
                    t[5] =
                      (t[5] + 886263092 + (t[4] >>> 0 < i[4] >>> 0 ? 1 : 0)) |
                      0,
                    t[6] =
                      (t[6] + 1295307597 + (t[5] >>> 0 < i[5] >>> 0 ? 1 : 0)) |
                      0,
                    t[7] =
                      (t[7] + 3545052371 + (t[6] >>> 0 < i[6] >>> 0 ? 1 : 0)) |
                      0,
                    this._b = t[7] >>> 0 < i[7] >>> 0 ? 1 : 0,
                    r = 0;
                  r < 8;
                  r++
                ) {
                  var n = e[r] + t[r],
                    a = 65535 & n,
                    o = n >>> 16,
                    c = ((((a * a) >>> 17) + a * o) >>> 15) + o * o,
                    d = (((4294901760 & n) * n) | 0) + (((65535 & n) * n) | 0);
                  s[r] = c ^ d;
                }
                (e[0] =
                  (s[0] +
                    ((s[7] << 16) | (s[7] >>> 16)) +
                    ((s[6] << 16) | (s[6] >>> 16))) |
                  0),
                  (e[1] = (s[1] + ((s[0] << 8) | (s[0] >>> 24)) + s[7]) | 0),
                  (e[2] =
                    (s[2] +
                      ((s[1] << 16) | (s[1] >>> 16)) +
                      ((s[0] << 16) | (s[0] >>> 16))) |
                    0),
                  (e[3] = (s[3] + ((s[2] << 8) | (s[2] >>> 24)) + s[1]) | 0),
                  (e[4] =
                    (s[4] +
                      ((s[3] << 16) | (s[3] >>> 16)) +
                      ((s[2] << 16) | (s[2] >>> 16))) |
                    0),
                  (e[5] = (s[5] + ((s[4] << 8) | (s[4] >>> 24)) + s[3]) | 0),
                  (e[6] =
                    (s[6] +
                      ((s[5] << 16) | (s[5] >>> 16)) +
                      ((s[4] << 16) | (s[4] >>> 16))) |
                    0),
                  (e[7] = (s[7] + ((s[6] << 8) | (s[6] >>> 24)) + s[5]) | 0);
              }
              e.Rabbit = t._createHelper(o);
            })(),
            n.Rabbit);
        },
        1857: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib.StreamCipher,
                r = e.algo,
                a = (r.RC4 = t.extend({
                  _doReset: function () {
                    for (
                      var e = this._key,
                        t = e.words,
                        r = e.sigBytes,
                        n = (this._S = []),
                        a = 0;
                      a < 256;
                      a++
                    )
                      n[a] = a;
                    a = 0;
                    for (var i = 0; a < 256; a++) {
                      var s = a % r,
                        o = (t[s >>> 2] >>> (24 - (s % 4) * 8)) & 255;
                      i = (i + n[a] + o) % 256;
                      var c = n[a];
                      (n[a] = n[i]), (n[i] = c);
                    }
                    this._i = this._j = 0;
                  },
                  _doProcessBlock: function (e, t) {
                    e[t] ^= i.call(this);
                  },
                  keySize: 8,
                  ivSize: 0,
                }));
              function i() {
                for (
                  var e = this._S, t = this._i, r = this._j, n = 0, a = 0;
                  a < 4;
                  a++
                ) {
                  r = (r + e[(t = (t + 1) % 256)]) % 256;
                  var i = e[t];
                  (e[t] = e[r]),
                    (e[r] = i),
                    (n |= e[(e[t] + e[r]) % 256] << (24 - 8 * a));
                }
                return (this._i = t), (this._j = r), n;
              }
              e.RC4 = t._createHelper(a);
              var s = (r.RC4Drop = a.extend({
                cfg: a.cfg.extend({ drop: 192 }),
                _doReset: function () {
                  a._doReset.call(this);
                  for (var e = this.cfg.drop; e > 0; e--) i.call(this);
                },
              }));
              e.RC4Drop = t._createHelper(s);
            })(),
            n.RC4);
        },
        706: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.algo,
                o = a.create([
                  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4,
                  13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4,
                  9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8,
                  12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10,
                  14, 1, 3, 8, 11, 6, 15, 13,
                ]),
                c = a.create([
                  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11,
                  3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7,
                  14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15,
                  0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6,
                  2, 13, 14, 0, 3, 9, 11,
                ]),
                d = a.create([
                  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6,
                  8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6,
                  7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15,
                  14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8,
                  13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
                ]),
                u = a.create([
                  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13,
                  15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11,
                  8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14,
                  14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14,
                  6, 8, 13, 6, 5, 15, 13, 11, 11,
                ]),
                l = a.create([
                  0, 1518500249, 1859775393, 2400959708, 2840853838,
                ]),
                p = a.create([
                  1352829926, 1548603684, 1836072691, 2053994217, 0,
                ]),
                h = (s.RIPEMD160 = i.extend({
                  _doReset: function () {
                    this._hash = a.create([
                      1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                    ]);
                  },
                  _doProcessBlock: function (e, t) {
                    for (var r = 0; r < 16; r++) {
                      var n = t + r,
                        a = e[n];
                      e[n] =
                        (16711935 & ((a << 8) | (a >>> 24))) |
                        (4278255360 & ((a << 24) | (a >>> 8)));
                    }
                    var i,
                      s,
                      h,
                      b,
                      x,
                      E,
                      T,
                      S,
                      w,
                      R,
                      P,
                      O = this._hash.words,
                      k = l.words,
                      C = p.words,
                      I = o.words,
                      L = c.words,
                      D = d.words,
                      A = u.words;
                    for (
                      E = i = O[0],
                        T = s = O[1],
                        S = h = O[2],
                        w = b = O[3],
                        R = x = O[4],
                        r = 0;
                      r < 80;
                      r += 1
                    )
                      (P = (i + e[t + I[r]]) | 0),
                        (P +=
                          r < 16
                            ? _(s, h, b) + k[0]
                            : r < 32
                            ? f(s, h, b) + k[1]
                            : r < 48
                            ? m(s, h, b) + k[2]
                            : r < 64
                            ? v(s, h, b) + k[3]
                            : g(s, h, b) + k[4]),
                        (P = ((P = y((P |= 0), D[r])) + x) | 0),
                        (i = x),
                        (x = b),
                        (b = y(h, 10)),
                        (h = s),
                        (s = P),
                        (P = (E + e[t + L[r]]) | 0),
                        (P +=
                          r < 16
                            ? g(T, S, w) + C[0]
                            : r < 32
                            ? v(T, S, w) + C[1]
                            : r < 48
                            ? m(T, S, w) + C[2]
                            : r < 64
                            ? f(T, S, w) + C[3]
                            : _(T, S, w) + C[4]),
                        (P = ((P = y((P |= 0), A[r])) + R) | 0),
                        (E = R),
                        (R = w),
                        (w = y(S, 10)),
                        (S = T),
                        (T = P);
                    (P = (O[1] + h + w) | 0),
                      (O[1] = (O[2] + b + R) | 0),
                      (O[2] = (O[3] + x + E) | 0),
                      (O[3] = (O[4] + i + T) | 0),
                      (O[4] = (O[0] + s + S) | 0),
                      (O[0] = P);
                  },
                  _doFinalize: function () {
                    var e = this._data,
                      t = e.words,
                      r = 8 * this._nDataBytes,
                      n = 8 * e.sigBytes;
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                      (t[14 + (((n + 64) >>> 9) << 4)] =
                        (16711935 & ((r << 8) | (r >>> 24))) |
                        (4278255360 & ((r << 24) | (r >>> 8)))),
                      (e.sigBytes = 4 * (t.length + 1)),
                      this._process();
                    for (var a = this._hash, i = a.words, s = 0; s < 5; s++) {
                      var o = i[s];
                      i[s] =
                        (16711935 & ((o << 8) | (o >>> 24))) |
                        (4278255360 & ((o << 24) | (o >>> 8)));
                    }
                    return a;
                  },
                  clone: function () {
                    var e = i.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              function _(e, t, r) {
                return e ^ t ^ r;
              }
              function f(e, t, r) {
                return (e & t) | (~e & r);
              }
              function m(e, t, r) {
                return (e | ~t) ^ r;
              }
              function v(e, t, r) {
                return (e & r) | (t & ~r);
              }
              function g(e, t, r) {
                return e ^ (t | ~r);
              }
              function y(e, t) {
                return (e << t) | (e >>> (32 - t));
              }
              (t.RIPEMD160 = i._createHelper(h)),
                (t.HmacRIPEMD160 = i._createHmacHelper(h));
            })(Math),
            n.RIPEMD160);
        },
        2783: function (e, t, r) {
          var n, a, i, s, o, c, d, u;
          e.exports =
            ((u = r(8249)),
            (a = (n = u).lib),
            (i = a.WordArray),
            (s = a.Hasher),
            (o = n.algo),
            (c = []),
            (d = o.SHA1 =
              s.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    1732584193, 4023233417, 2562383102, 271733878, 3285377520,
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      n = r[0],
                      a = r[1],
                      i = r[2],
                      s = r[3],
                      o = r[4],
                      d = 0;
                    d < 80;
                    d++
                  ) {
                    if (d < 16) c[d] = 0 | e[t + d];
                    else {
                      var u = c[d - 3] ^ c[d - 8] ^ c[d - 14] ^ c[d - 16];
                      c[d] = (u << 1) | (u >>> 31);
                    }
                    var l = ((n << 5) | (n >>> 27)) + o + c[d];
                    (l +=
                      d < 20
                        ? 1518500249 + ((a & i) | (~a & s))
                        : d < 40
                        ? 1859775393 + (a ^ i ^ s)
                        : d < 60
                        ? ((a & i) | (a & s) | (i & s)) - 1894007588
                        : (a ^ i ^ s) - 899497514),
                      (o = s),
                      (s = i),
                      (i = (a << 30) | (a >>> 2)),
                      (a = n),
                      (n = l);
                  }
                  (r[0] = (r[0] + n) | 0),
                    (r[1] = (r[1] + a) | 0),
                    (r[2] = (r[2] + i) | 0),
                    (r[3] = (r[3] + s) | 0),
                    (r[4] = (r[4] + o) | 0);
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    n = 8 * e.sigBytes;
                  return (
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                    (t[14 + (((n + 64) >>> 9) << 4)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[15 + (((n + 64) >>> 9) << 4)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash
                  );
                },
                clone: function () {
                  var e = s.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              })),
            (n.SHA1 = s._createHelper(d)),
            (n.HmacSHA1 = s._createHmacHelper(d)),
            u.SHA1);
        },
        7792: function (e, t, r) {
          var n, a, i, s, o, c;
          e.exports =
            ((c = r(8249)),
            r(2153),
            (a = (n = c).lib.WordArray),
            (i = n.algo),
            (s = i.SHA256),
            (o = i.SHA224 =
              s.extend({
                _doReset: function () {
                  this._hash = new a.init([
                    3238371032, 914150663, 812702999, 4144912697, 4290775857,
                    1750603025, 1694076839, 3204075428,
                  ]);
                },
                _doFinalize: function () {
                  var e = s._doFinalize.call(this);
                  return (e.sigBytes -= 4), e;
                },
              })),
            (n.SHA224 = s._createHelper(o)),
            (n.HmacSHA224 = s._createHmacHelper(o)),
            c.SHA224);
        },
        2153: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.algo,
                o = [],
                c = [];
              !(function () {
                function t(t) {
                  for (var r = e.sqrt(t), n = 2; n <= r; n++)
                    if (!(t % n)) return !1;
                  return !0;
                }
                function r(e) {
                  return (4294967296 * (e - (0 | e))) | 0;
                }
                for (var n = 2, a = 0; a < 64; )
                  t(n) &&
                    (a < 8 && (o[a] = r(e.pow(n, 0.5))),
                    (c[a] = r(e.pow(n, 1 / 3))),
                    a++),
                    n++;
              })();
              var d = [],
                u = (s.SHA256 = i.extend({
                  _doReset: function () {
                    this._hash = new a.init(o.slice(0));
                  },
                  _doProcessBlock: function (e, t) {
                    for (
                      var r = this._hash.words,
                        n = r[0],
                        a = r[1],
                        i = r[2],
                        s = r[3],
                        o = r[4],
                        u = r[5],
                        l = r[6],
                        p = r[7],
                        h = 0;
                      h < 64;
                      h++
                    ) {
                      if (h < 16) d[h] = 0 | e[t + h];
                      else {
                        var _ = d[h - 15],
                          f =
                            ((_ << 25) | (_ >>> 7)) ^
                            ((_ << 14) | (_ >>> 18)) ^
                            (_ >>> 3),
                          m = d[h - 2],
                          v =
                            ((m << 15) | (m >>> 17)) ^
                            ((m << 13) | (m >>> 19)) ^
                            (m >>> 10);
                        d[h] = f + d[h - 7] + v + d[h - 16];
                      }
                      var g = (n & a) ^ (n & i) ^ (a & i),
                        y =
                          ((n << 30) | (n >>> 2)) ^
                          ((n << 19) | (n >>> 13)) ^
                          ((n << 10) | (n >>> 22)),
                        b =
                          p +
                          (((o << 26) | (o >>> 6)) ^
                            ((o << 21) | (o >>> 11)) ^
                            ((o << 7) | (o >>> 25))) +
                          ((o & u) ^ (~o & l)) +
                          c[h] +
                          d[h];
                      (p = l),
                        (l = u),
                        (u = o),
                        (o = (s + b) | 0),
                        (s = i),
                        (i = a),
                        (a = n),
                        (n = (b + (y + g)) | 0);
                    }
                    (r[0] = (r[0] + n) | 0),
                      (r[1] = (r[1] + a) | 0),
                      (r[2] = (r[2] + i) | 0),
                      (r[3] = (r[3] + s) | 0),
                      (r[4] = (r[4] + o) | 0),
                      (r[5] = (r[5] + u) | 0),
                      (r[6] = (r[6] + l) | 0),
                      (r[7] = (r[7] + p) | 0);
                  },
                  _doFinalize: function () {
                    var t = this._data,
                      r = t.words,
                      n = 8 * this._nDataBytes,
                      a = 8 * t.sigBytes;
                    return (
                      (r[a >>> 5] |= 128 << (24 - (a % 32))),
                      (r[14 + (((a + 64) >>> 9) << 4)] = e.floor(
                        n / 4294967296
                      )),
                      (r[15 + (((a + 64) >>> 9) << 4)] = n),
                      (t.sigBytes = 4 * r.length),
                      this._process(),
                      this._hash
                    );
                  },
                  clone: function () {
                    var e = i.clone.call(this);
                    return (e._hash = this._hash.clone()), e;
                  },
                }));
              (t.SHA256 = i._createHelper(u)),
                (t.HmacSHA256 = i._createHmacHelper(u));
            })(Math),
            n.SHA256);
        },
        3327: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(4938),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.WordArray,
                i = r.Hasher,
                s = t.x64.Word,
                o = t.algo,
                c = [],
                d = [],
                u = [];
              !(function () {
                for (var e = 1, t = 0, r = 0; r < 24; r++) {
                  c[e + 5 * t] = (((r + 1) * (r + 2)) / 2) % 64;
                  var n = (2 * e + 3 * t) % 5;
                  (e = t % 5), (t = n);
                }
                for (e = 0; e < 5; e++)
                  for (t = 0; t < 5; t++)
                    d[e + 5 * t] = t + ((2 * e + 3 * t) % 5) * 5;
                for (var a = 1, i = 0; i < 24; i++) {
                  for (var o = 0, l = 0, p = 0; p < 7; p++) {
                    if (1 & a) {
                      var h = (1 << p) - 1;
                      h < 32 ? (l ^= 1 << h) : (o ^= 1 << (h - 32));
                    }
                    128 & a ? (a = (a << 1) ^ 113) : (a <<= 1);
                  }
                  u[i] = s.create(o, l);
                }
              })();
              var l = [];
              !(function () {
                for (var e = 0; e < 25; e++) l[e] = s.create();
              })();
              var p = (o.SHA3 = i.extend({
                cfg: i.cfg.extend({ outputLength: 512 }),
                _doReset: function () {
                  for (var e = (this._state = []), t = 0; t < 25; t++)
                    e[t] = new s.init();
                  this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._state, n = this.blockSize / 2, a = 0;
                    a < n;
                    a++
                  ) {
                    var i = e[t + 2 * a],
                      s = e[t + 2 * a + 1];
                    (i =
                      (16711935 & ((i << 8) | (i >>> 24))) |
                      (4278255360 & ((i << 24) | (i >>> 8)))),
                      (s =
                        (16711935 & ((s << 8) | (s >>> 24))) |
                        (4278255360 & ((s << 24) | (s >>> 8)))),
                      ((O = r[a]).high ^= s),
                      (O.low ^= i);
                  }
                  for (var o = 0; o < 24; o++) {
                    for (var p = 0; p < 5; p++) {
                      for (var h = 0, _ = 0, f = 0; f < 5; f++)
                        (h ^= (O = r[p + 5 * f]).high), (_ ^= O.low);
                      var m = l[p];
                      (m.high = h), (m.low = _);
                    }
                    for (p = 0; p < 5; p++) {
                      var v = l[(p + 4) % 5],
                        g = l[(p + 1) % 5],
                        y = g.high,
                        b = g.low;
                      for (
                        h = v.high ^ ((y << 1) | (b >>> 31)),
                          _ = v.low ^ ((b << 1) | (y >>> 31)),
                          f = 0;
                        f < 5;
                        f++
                      )
                        ((O = r[p + 5 * f]).high ^= h), (O.low ^= _);
                    }
                    for (var x = 1; x < 25; x++) {
                      var E = (O = r[x]).high,
                        T = O.low,
                        S = c[x];
                      S < 32
                        ? ((h = (E << S) | (T >>> (32 - S))),
                          (_ = (T << S) | (E >>> (32 - S))))
                        : ((h = (T << (S - 32)) | (E >>> (64 - S))),
                          (_ = (E << (S - 32)) | (T >>> (64 - S))));
                      var w = l[d[x]];
                      (w.high = h), (w.low = _);
                    }
                    var R = l[0],
                      P = r[0];
                    for (R.high = P.high, R.low = P.low, p = 0; p < 5; p++)
                      for (f = 0; f < 5; f++) {
                        var O = r[(x = p + 5 * f)],
                          k = l[x],
                          C = l[((p + 1) % 5) + 5 * f],
                          I = l[((p + 2) % 5) + 5 * f];
                        (O.high = k.high ^ (~C.high & I.high)),
                          (O.low = k.low ^ (~C.low & I.low));
                      }
                    O = r[0];
                    var L = u[o];
                    (O.high ^= L.high), (O.low ^= L.low);
                  }
                },
                _doFinalize: function () {
                  var t = this._data,
                    r = t.words,
                    n = (this._nDataBytes, 8 * t.sigBytes),
                    i = 32 * this.blockSize;
                  (r[n >>> 5] |= 1 << (24 - (n % 32))),
                    (r[((e.ceil((n + 1) / i) * i) >>> 5) - 1] |= 128),
                    (t.sigBytes = 4 * r.length),
                    this._process();
                  for (
                    var s = this._state,
                      o = this.cfg.outputLength / 8,
                      c = o / 8,
                      d = [],
                      u = 0;
                    u < c;
                    u++
                  ) {
                    var l = s[u],
                      p = l.high,
                      h = l.low;
                    (p =
                      (16711935 & ((p << 8) | (p >>> 24))) |
                      (4278255360 & ((p << 24) | (p >>> 8)))),
                      (h =
                        (16711935 & ((h << 8) | (h >>> 24))) |
                        (4278255360 & ((h << 24) | (h >>> 8)))),
                      d.push(h),
                      d.push(p);
                  }
                  return new a.init(d, o);
                },
                clone: function () {
                  for (
                    var e = i.clone.call(this),
                      t = (e._state = this._state.slice(0)),
                      r = 0;
                    r < 25;
                    r++
                  )
                    t[r] = t[r].clone();
                  return e;
                },
              }));
              (t.SHA3 = i._createHelper(p)),
                (t.HmacSHA3 = i._createHmacHelper(p));
            })(Math),
            n.SHA3);
        },
        7460: function (e, t, r) {
          var n, a, i, s, o, c, d, u;
          e.exports =
            ((u = r(8249)),
            r(4938),
            r(34),
            (a = (n = u).x64),
            (i = a.Word),
            (s = a.WordArray),
            (o = n.algo),
            (c = o.SHA512),
            (d = o.SHA384 =
              c.extend({
                _doReset: function () {
                  this._hash = new s.init([
                    new i.init(3418070365, 3238371032),
                    new i.init(1654270250, 914150663),
                    new i.init(2438529370, 812702999),
                    new i.init(355462360, 4144912697),
                    new i.init(1731405415, 4290775857),
                    new i.init(2394180231, 1750603025),
                    new i.init(3675008525, 1694076839),
                    new i.init(1203062813, 3204075428),
                  ]);
                },
                _doFinalize: function () {
                  var e = c._doFinalize.call(this);
                  return (e.sigBytes -= 16), e;
                },
              })),
            (n.SHA384 = c._createHelper(d)),
            (n.HmacSHA384 = c._createHmacHelper(d)),
            u.SHA384);
        },
        34: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(4938),
            (function () {
              var e = n,
                t = e.lib.Hasher,
                r = e.x64,
                a = r.Word,
                i = r.WordArray,
                s = e.algo;
              function o() {
                return a.create.apply(a, arguments);
              }
              var c = [
                  o(1116352408, 3609767458),
                  o(1899447441, 602891725),
                  o(3049323471, 3964484399),
                  o(3921009573, 2173295548),
                  o(961987163, 4081628472),
                  o(1508970993, 3053834265),
                  o(2453635748, 2937671579),
                  o(2870763221, 3664609560),
                  o(3624381080, 2734883394),
                  o(310598401, 1164996542),
                  o(607225278, 1323610764),
                  o(1426881987, 3590304994),
                  o(1925078388, 4068182383),
                  o(2162078206, 991336113),
                  o(2614888103, 633803317),
                  o(3248222580, 3479774868),
                  o(3835390401, 2666613458),
                  o(4022224774, 944711139),
                  o(264347078, 2341262773),
                  o(604807628, 2007800933),
                  o(770255983, 1495990901),
                  o(1249150122, 1856431235),
                  o(1555081692, 3175218132),
                  o(1996064986, 2198950837),
                  o(2554220882, 3999719339),
                  o(2821834349, 766784016),
                  o(2952996808, 2566594879),
                  o(3210313671, 3203337956),
                  o(3336571891, 1034457026),
                  o(3584528711, 2466948901),
                  o(113926993, 3758326383),
                  o(338241895, 168717936),
                  o(666307205, 1188179964),
                  o(773529912, 1546045734),
                  o(1294757372, 1522805485),
                  o(1396182291, 2643833823),
                  o(1695183700, 2343527390),
                  o(1986661051, 1014477480),
                  o(2177026350, 1206759142),
                  o(2456956037, 344077627),
                  o(2730485921, 1290863460),
                  o(2820302411, 3158454273),
                  o(3259730800, 3505952657),
                  o(3345764771, 106217008),
                  o(3516065817, 3606008344),
                  o(3600352804, 1432725776),
                  o(4094571909, 1467031594),
                  o(275423344, 851169720),
                  o(430227734, 3100823752),
                  o(506948616, 1363258195),
                  o(659060556, 3750685593),
                  o(883997877, 3785050280),
                  o(958139571, 3318307427),
                  o(1322822218, 3812723403),
                  o(1537002063, 2003034995),
                  o(1747873779, 3602036899),
                  o(1955562222, 1575990012),
                  o(2024104815, 1125592928),
                  o(2227730452, 2716904306),
                  o(2361852424, 442776044),
                  o(2428436474, 593698344),
                  o(2756734187, 3733110249),
                  o(3204031479, 2999351573),
                  o(3329325298, 3815920427),
                  o(3391569614, 3928383900),
                  o(3515267271, 566280711),
                  o(3940187606, 3454069534),
                  o(4118630271, 4000239992),
                  o(116418474, 1914138554),
                  o(174292421, 2731055270),
                  o(289380356, 3203993006),
                  o(460393269, 320620315),
                  o(685471733, 587496836),
                  o(852142971, 1086792851),
                  o(1017036298, 365543100),
                  o(1126000580, 2618297676),
                  o(1288033470, 3409855158),
                  o(1501505948, 4234509866),
                  o(1607167915, 987167468),
                  o(1816402316, 1246189591),
                ],
                d = [];
              !(function () {
                for (var e = 0; e < 80; e++) d[e] = o();
              })();
              var u = (s.SHA512 = t.extend({
                _doReset: function () {
                  this._hash = new i.init([
                    new a.init(1779033703, 4089235720),
                    new a.init(3144134277, 2227873595),
                    new a.init(1013904242, 4271175723),
                    new a.init(2773480762, 1595750129),
                    new a.init(1359893119, 2917565137),
                    new a.init(2600822924, 725511199),
                    new a.init(528734635, 4215389547),
                    new a.init(1541459225, 327033209),
                  ]);
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var r = this._hash.words,
                      n = r[0],
                      a = r[1],
                      i = r[2],
                      s = r[3],
                      o = r[4],
                      u = r[5],
                      l = r[6],
                      p = r[7],
                      h = n.high,
                      _ = n.low,
                      f = a.high,
                      m = a.low,
                      v = i.high,
                      g = i.low,
                      y = s.high,
                      b = s.low,
                      x = o.high,
                      E = o.low,
                      T = u.high,
                      S = u.low,
                      w = l.high,
                      R = l.low,
                      P = p.high,
                      O = p.low,
                      k = h,
                      C = _,
                      I = f,
                      L = m,
                      D = v,
                      A = g,
                      M = y,
                      N = b,
                      j = x,
                      B = E,
                      U = T,
                      F = S,
                      G = w,
                      V = R,
                      Z = P,
                      H = O,
                      W = 0;
                    W < 80;
                    W++
                  ) {
                    var z,
                      K,
                      X = d[W];
                    if (W < 16)
                      (K = X.high = 0 | e[t + 2 * W]),
                        (z = X.low = 0 | e[t + 2 * W + 1]);
                    else {
                      var q = d[W - 15],
                        $ = q.high,
                        J = q.low,
                        Y =
                          (($ >>> 1) | (J << 31)) ^
                          (($ >>> 8) | (J << 24)) ^
                          ($ >>> 7),
                        Q =
                          ((J >>> 1) | ($ << 31)) ^
                          ((J >>> 8) | ($ << 24)) ^
                          ((J >>> 7) | ($ << 25)),
                        ee = d[W - 2],
                        te = ee.high,
                        re = ee.low,
                        ne =
                          ((te >>> 19) | (re << 13)) ^
                          ((te << 3) | (re >>> 29)) ^
                          (te >>> 6),
                        ae =
                          ((re >>> 19) | (te << 13)) ^
                          ((re << 3) | (te >>> 29)) ^
                          ((re >>> 6) | (te << 26)),
                        ie = d[W - 7],
                        se = ie.high,
                        oe = ie.low,
                        ce = d[W - 16],
                        de = ce.high,
                        ue = ce.low;
                      (K =
                        (K =
                          (K =
                            Y + se + ((z = Q + oe) >>> 0 < Q >>> 0 ? 1 : 0)) +
                          ne +
                          ((z += ae) >>> 0 < ae >>> 0 ? 1 : 0)) +
                        de +
                        ((z += ue) >>> 0 < ue >>> 0 ? 1 : 0)),
                        (X.high = K),
                        (X.low = z);
                    }
                    var le,
                      pe = (j & U) ^ (~j & G),
                      he = (B & F) ^ (~B & V),
                      _e = (k & I) ^ (k & D) ^ (I & D),
                      fe = (C & L) ^ (C & A) ^ (L & A),
                      me =
                        ((k >>> 28) | (C << 4)) ^
                        ((k << 30) | (C >>> 2)) ^
                        ((k << 25) | (C >>> 7)),
                      ve =
                        ((C >>> 28) | (k << 4)) ^
                        ((C << 30) | (k >>> 2)) ^
                        ((C << 25) | (k >>> 7)),
                      ge =
                        ((j >>> 14) | (B << 18)) ^
                        ((j >>> 18) | (B << 14)) ^
                        ((j << 23) | (B >>> 9)),
                      ye =
                        ((B >>> 14) | (j << 18)) ^
                        ((B >>> 18) | (j << 14)) ^
                        ((B << 23) | (j >>> 9)),
                      be = c[W],
                      xe = be.high,
                      Ee = be.low,
                      Te = Z + ge + ((le = H + ye) >>> 0 < H >>> 0 ? 1 : 0),
                      Se = ve + fe;
                    (Z = G),
                      (H = V),
                      (G = U),
                      (V = F),
                      (U = j),
                      (F = B),
                      (j =
                        (M +
                          (Te =
                            (Te =
                              (Te =
                                Te +
                                pe +
                                ((le += he) >>> 0 < he >>> 0 ? 1 : 0)) +
                              xe +
                              ((le += Ee) >>> 0 < Ee >>> 0 ? 1 : 0)) +
                            K +
                            ((le += z) >>> 0 < z >>> 0 ? 1 : 0)) +
                          ((B = (N + le) | 0) >>> 0 < N >>> 0 ? 1 : 0)) |
                        0),
                      (M = D),
                      (N = A),
                      (D = I),
                      (A = L),
                      (I = k),
                      (L = C),
                      (k =
                        (Te +
                          (me + _e + (Se >>> 0 < ve >>> 0 ? 1 : 0)) +
                          ((C = (le + Se) | 0) >>> 0 < le >>> 0 ? 1 : 0)) |
                        0);
                  }
                  (_ = n.low = _ + C),
                    (n.high = h + k + (_ >>> 0 < C >>> 0 ? 1 : 0)),
                    (m = a.low = m + L),
                    (a.high = f + I + (m >>> 0 < L >>> 0 ? 1 : 0)),
                    (g = i.low = g + A),
                    (i.high = v + D + (g >>> 0 < A >>> 0 ? 1 : 0)),
                    (b = s.low = b + N),
                    (s.high = y + M + (b >>> 0 < N >>> 0 ? 1 : 0)),
                    (E = o.low = E + B),
                    (o.high = x + j + (E >>> 0 < B >>> 0 ? 1 : 0)),
                    (S = u.low = S + F),
                    (u.high = T + U + (S >>> 0 < F >>> 0 ? 1 : 0)),
                    (R = l.low = R + V),
                    (l.high = w + G + (R >>> 0 < V >>> 0 ? 1 : 0)),
                    (O = p.low = O + H),
                    (p.high = P + Z + (O >>> 0 < H >>> 0 ? 1 : 0));
                },
                _doFinalize: function () {
                  var e = this._data,
                    t = e.words,
                    r = 8 * this._nDataBytes,
                    n = 8 * e.sigBytes;
                  return (
                    (t[n >>> 5] |= 128 << (24 - (n % 32))),
                    (t[30 + (((n + 128) >>> 10) << 5)] = Math.floor(
                      r / 4294967296
                    )),
                    (t[31 + (((n + 128) >>> 10) << 5)] = r),
                    (e.sigBytes = 4 * t.length),
                    this._process(),
                    this._hash.toX32()
                  );
                },
                clone: function () {
                  var e = t.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
                blockSize: 32,
              }));
              (e.SHA512 = t._createHelper(u)),
                (e.HmacSHA512 = t._createHmacHelper(u));
            })(),
            n.SHA512);
        },
        4253: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            r(8269),
            r(8214),
            r(888),
            r(5109),
            (function () {
              var e = n,
                t = e.lib,
                r = t.WordArray,
                a = t.BlockCipher,
                i = e.algo,
                s = [
                  57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2,
                  59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39,
                  31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37,
                  29, 21, 13, 5, 28, 20, 12, 4,
                ],
                o = [
                  14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26,
                  8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51,
                  45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32,
                ],
                c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
                d = [
                  {
                    0: 8421888,
                    268435456: 32768,
                    536870912: 8421378,
                    805306368: 2,
                    1073741824: 512,
                    1342177280: 8421890,
                    1610612736: 8389122,
                    1879048192: 8388608,
                    2147483648: 514,
                    2415919104: 8389120,
                    2684354560: 33280,
                    2952790016: 8421376,
                    3221225472: 32770,
                    3489660928: 8388610,
                    3758096384: 0,
                    4026531840: 33282,
                    134217728: 0,
                    402653184: 8421890,
                    671088640: 33282,
                    939524096: 32768,
                    1207959552: 8421888,
                    1476395008: 512,
                    1744830464: 8421378,
                    2013265920: 2,
                    2281701376: 8389120,
                    2550136832: 33280,
                    2818572288: 8421376,
                    3087007744: 8389122,
                    3355443200: 8388610,
                    3623878656: 32770,
                    3892314112: 514,
                    4160749568: 8388608,
                    1: 32768,
                    268435457: 2,
                    536870913: 8421888,
                    805306369: 8388608,
                    1073741825: 8421378,
                    1342177281: 33280,
                    1610612737: 512,
                    1879048193: 8389122,
                    2147483649: 8421890,
                    2415919105: 8421376,
                    2684354561: 8388610,
                    2952790017: 33282,
                    3221225473: 514,
                    3489660929: 8389120,
                    3758096385: 32770,
                    4026531841: 0,
                    134217729: 8421890,
                    402653185: 8421376,
                    671088641: 8388608,
                    939524097: 512,
                    1207959553: 32768,
                    1476395009: 8388610,
                    1744830465: 2,
                    2013265921: 33282,
                    2281701377: 32770,
                    2550136833: 8389122,
                    2818572289: 514,
                    3087007745: 8421888,
                    3355443201: 8389120,
                    3623878657: 0,
                    3892314113: 33280,
                    4160749569: 8421378,
                  },
                  {
                    0: 1074282512,
                    16777216: 16384,
                    33554432: 524288,
                    50331648: 1074266128,
                    67108864: 1073741840,
                    83886080: 1074282496,
                    100663296: 1073758208,
                    117440512: 16,
                    134217728: 540672,
                    150994944: 1073758224,
                    167772160: 1073741824,
                    184549376: 540688,
                    201326592: 524304,
                    218103808: 0,
                    234881024: 16400,
                    251658240: 1074266112,
                    8388608: 1073758208,
                    25165824: 540688,
                    41943040: 16,
                    58720256: 1073758224,
                    75497472: 1074282512,
                    92274688: 1073741824,
                    109051904: 524288,
                    125829120: 1074266128,
                    142606336: 524304,
                    159383552: 0,
                    176160768: 16384,
                    192937984: 1074266112,
                    209715200: 1073741840,
                    226492416: 540672,
                    243269632: 1074282496,
                    260046848: 16400,
                    268435456: 0,
                    285212672: 1074266128,
                    301989888: 1073758224,
                    318767104: 1074282496,
                    335544320: 1074266112,
                    352321536: 16,
                    369098752: 540688,
                    385875968: 16384,
                    402653184: 16400,
                    419430400: 524288,
                    436207616: 524304,
                    452984832: 1073741840,
                    469762048: 540672,
                    486539264: 1073758208,
                    503316480: 1073741824,
                    520093696: 1074282512,
                    276824064: 540688,
                    293601280: 524288,
                    310378496: 1074266112,
                    327155712: 16384,
                    343932928: 1073758208,
                    360710144: 1074282512,
                    377487360: 16,
                    394264576: 1073741824,
                    411041792: 1074282496,
                    427819008: 1073741840,
                    444596224: 1073758224,
                    461373440: 524304,
                    478150656: 0,
                    494927872: 16400,
                    511705088: 1074266128,
                    528482304: 540672,
                  },
                  {
                    0: 260,
                    1048576: 0,
                    2097152: 67109120,
                    3145728: 65796,
                    4194304: 65540,
                    5242880: 67108868,
                    6291456: 67174660,
                    7340032: 67174400,
                    8388608: 67108864,
                    9437184: 67174656,
                    10485760: 65792,
                    11534336: 67174404,
                    12582912: 67109124,
                    13631488: 65536,
                    14680064: 4,
                    15728640: 256,
                    524288: 67174656,
                    1572864: 67174404,
                    2621440: 0,
                    3670016: 67109120,
                    4718592: 67108868,
                    5767168: 65536,
                    6815744: 65540,
                    7864320: 260,
                    8912896: 4,
                    9961472: 256,
                    11010048: 67174400,
                    12058624: 65796,
                    13107200: 65792,
                    14155776: 67109124,
                    15204352: 67174660,
                    16252928: 67108864,
                    16777216: 67174656,
                    17825792: 65540,
                    18874368: 65536,
                    19922944: 67109120,
                    20971520: 256,
                    22020096: 67174660,
                    23068672: 67108868,
                    24117248: 0,
                    25165824: 67109124,
                    26214400: 67108864,
                    27262976: 4,
                    28311552: 65792,
                    29360128: 67174400,
                    30408704: 260,
                    31457280: 65796,
                    32505856: 67174404,
                    17301504: 67108864,
                    18350080: 260,
                    19398656: 67174656,
                    20447232: 0,
                    21495808: 65540,
                    22544384: 67109120,
                    23592960: 256,
                    24641536: 67174404,
                    25690112: 65536,
                    26738688: 67174660,
                    27787264: 65796,
                    28835840: 67108868,
                    29884416: 67109124,
                    30932992: 67174400,
                    31981568: 4,
                    33030144: 65792,
                  },
                  {
                    0: 2151682048,
                    65536: 2147487808,
                    131072: 4198464,
                    196608: 2151677952,
                    262144: 0,
                    327680: 4198400,
                    393216: 2147483712,
                    458752: 4194368,
                    524288: 2147483648,
                    589824: 4194304,
                    655360: 64,
                    720896: 2147487744,
                    786432: 2151678016,
                    851968: 4160,
                    917504: 4096,
                    983040: 2151682112,
                    32768: 2147487808,
                    98304: 64,
                    163840: 2151678016,
                    229376: 2147487744,
                    294912: 4198400,
                    360448: 2151682112,
                    425984: 0,
                    491520: 2151677952,
                    557056: 4096,
                    622592: 2151682048,
                    688128: 4194304,
                    753664: 4160,
                    819200: 2147483648,
                    884736: 4194368,
                    950272: 4198464,
                    1015808: 2147483712,
                    1048576: 4194368,
                    1114112: 4198400,
                    1179648: 2147483712,
                    1245184: 0,
                    1310720: 4160,
                    1376256: 2151678016,
                    1441792: 2151682048,
                    1507328: 2147487808,
                    1572864: 2151682112,
                    1638400: 2147483648,
                    1703936: 2151677952,
                    1769472: 4198464,
                    1835008: 2147487744,
                    1900544: 4194304,
                    1966080: 64,
                    2031616: 4096,
                    1081344: 2151677952,
                    1146880: 2151682112,
                    1212416: 0,
                    1277952: 4198400,
                    1343488: 4194368,
                    1409024: 2147483648,
                    1474560: 2147487808,
                    1540096: 64,
                    1605632: 2147483712,
                    1671168: 4096,
                    1736704: 2147487744,
                    1802240: 2151678016,
                    1867776: 4160,
                    1933312: 2151682048,
                    1998848: 4194304,
                    2064384: 4198464,
                  },
                  {
                    0: 128,
                    4096: 17039360,
                    8192: 262144,
                    12288: 536870912,
                    16384: 537133184,
                    20480: 16777344,
                    24576: 553648256,
                    28672: 262272,
                    32768: 16777216,
                    36864: 537133056,
                    40960: 536871040,
                    45056: 553910400,
                    49152: 553910272,
                    53248: 0,
                    57344: 17039488,
                    61440: 553648128,
                    2048: 17039488,
                    6144: 553648256,
                    10240: 128,
                    14336: 17039360,
                    18432: 262144,
                    22528: 537133184,
                    26624: 553910272,
                    30720: 536870912,
                    34816: 537133056,
                    38912: 0,
                    43008: 553910400,
                    47104: 16777344,
                    51200: 536871040,
                    55296: 553648128,
                    59392: 16777216,
                    63488: 262272,
                    65536: 262144,
                    69632: 128,
                    73728: 536870912,
                    77824: 553648256,
                    81920: 16777344,
                    86016: 553910272,
                    90112: 537133184,
                    94208: 16777216,
                    98304: 553910400,
                    102400: 553648128,
                    106496: 17039360,
                    110592: 537133056,
                    114688: 262272,
                    118784: 536871040,
                    122880: 0,
                    126976: 17039488,
                    67584: 553648256,
                    71680: 16777216,
                    75776: 17039360,
                    79872: 537133184,
                    83968: 536870912,
                    88064: 17039488,
                    92160: 128,
                    96256: 553910272,
                    100352: 262272,
                    104448: 553910400,
                    108544: 0,
                    112640: 553648128,
                    116736: 16777344,
                    120832: 262144,
                    124928: 537133056,
                    129024: 536871040,
                  },
                  {
                    0: 268435464,
                    256: 8192,
                    512: 270532608,
                    768: 270540808,
                    1024: 268443648,
                    1280: 2097152,
                    1536: 2097160,
                    1792: 268435456,
                    2048: 0,
                    2304: 268443656,
                    2560: 2105344,
                    2816: 8,
                    3072: 270532616,
                    3328: 2105352,
                    3584: 8200,
                    3840: 270540800,
                    128: 270532608,
                    384: 270540808,
                    640: 8,
                    896: 2097152,
                    1152: 2105352,
                    1408: 268435464,
                    1664: 268443648,
                    1920: 8200,
                    2176: 2097160,
                    2432: 8192,
                    2688: 268443656,
                    2944: 270532616,
                    3200: 0,
                    3456: 270540800,
                    3712: 2105344,
                    3968: 268435456,
                    4096: 268443648,
                    4352: 270532616,
                    4608: 270540808,
                    4864: 8200,
                    5120: 2097152,
                    5376: 268435456,
                    5632: 268435464,
                    5888: 2105344,
                    6144: 2105352,
                    6400: 0,
                    6656: 8,
                    6912: 270532608,
                    7168: 8192,
                    7424: 268443656,
                    7680: 270540800,
                    7936: 2097160,
                    4224: 8,
                    4480: 2105344,
                    4736: 2097152,
                    4992: 268435464,
                    5248: 268443648,
                    5504: 8200,
                    5760: 270540808,
                    6016: 270532608,
                    6272: 270540800,
                    6528: 270532616,
                    6784: 8192,
                    7040: 2105352,
                    7296: 2097160,
                    7552: 0,
                    7808: 268435456,
                    8064: 268443656,
                  },
                  {
                    0: 1048576,
                    16: 33555457,
                    32: 1024,
                    48: 1049601,
                    64: 34604033,
                    80: 0,
                    96: 1,
                    112: 34603009,
                    128: 33555456,
                    144: 1048577,
                    160: 33554433,
                    176: 34604032,
                    192: 34603008,
                    208: 1025,
                    224: 1049600,
                    240: 33554432,
                    8: 34603009,
                    24: 0,
                    40: 33555457,
                    56: 34604032,
                    72: 1048576,
                    88: 33554433,
                    104: 33554432,
                    120: 1025,
                    136: 1049601,
                    152: 33555456,
                    168: 34603008,
                    184: 1048577,
                    200: 1024,
                    216: 34604033,
                    232: 1,
                    248: 1049600,
                    256: 33554432,
                    272: 1048576,
                    288: 33555457,
                    304: 34603009,
                    320: 1048577,
                    336: 33555456,
                    352: 34604032,
                    368: 1049601,
                    384: 1025,
                    400: 34604033,
                    416: 1049600,
                    432: 1,
                    448: 0,
                    464: 34603008,
                    480: 33554433,
                    496: 1024,
                    264: 1049600,
                    280: 33555457,
                    296: 34603009,
                    312: 1,
                    328: 33554432,
                    344: 1048576,
                    360: 1025,
                    376: 34604032,
                    392: 33554433,
                    408: 34603008,
                    424: 0,
                    440: 34604033,
                    456: 1049601,
                    472: 1024,
                    488: 33555456,
                    504: 1048577,
                  },
                  {
                    0: 134219808,
                    1: 131072,
                    2: 134217728,
                    3: 32,
                    4: 131104,
                    5: 134350880,
                    6: 134350848,
                    7: 2048,
                    8: 134348800,
                    9: 134219776,
                    10: 133120,
                    11: 134348832,
                    12: 2080,
                    13: 0,
                    14: 134217760,
                    15: 133152,
                    2147483648: 2048,
                    2147483649: 134350880,
                    2147483650: 134219808,
                    2147483651: 134217728,
                    2147483652: 134348800,
                    2147483653: 133120,
                    2147483654: 133152,
                    2147483655: 32,
                    2147483656: 134217760,
                    2147483657: 2080,
                    2147483658: 131104,
                    2147483659: 134350848,
                    2147483660: 0,
                    2147483661: 134348832,
                    2147483662: 134219776,
                    2147483663: 131072,
                    16: 133152,
                    17: 134350848,
                    18: 32,
                    19: 2048,
                    20: 134219776,
                    21: 134217760,
                    22: 134348832,
                    23: 131072,
                    24: 0,
                    25: 131104,
                    26: 134348800,
                    27: 134219808,
                    28: 134350880,
                    29: 133120,
                    30: 2080,
                    31: 134217728,
                    2147483664: 131072,
                    2147483665: 2048,
                    2147483666: 134348832,
                    2147483667: 133152,
                    2147483668: 32,
                    2147483669: 134348800,
                    2147483670: 134217728,
                    2147483671: 134219808,
                    2147483672: 134350880,
                    2147483673: 134217760,
                    2147483674: 134219776,
                    2147483675: 0,
                    2147483676: 133120,
                    2147483677: 2080,
                    2147483678: 131104,
                    2147483679: 134350848,
                  },
                ],
                u = [
                  4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504,
                  2147483679,
                ],
                l = (i.DES = a.extend({
                  _doReset: function () {
                    for (var e = this._key.words, t = [], r = 0; r < 56; r++) {
                      var n = s[r] - 1;
                      t[r] = (e[n >>> 5] >>> (31 - (n % 32))) & 1;
                    }
                    for (var a = (this._subKeys = []), i = 0; i < 16; i++) {
                      var d = (a[i] = []),
                        u = c[i];
                      for (r = 0; r < 24; r++)
                        (d[(r / 6) | 0] |=
                          t[(o[r] - 1 + u) % 28] << (31 - (r % 6))),
                          (d[4 + ((r / 6) | 0)] |=
                            t[28 + ((o[r + 24] - 1 + u) % 28)] <<
                            (31 - (r % 6)));
                      for (
                        d[0] = (d[0] << 1) | (d[0] >>> 31), r = 1;
                        r < 7;
                        r++
                      )
                        d[r] = d[r] >>> (4 * (r - 1) + 3);
                      d[7] = (d[7] << 5) | (d[7] >>> 27);
                    }
                    var l = (this._invSubKeys = []);
                    for (r = 0; r < 16; r++) l[r] = a[15 - r];
                  },
                  encryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._subKeys);
                  },
                  decryptBlock: function (e, t) {
                    this._doCryptBlock(e, t, this._invSubKeys);
                  },
                  _doCryptBlock: function (e, t, r) {
                    (this._lBlock = e[t]),
                      (this._rBlock = e[t + 1]),
                      p.call(this, 4, 252645135),
                      p.call(this, 16, 65535),
                      h.call(this, 2, 858993459),
                      h.call(this, 8, 16711935),
                      p.call(this, 1, 1431655765);
                    for (var n = 0; n < 16; n++) {
                      for (
                        var a = r[n],
                          i = this._lBlock,
                          s = this._rBlock,
                          o = 0,
                          c = 0;
                        c < 8;
                        c++
                      )
                        o |= d[c][((s ^ a[c]) & u[c]) >>> 0];
                      (this._lBlock = s), (this._rBlock = i ^ o);
                    }
                    var l = this._lBlock;
                    (this._lBlock = this._rBlock),
                      (this._rBlock = l),
                      p.call(this, 1, 1431655765),
                      h.call(this, 8, 16711935),
                      h.call(this, 2, 858993459),
                      p.call(this, 16, 65535),
                      p.call(this, 4, 252645135),
                      (e[t] = this._lBlock),
                      (e[t + 1] = this._rBlock);
                  },
                  keySize: 2,
                  ivSize: 2,
                  blockSize: 2,
                }));
              function p(e, t) {
                var r = ((this._lBlock >>> e) ^ this._rBlock) & t;
                (this._rBlock ^= r), (this._lBlock ^= r << e);
              }
              function h(e, t) {
                var r = ((this._rBlock >>> e) ^ this._lBlock) & t;
                (this._lBlock ^= r), (this._rBlock ^= r << e);
              }
              e.DES = a._createHelper(l);
              var _ = (i.TripleDES = a.extend({
                _doReset: function () {
                  var e = this._key.words;
                  if (2 !== e.length && 4 !== e.length && e.length < 6)
                    throw new Error(
                      "Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192."
                    );
                  var t = e.slice(0, 2),
                    n = e.length < 4 ? e.slice(0, 2) : e.slice(2, 4),
                    a = e.length < 6 ? e.slice(0, 2) : e.slice(4, 6);
                  (this._des1 = l.createEncryptor(r.create(t))),
                    (this._des2 = l.createEncryptor(r.create(n))),
                    (this._des3 = l.createEncryptor(r.create(a)));
                },
                encryptBlock: function (e, t) {
                  this._des1.encryptBlock(e, t),
                    this._des2.decryptBlock(e, t),
                    this._des3.encryptBlock(e, t);
                },
                decryptBlock: function (e, t) {
                  this._des3.decryptBlock(e, t),
                    this._des2.encryptBlock(e, t),
                    this._des1.decryptBlock(e, t);
                },
                keySize: 6,
                ivSize: 2,
                blockSize: 2,
              }));
              e.TripleDES = a._createHelper(_);
            })(),
            n.TripleDES);
        },
        4938: function (e, t, r) {
          var n;
          e.exports =
            ((n = r(8249)),
            (function (e) {
              var t = n,
                r = t.lib,
                a = r.Base,
                i = r.WordArray,
                s = (t.x64 = {});
              (s.Word = a.extend({
                init: function (e, t) {
                  (this.high = e), (this.low = t);
                },
              })),
                (s.WordArray = a.extend({
                  init: function (t, r) {
                    (t = this.words = t || []),
                      (this.sigBytes = r != e ? r : 8 * t.length);
                  },
                  toX32: function () {
                    for (
                      var e = this.words, t = e.length, r = [], n = 0;
                      n < t;
                      n++
                    ) {
                      var a = e[n];
                      r.push(a.high), r.push(a.low);
                    }
                    return i.create(r, this.sigBytes);
                  },
                  clone: function () {
                    for (
                      var e = a.clone.call(this),
                        t = (e.words = this.words.slice(0)),
                        r = t.length,
                        n = 0;
                      n < r;
                      n++
                    )
                      t[n] = t[n].clone();
                    return e;
                  },
                }));
            })(),
            n);
        },
        1227: (e, t, r) => {
          (t.formatArgs = function (t) {
            if (
              ((t[0] =
                (this.useColors ? "%c" : "") +
                this.namespace +
                (this.useColors ? " %c" : " ") +
                t[0] +
                (this.useColors ? "%c " : " ") +
                "+" +
                e.exports.humanize(this.diff)),
              !this.useColors)
            )
              return;
            const r = "color: " + this.color;
            t.splice(1, 0, r, "color: inherit");
            let n = 0,
              a = 0;
            t[0].replace(/%[a-zA-Z%]/g, (e) => {
              "%%" !== e && (n++, "%c" === e && (a = n));
            }),
              t.splice(a, 0, r);
          }),
            (t.save = function (e) {
              try {
                e
                  ? t.storage.setItem("debug", e)
                  : t.storage.removeItem("debug");
              } catch (e) {}
            }),
            (t.load = function () {
              let e;
              try {
                e = t.storage.getItem("debug");
              } catch (e) {}
              !e &&
                "undefined" != typeof process &&
                "env" in process &&
                (e = process.env.DEBUG);
              return e;
            }),
            (t.useColors = function () {
              if (
                "undefined" != typeof window &&
                window.process &&
                ("renderer" === window.process.type || window.process.__nwjs)
              )
                return !0;
              if (
                "undefined" != typeof navigator &&
                navigator.userAgent &&
                navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)
              )
                return !1;
              return (
                ("undefined" != typeof document &&
                  document.documentElement &&
                  document.documentElement.style &&
                  document.documentElement.style.WebkitAppearance) ||
                ("undefined" != typeof window &&
                  window.console &&
                  (window.console.firebug ||
                    (window.console.exception && window.console.table))) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) &&
                  parseInt(RegExp.$1, 10) >= 31) ||
                ("undefined" != typeof navigator &&
                  navigator.userAgent &&
                  navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))
              );
            }),
            (t.storage = (function () {
              try {
                return localStorage;
              } catch (e) {}
            })()),
            (t.destroy = (() => {
              let e = !1;
              return () => {
                e ||
                  ((e = !0),
                  console.warn(
                    "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                  ));
              };
            })()),
            (t.colors = [
              "#0000CC",
              "#0000FF",
              "#0033CC",
              "#0033FF",
              "#0066CC",
              "#0066FF",
              "#0099CC",
              "#0099FF",
              "#00CC00",
              "#00CC33",
              "#00CC66",
              "#00CC99",
              "#00CCCC",
              "#00CCFF",
              "#3300CC",
              "#3300FF",
              "#3333CC",
              "#3333FF",
              "#3366CC",
              "#3366FF",
              "#3399CC",
              "#3399FF",
              "#33CC00",
              "#33CC33",
              "#33CC66",
              "#33CC99",
              "#33CCCC",
              "#33CCFF",
              "#6600CC",
              "#6600FF",
              "#6633CC",
              "#6633FF",
              "#66CC00",
              "#66CC33",
              "#9900CC",
              "#9900FF",
              "#9933CC",
              "#9933FF",
              "#99CC00",
              "#99CC33",
              "#CC0000",
              "#CC0033",
              "#CC0066",
              "#CC0099",
              "#CC00CC",
              "#CC00FF",
              "#CC3300",
              "#CC3333",
              "#CC3366",
              "#CC3399",
              "#CC33CC",
              "#CC33FF",
              "#CC6600",
              "#CC6633",
              "#CC9900",
              "#CC9933",
              "#CCCC00",
              "#CCCC33",
              "#FF0000",
              "#FF0033",
              "#FF0066",
              "#FF0099",
              "#FF00CC",
              "#FF00FF",
              "#FF3300",
              "#FF3333",
              "#FF3366",
              "#FF3399",
              "#FF33CC",
              "#FF33FF",
              "#FF6600",
              "#FF6633",
              "#FF9900",
              "#FF9933",
              "#FFCC00",
              "#FFCC33",
            ]),
            (t.log = console.debug || console.log || (() => {})),
            (e.exports = r(2447)(t));
          const { formatters: n } = e.exports;
          n.j = function (e) {
            try {
              return JSON.stringify(e);
            } catch (e) {
              return "[UnexpectedJSONParseError]: " + e.message;
            }
          };
        },
        2447: (e, t, r) => {
          e.exports = function (e) {
            function t(e) {
              let r,
                a,
                i,
                s = null;
              function o(...e) {
                if (!o.enabled) return;
                const n = o,
                  a = Number(new Date()),
                  i = a - (r || a);
                (n.diff = i),
                  (n.prev = r),
                  (n.curr = a),
                  (r = a),
                  (e[0] = t.coerce(e[0])),
                  "string" != typeof e[0] && e.unshift("%O");
                let s = 0;
                (e[0] = e[0].replace(/%([a-zA-Z%])/g, (r, a) => {
                  if ("%%" === r) return "%";
                  s++;
                  const i = t.formatters[a];
                  if ("function" == typeof i) {
                    const t = e[s];
                    (r = i.call(n, t)), e.splice(s, 1), s--;
                  }
                  return r;
                })),
                  t.formatArgs.call(n, e);
                (n.log || t.log).apply(n, e);
              }
              return (
                (o.namespace = e),
                (o.useColors = t.useColors()),
                (o.color = t.selectColor(e)),
                (o.extend = n),
                (o.destroy = t.destroy),
                Object.defineProperty(o, "enabled", {
                  enumerable: !0,
                  configurable: !1,
                  get: () =>
                    null !== s
                      ? s
                      : (a !== t.namespaces &&
                          ((a = t.namespaces), (i = t.enabled(e))),
                        i),
                  set: (e) => {
                    s = e;
                  },
                }),
                "function" == typeof t.init && t.init(o),
                o
              );
            }
            function n(e, r) {
              const n = t(this.namespace + (void 0 === r ? ":" : r) + e);
              return (n.log = this.log), n;
            }
            function a(e) {
              return e
                .toString()
                .substring(2, e.toString().length - 2)
                .replace(/\.\*\?$/, "*");
            }
            return (
              (t.debug = t),
              (t.default = t),
              (t.coerce = function (e) {
                if (e instanceof Error) return e.stack || e.message;
                return e;
              }),
              (t.disable = function () {
                const e = [
                  ...t.names.map(a),
                  ...t.skips.map(a).map((e) => "-" + e),
                ].join(",");
                return t.enable(""), e;
              }),
              (t.enable = function (e) {
                let r;
                t.save(e), (t.namespaces = e), (t.names = []), (t.skips = []);
                const n = ("string" == typeof e ? e : "").split(/[\s,]+/),
                  a = n.length;
                for (r = 0; r < a; r++)
                  n[r] &&
                    ("-" === (e = n[r].replace(/\*/g, ".*?"))[0]
                      ? t.skips.push(new RegExp("^" + e.substr(1) + "$"))
                      : t.names.push(new RegExp("^" + e + "$")));
              }),
              (t.enabled = function (e) {
                if ("*" === e[e.length - 1]) return !0;
                let r, n;
                for (r = 0, n = t.skips.length; r < n; r++)
                  if (t.skips[r].test(e)) return !1;
                for (r = 0, n = t.names.length; r < n; r++)
                  if (t.names[r].test(e)) return !0;
                return !1;
              }),
              (t.humanize = r(7824)),
              (t.destroy = function () {
                console.warn(
                  "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."
                );
              }),
              Object.keys(e).forEach((r) => {
                t[r] = e[r];
              }),
              (t.names = []),
              (t.skips = []),
              (t.formatters = {}),
              (t.selectColor = function (e) {
                let r = 0;
                for (let t = 0; t < e.length; t++)
                  (r = (r << 5) - r + e.charCodeAt(t)), (r |= 0);
                return t.colors[Math.abs(r) % t.colors.length];
              }),
              t.enable(t.load()),
              t
            );
          };
        },
        284: (e) => {
          var t = function () {
            if ("object" == typeof self && self) return self;
            if ("object" == typeof window && window) return window;
            throw new Error("Unable to resolve global `this`");
          };
          e.exports = (function () {
            if (this) return this;
            if ("object" == typeof globalThis && globalThis) return globalThis;
            try {
              Object.defineProperty(Object.prototype, "__global__", {
                get: function () {
                  return this;
                },
                configurable: !0,
              });
            } catch (e) {
              return t();
            }
            try {
              return __global__ || t();
            } finally {
              delete Object.prototype.__global__;
            }
          })();
        },
        7187: (e) => {
          "use strict";
          var t,
            r = "object" == typeof Reflect ? Reflect : null,
            n =
              r && "function" == typeof r.apply
                ? r.apply
                : function (e, t, r) {
                    return Function.prototype.apply.call(e, t, r);
                  };
          t =
            r && "function" == typeof r.ownKeys
              ? r.ownKeys
              : Object.getOwnPropertySymbols
              ? function (e) {
                  return Object.getOwnPropertyNames(e).concat(
                    Object.getOwnPropertySymbols(e)
                  );
                }
              : function (e) {
                  return Object.getOwnPropertyNames(e);
                };
          var a =
            Number.isNaN ||
            function (e) {
              return e != e;
            };
          function i() {
            i.init.call(this);
          }
          (e.exports = i),
            (e.exports.once = function (e, t) {
              return new Promise(function (r, n) {
                function a(r) {
                  e.removeListener(t, i), n(r);
                }
                function i() {
                  "function" == typeof e.removeListener &&
                    e.removeListener("error", a),
                    r([].slice.call(arguments));
                }
                f(e, t, i, { once: !0 }),
                  "error" !== t &&
                    (function (e, t, r) {
                      "function" == typeof e.on && f(e, "error", t, r);
                    })(e, a, { once: !0 });
              });
            }),
            (i.EventEmitter = i),
            (i.prototype._events = void 0),
            (i.prototype._eventsCount = 0),
            (i.prototype._maxListeners = void 0);
          var s = 10;
          function o(e) {
            if ("function" != typeof e)
              throw new TypeError(
                'The "listener" argument must be of type Function. Received type ' +
                  typeof e
              );
          }
          function c(e) {
            return void 0 === e._maxListeners
              ? i.defaultMaxListeners
              : e._maxListeners;
          }
          function d(e, t, r, n) {
            var a, i, s, d;
            if (
              (o(r),
              void 0 === (i = e._events)
                ? ((i = e._events = Object.create(null)), (e._eventsCount = 0))
                : (void 0 !== i.newListener &&
                    (e.emit("newListener", t, r.listener ? r.listener : r),
                    (i = e._events)),
                  (s = i[t])),
              void 0 === s)
            )
              (s = i[t] = r), ++e._eventsCount;
            else if (
              ("function" == typeof s
                ? (s = i[t] = n ? [r, s] : [s, r])
                : n
                ? s.unshift(r)
                : s.push(r),
              (a = c(e)) > 0 && s.length > a && !s.warned)
            ) {
              s.warned = !0;
              var u = new Error(
                "Possible EventEmitter memory leak detected. " +
                  s.length +
                  " " +
                  String(t) +
                  " listeners added. Use emitter.setMaxListeners() to increase limit"
              );
              (u.name = "MaxListenersExceededWarning"),
                (u.emitter = e),
                (u.type = t),
                (u.count = s.length),
                (d = u),
                console && console.warn && console.warn(d);
            }
            return e;
          }
          function u() {
            if (!this.fired)
              return (
                this.target.removeListener(this.type, this.wrapFn),
                (this.fired = !0),
                0 === arguments.length
                  ? this.listener.call(this.target)
                  : this.listener.apply(this.target, arguments)
              );
          }
          function l(e, t, r) {
            var n = {
                fired: !1,
                wrapFn: void 0,
                target: e,
                type: t,
                listener: r,
              },
              a = u.bind(n);
            return (a.listener = r), (n.wrapFn = a), a;
          }
          function p(e, t, r) {
            var n = e._events;
            if (void 0 === n) return [];
            var a = n[t];
            return void 0 === a
              ? []
              : "function" == typeof a
              ? r
                ? [a.listener || a]
                : [a]
              : r
              ? (function (e) {
                  for (var t = new Array(e.length), r = 0; r < t.length; ++r)
                    t[r] = e[r].listener || e[r];
                  return t;
                })(a)
              : _(a, a.length);
          }
          function h(e) {
            var t = this._events;
            if (void 0 !== t) {
              var r = t[e];
              if ("function" == typeof r) return 1;
              if (void 0 !== r) return r.length;
            }
            return 0;
          }
          function _(e, t) {
            for (var r = new Array(t), n = 0; n < t; ++n) r[n] = e[n];
            return r;
          }
          function f(e, t, r, n) {
            if ("function" == typeof e.on) n.once ? e.once(t, r) : e.on(t, r);
            else {
              if ("function" != typeof e.addEventListener)
                throw new TypeError(
                  'The "emitter" argument must be of type EventEmitter. Received type ' +
                    typeof e
                );
              e.addEventListener(t, function a(i) {
                n.once && e.removeEventListener(t, a), r(i);
              });
            }
          }
          Object.defineProperty(i, "defaultMaxListeners", {
            enumerable: !0,
            get: function () {
              return s;
            },
            set: function (e) {
              if ("number" != typeof e || e < 0 || a(e))
                throw new RangeError(
                  'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              s = e;
            },
          }),
            (i.init = function () {
              (void 0 !== this._events &&
                this._events !== Object.getPrototypeOf(this)._events) ||
                ((this._events = Object.create(null)), (this._eventsCount = 0)),
                (this._maxListeners = this._maxListeners || void 0);
            }),
            (i.prototype.setMaxListeners = function (e) {
              if ("number" != typeof e || e < 0 || a(e))
                throw new RangeError(
                  'The value of "n" is out of range. It must be a non-negative number. Received ' +
                    e +
                    "."
                );
              return (this._maxListeners = e), this;
            }),
            (i.prototype.getMaxListeners = function () {
              return c(this);
            }),
            (i.prototype.emit = function (e) {
              for (var t = [], r = 1; r < arguments.length; r++)
                t.push(arguments[r]);
              var a = "error" === e,
                i = this._events;
              if (void 0 !== i) a = a && void 0 === i.error;
              else if (!a) return !1;
              if (a) {
                var s;
                if ((t.length > 0 && (s = t[0]), s instanceof Error)) throw s;
                var o = new Error(
                  "Unhandled error." + (s ? " (" + s.message + ")" : "")
                );
                throw ((o.context = s), o);
              }
              var c = i[e];
              if (void 0 === c) return !1;
              if ("function" == typeof c) n(c, this, t);
              else {
                var d = c.length,
                  u = _(c, d);
                for (r = 0; r < d; ++r) n(u[r], this, t);
              }
              return !0;
            }),
            (i.prototype.addListener = function (e, t) {
              return d(this, e, t, !1);
            }),
            (i.prototype.on = i.prototype.addListener),
            (i.prototype.prependListener = function (e, t) {
              return d(this, e, t, !0);
            }),
            (i.prototype.once = function (e, t) {
              return o(t), this.on(e, l(this, e, t)), this;
            }),
            (i.prototype.prependOnceListener = function (e, t) {
              return o(t), this.prependListener(e, l(this, e, t)), this;
            }),
            (i.prototype.removeListener = function (e, t) {
              var r, n, a, i, s;
              if ((o(t), void 0 === (n = this._events))) return this;
              if (void 0 === (r = n[e])) return this;
              if (r === t || r.listener === t)
                0 == --this._eventsCount
                  ? (this._events = Object.create(null))
                  : (delete n[e],
                    n.removeListener &&
                      this.emit("removeListener", e, r.listener || t));
              else if ("function" != typeof r) {
                for (a = -1, i = r.length - 1; i >= 0; i--)
                  if (r[i] === t || r[i].listener === t) {
                    (s = r[i].listener), (a = i);
                    break;
                  }
                if (a < 0) return this;
                0 === a
                  ? r.shift()
                  : (function (e, t) {
                      for (; t + 1 < e.length; t++) e[t] = e[t + 1];
                      e.pop();
                    })(r, a),
                  1 === r.length && (n[e] = r[0]),
                  void 0 !== n.removeListener &&
                    this.emit("removeListener", e, s || t);
              }
              return this;
            }),
            (i.prototype.off = i.prototype.removeListener),
            (i.prototype.removeAllListeners = function (e) {
              var t, r, n;
              if (void 0 === (r = this._events)) return this;
              if (void 0 === r.removeListener)
                return (
                  0 === arguments.length
                    ? ((this._events = Object.create(null)),
                      (this._eventsCount = 0))
                    : void 0 !== r[e] &&
                      (0 == --this._eventsCount
                        ? (this._events = Object.create(null))
                        : delete r[e]),
                  this
                );
              if (0 === arguments.length) {
                var a,
                  i = Object.keys(r);
                for (n = 0; n < i.length; ++n)
                  "removeListener" !== (a = i[n]) && this.removeAllListeners(a);
                return (
                  this.removeAllListeners("removeListener"),
                  (this._events = Object.create(null)),
                  (this._eventsCount = 0),
                  this
                );
              }
              if ("function" == typeof (t = r[e])) this.removeListener(e, t);
              else if (void 0 !== t)
                for (n = t.length - 1; n >= 0; n--)
                  this.removeListener(e, t[n]);
              return this;
            }),
            (i.prototype.listeners = function (e) {
              return p(this, e, !0);
            }),
            (i.prototype.rawListeners = function (e) {
              return p(this, e, !1);
            }),
            (i.listenerCount = function (e, t) {
              return "function" == typeof e.listenerCount
                ? e.listenerCount(t)
                : h.call(e, t);
            }),
            (i.prototype.listenerCount = h),
            (i.prototype.eventNames = function () {
              return this._eventsCount > 0 ? t(this._events) : [];
            });
        },
        7855: (e, t, r) => {
          const n = r(1227)("h264-profile-level-id");
          n.log = console.info.bind(console);
          (t.ProfileConstrainedBaseline = 1),
            (t.ProfileBaseline = 2),
            (t.ProfileMain = 3),
            (t.ProfileConstrainedHigh = 4),
            (t.ProfileHigh = 5);
          const a = 10;
          (t.Level1_b = 0),
            (t.Level1 = 10),
            (t.Level1_1 = 11),
            (t.Level1_2 = 12),
            (t.Level1_3 = 13),
            (t.Level2 = 20),
            (t.Level2_1 = 21),
            (t.Level2_2 = 22),
            (t.Level3 = 30),
            (t.Level3_1 = 31),
            (t.Level3_2 = 32),
            (t.Level4 = 40),
            (t.Level4_1 = 41),
            (t.Level4_2 = 42),
            (t.Level5 = 50),
            (t.Level5_1 = 51),
            (t.Level5_2 = 52);
          class i {
            constructor(e, t) {
              (this.profile = e), (this.level = t);
            }
          }
          t.ProfileLevelId = i;
          const s = new i(1, 31);
          class o {
            constructor(e) {
              (this._mask = ~u("x", e)), (this._maskedValue = u("1", e));
            }
            isMatch(e) {
              return this._maskedValue === (e & this._mask);
            }
          }
          class c {
            constructor(e, t, r) {
              (this.profile_idc = e),
                (this.profile_iop = t),
                (this.profile = r);
            }
          }
          const d = [
            new c(66, new o("x1xx0000"), 1),
            new c(77, new o("1xxx0000"), 1),
            new c(88, new o("11xx0000"), 1),
            new c(66, new o("x0xx0000"), 2),
            new c(88, new o("10xx0000"), 2),
            new c(77, new o("0x0x0000"), 3),
            new c(100, new o("00000000"), 5),
            new c(100, new o("00001100"), 4),
          ];
          function u(e, t) {
            return (
              ((t[0] === e) << 7) |
              ((t[1] === e) << 6) |
              ((t[2] === e) << 5) |
              ((t[3] === e) << 4) |
              ((t[4] === e) << 3) |
              ((t[5] === e) << 2) |
              ((t[6] === e) << 1) |
              ((t[7] === e) << 0)
            );
          }
          function l(e = {}) {
            const t = e["level-asymmetry-allowed"];
            return 1 === t || "1" === t;
          }
          (t.parseProfileLevelId = function (e) {
            if ("string" != typeof e || 6 !== e.length) return null;
            const t = parseInt(e, 16);
            if (0 === t) return null;
            const r = 255 & t,
              a = (t >> 8) & 255,
              s = (t >> 16) & 255;
            let o;
            switch (r) {
              case 11:
                o = 0 != (16 & a) ? 0 : 11;
                break;
              case 10:
              case 12:
              case 13:
              case 20:
              case 21:
              case 22:
              case 30:
              case 31:
              case 32:
              case 40:
              case 41:
              case 42:
              case 50:
              case 51:
              case 52:
                o = r;
                break;
              default:
                return (
                  n("parseProfileLevelId() | unrecognized level_idc:%s", r),
                  null
                );
            }
            for (const e of d)
              if (s === e.profile_idc && e.profile_iop.isMatch(a))
                return new i(e.profile, o);
            return (
              n(
                "parseProfileLevelId() | unrecognized profile_idc/profile_iop combination"
              ),
              null
            );
          }),
            (t.profileLevelIdToString = function (e) {
              if (0 == e.level)
                switch (e.profile) {
                  case 1:
                    return "42f00b";
                  case 2:
                    return "42100b";
                  case 3:
                    return "4d100b";
                  default:
                    return (
                      n(
                        "profileLevelIdToString() | Level 1_b not is allowed for profile:%s",
                        e.profile
                      ),
                      null
                    );
                }
              let t;
              switch (e.profile) {
                case 1:
                  t = "42e0";
                  break;
                case 2:
                  t = "4200";
                  break;
                case 3:
                  t = "4d00";
                  break;
                case 4:
                  t = "640c";
                  break;
                case 5:
                  t = "6400";
                  break;
                default:
                  return (
                    n(
                      "profileLevelIdToString() | unrecognized profile:%s",
                      e.profile
                    ),
                    null
                  );
              }
              let r = e.level.toString(16);
              return 1 === r.length && (r = `0${r}`), `${t}${r}`;
            }),
            (t.parseSdpProfileLevelId = function (e = {}) {
              const r = e["profile-level-id"];
              return r ? t.parseProfileLevelId(r) : s;
            }),
            (t.isSameProfile = function (e = {}, r = {}) {
              const n = t.parseSdpProfileLevelId(e),
                a = t.parseSdpProfileLevelId(r);
              return Boolean(n && a && n.profile === a.profile);
            }),
            (t.generateProfileLevelIdForAnswer = function (e = {}, r = {}) {
              if (!e["profile-level-id"] && !r["profile-level-id"])
                return (
                  n(
                    "generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params"
                  ),
                  null
                );
              const s = t.parseSdpProfileLevelId(e),
                o = t.parseSdpProfileLevelId(r);
              if (!s) throw new TypeError("invalid local_profile_level_id");
              if (!o) throw new TypeError("invalid remote_profile_level_id");
              if (s.profile !== o.profile)
                throw new TypeError("H264 Profile mismatch");
              const c = l(e) && l(r),
                d = s.level,
                u = o.level,
                p = (function (e, t) {
                  return 0 === e
                    ? t !== a && 0 !== t
                    : 0 === t
                    ? e !== a
                    : e < t;
                })((h = d), (_ = u))
                  ? h
                  : _;
              var h, _;
              const f = c ? d : p;
              return (
                n(
                  "generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]",
                  s.profile,
                  f
                ),
                t.profileLevelIdToString(new i(s.profile, f))
              );
            });
        },
        6808: (e, t, r) => {
          var n, a;
          !(function (i) {
            if (
              (void 0 ===
                (a = "function" == typeof (n = i) ? n.call(t, r, t, e) : n) ||
                (e.exports = a),
              !0,
              (e.exports = i()),
              !!0)
            ) {
              var s = window.Cookies,
                o = (window.Cookies = i());
              o.noConflict = function () {
                return (window.Cookies = s), o;
              };
            }
          })(function () {
            function e() {
              for (var e = 0, t = {}; e < arguments.length; e++) {
                var r = arguments[e];
                for (var n in r) t[n] = r[n];
              }
              return t;
            }
            function t(e) {
              return e.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
            }
            return (function r(n) {
              function a() {}
              function i(t, r, i) {
                if ("undefined" != typeof document) {
                  "number" ==
                    typeof (i = e({ path: "/" }, a.defaults, i)).expires &&
                    (i.expires = new Date(1 * new Date() + 864e5 * i.expires)),
                    (i.expires = i.expires ? i.expires.toUTCString() : "");
                  try {
                    var s = JSON.stringify(r);
                    /^[\{\[]/.test(s) && (r = s);
                  } catch (e) {}
                  (r = n.write
                    ? n.write(r, t)
                    : encodeURIComponent(String(r)).replace(
                        /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                        decodeURIComponent
                      )),
                    (t = encodeURIComponent(String(t))
                      .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                      .replace(/[\(\)]/g, escape));
                  var o = "";
                  for (var c in i)
                    i[c] &&
                      ((o += "; " + c),
                      !0 !== i[c] && (o += "=" + i[c].split(";")[0]));
                  return (document.cookie = t + "=" + r + o);
                }
              }
              function s(e, r) {
                if ("undefined" != typeof document) {
                  for (
                    var a = {},
                      i = document.cookie ? document.cookie.split("; ") : [],
                      s = 0;
                    s < i.length;
                    s++
                  ) {
                    var o = i[s].split("="),
                      c = o.slice(1).join("=");
                    r || '"' !== c.charAt(0) || (c = c.slice(1, -1));
                    try {
                      var d = t(o[0]);
                      if (((c = (n.read || n)(c, d) || t(c)), r))
                        try {
                          c = JSON.parse(c);
                        } catch (e) {}
                      if (((a[d] = c), e === d)) break;
                    } catch (e) {}
                  }
                  return e ? a[e] : a;
                }
              }
              return (
                (a.set = i),
                (a.get = function (e) {
                  return s(e, !1);
                }),
                (a.getJSON = function (e) {
                  return s(e, !0);
                }),
                (a.remove = function (t, r) {
                  i(t, "", e(r, { expires: -1 }));
                }),
                (a.defaults = {}),
                (a.withConverter = r),
                a
              );
            })(function () {});
          });
        },
        9514: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Consumer = void 0);
          const n = r(8562),
            a = r(4493),
            i = r(9992),
            s = new n.Logger("Consumer");
          class o extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              producerId: r,
              rtpReceiver: n,
              track: i,
              rtpParameters: o,
              appData: c,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._producerId = r),
                (this._rtpReceiver = n),
                (this._track = i),
                (this._rtpParameters = o),
                (this._paused = !i.enabled),
                (this._appData = c),
                (this._onTrackEnded = this._onTrackEnded.bind(this)),
                this._handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get producerId() {
              return this._producerId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._track.kind;
            }
            get rtpReceiver() {
              return this._rtpReceiver;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new i.InvalidStateError("closed");
              return this.safeEmitAsPromise("@getstats");
            }
            pause() {
              s.debug("pause()"),
                this._closed
                  ? s.error("pause() | Consumer closed")
                  : ((this._paused = !0),
                    (this._track.enabled = !1),
                    this.emit("@pause"),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              s.debug("resume()"),
                this._closed
                  ? s.error("resume() | Consumer closed")
                  : ((this._paused = !1),
                    (this._track.enabled = !0),
                    this.emit("@resume"),
                    this._observer.safeEmit("resume"));
            }
            _onTrackEnded() {
              s.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            _handleTrack() {
              this._track.addEventListener("ended", this._onTrackEnded);
            }
            _destroyTrack() {
              try {
                this._track.removeEventListener("ended", this._onTrackEnded),
                  this._track.stop();
              } catch (e) {}
            }
          }
          t.Consumer = o;
        },
        1623: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataConsumer = void 0);
          const n = r(8562),
            a = r(4493),
            i = new n.Logger("DataConsumer");
          class s extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              dataProducerId: t,
              dataChannel: r,
              sctpStreamParameters: n,
              appData: s,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                i.debug("constructor()"),
                (this._id = e),
                (this._dataProducerId = t),
                (this._dataChannel = r),
                (this._sctpStreamParameters = n),
                (this._appData = s),
                this._handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get dataProducerId() {
              return this._dataProducerId;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get binaryType() {
              return this._dataChannel.binaryType;
            }
            set binaryType(e) {
              this._dataChannel.binaryType = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (i.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (i.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            _handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (i.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? i.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : i.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (i.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", (e) => {
                  this._closed || this.safeEmit("message", e.data);
                });
            }
          }
          t.DataConsumer = s;
        },
        5504: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.DataProducer = void 0);
          const n = r(8562),
            a = r(4493),
            i = r(9992),
            s = new n.Logger("DataProducer");
          class o extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              dataChannel: t,
              sctpStreamParameters: r,
              appData: n,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._dataChannel = t),
                (this._sctpStreamParameters = r),
                (this._appData = n),
                this._handleDataChannel();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get sctpStreamParameters() {
              return this._sctpStreamParameters;
            }
            get readyState() {
              return this._dataChannel.readyState;
            }
            get label() {
              return this._dataChannel.label;
            }
            get protocol() {
              return this._dataChannel.protocol;
            }
            get bufferedAmount() {
              return this._dataChannel.bufferedAmount;
            }
            get bufferedAmountLowThreshold() {
              return this._dataChannel.bufferedAmountLowThreshold;
            }
            set bufferedAmountLowThreshold(e) {
              this._dataChannel.bufferedAmountLowThreshold = e;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._dataChannel.close(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            send(e) {
              if ((s.debug("send()"), this._closed))
                throw new i.InvalidStateError("closed");
              this._dataChannel.send(e);
            }
            _handleDataChannel() {
              this._dataChannel.addEventListener("open", () => {
                this._closed ||
                  (s.debug('DataChannel "open" event'), this.safeEmit("open"));
              }),
                this._dataChannel.addEventListener("error", (e) => {
                  if (this._closed) return;
                  let { error: t } = e;
                  t || (t = new Error("unknown DataChannel error")),
                    "sctp-failure" === t.errorDetail
                      ? s.error(
                          "DataChannel SCTP error [sctpCauseCode:%s]: %s",
                          t.sctpCauseCode,
                          t.message
                        )
                      : s.error('DataChannel "error" event: %o', t),
                    this.safeEmit("error", t);
                }),
                this._dataChannel.addEventListener("close", () => {
                  this._closed ||
                    (s.warn('DataChannel "close" event'),
                    (this._closed = !0),
                    this.emit("@close"),
                    this.safeEmit("close"));
                }),
                this._dataChannel.addEventListener("message", () => {
                  this._closed ||
                    s.warn(
                      'DataChannel "message" event in a DataProducer, message discarded'
                    );
                }),
                this._dataChannel.addEventListener("bufferedamountlow", () => {
                  this._closed || this.safeEmit("bufferedamountlow");
                });
            }
          }
          t.DataProducer = o;
        },
        3120: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              },
            s =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Device = t.detectDevice = void 0);
          const o = s(r(1206)),
            c = r(8562),
            d = r(4493),
            u = r(9992),
            l = i(r(3347)),
            p = i(r(5280)),
            h = r(5202),
            _ = r(6656),
            f = r(5372),
            m = r(5697),
            v = r(564),
            g = r(1419),
            y = r(9862),
            b = r(2205),
            x = r(7392),
            E = r(4770),
            T = new c.Logger("Device");
          function S() {
            if (
              "object" == typeof navigator &&
              "ReactNative" === navigator.product
            )
              return "undefined" == typeof RTCPeerConnection
                ? void T.warn(
                    "this._detectDevice() | unsupported ReactNative without RTCPeerConnection"
                  )
                : (T.debug("this._detectDevice() | ReactNative handler chosen"),
                  "ReactNative");
            if (
              "object" != typeof navigator ||
              "string" != typeof navigator.userAgent
            )
              T.warn("this._detectDevice() | unknown device");
            else {
              const e = navigator.userAgent,
                t = o.default.getParser(e),
                r = t.getEngine();
              if (
                t.satisfies({
                  chrome: ">=74",
                  chromium: ">=74",
                  "microsoft edge": ">=88",
                })
              )
                return "Chrome74";
              if (t.satisfies({ chrome: ">=70", chromium: ">=70" }))
                return "Chrome70";
              if (t.satisfies({ chrome: ">=67", chromium: ">=67" }))
                return "Chrome67";
              if (t.satisfies({ chrome: ">=55", chromium: ">=55" }))
                return "Chrome55";
              if (t.satisfies({ firefox: ">=60" })) return "Firefox60";
              if (t.satisfies({ ios: { OS: ">=14.3", firefox: ">=30.0" } }))
                return "Safari12";
              if (
                t.satisfies({ safari: ">=12.0" }) &&
                "undefined" != typeof RTCRtpTransceiver &&
                RTCRtpTransceiver.prototype.hasOwnProperty("currentDirection")
              )
                return "Safari12";
              if (t.satisfies({ safari: ">=11" })) return "Safari11";
              if (
                t.satisfies({ "microsoft edge": ">=11" }) &&
                t.satisfies({ "microsoft edge": "<=18" })
              )
                return "Edge11";
              if (r.name && "blink" === r.name.toLowerCase()) {
                const t = e.match(/(?:(?:Chrome|Chromium))[ /](\w+)/i);
                if (t) {
                  const e = Number(t[1]);
                  return e >= 74
                    ? "Chrome74"
                    : e >= 70
                    ? "Chrome70"
                    : e >= 67
                    ? "Chrome67"
                    : "Chrome55";
                }
                return "Chrome74";
              }
              T.warn(
                "this._detectDevice() | browser not supported [name:%s, version:%s]",
                t.getBrowserName(),
                t.getBrowserVersion()
              );
            }
          }
          t.detectDevice = S;
          t.Device = class {
            constructor({
              handlerName: e,
              handlerFactory: t,
              Handler: r,
            } = {}) {
              if (
                ((this._loaded = !1),
                (this._observer = new d.EnhancedEventEmitter()),
                T.debug("constructor()"),
                r)
              ) {
                if (
                  (T.warn(
                    "constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead"
                  ),
                  "string" != typeof r)
                )
                  throw new TypeError(
                    "non string Handler option no longer supported, use handlerFactory instead"
                  );
                e = r;
              }
              if (e && t)
                throw new TypeError(
                  "just one of handlerName or handlerInterface can be given"
                );
              if (t) this._handlerFactory = t;
              else {
                if (e) T.debug("constructor() | handler given: %s", e);
                else {
                  if (!(e = S()))
                    throw new u.UnsupportedError("device not supported");
                  T.debug("constructor() | detected handler: %s", e);
                }
                switch (e) {
                  case "Chrome74":
                    this._handlerFactory = _.Chrome74.createFactory();
                    break;
                  case "Chrome70":
                    this._handlerFactory = f.Chrome70.createFactory();
                    break;
                  case "Chrome67":
                    this._handlerFactory = m.Chrome67.createFactory();
                    break;
                  case "Chrome55":
                    this._handlerFactory = v.Chrome55.createFactory();
                    break;
                  case "Firefox60":
                    this._handlerFactory = g.Firefox60.createFactory();
                    break;
                  case "Safari12":
                    this._handlerFactory = y.Safari12.createFactory();
                    break;
                  case "Safari11":
                    this._handlerFactory = b.Safari11.createFactory();
                    break;
                  case "Edge11":
                    this._handlerFactory = x.Edge11.createFactory();
                    break;
                  case "ReactNative":
                    this._handlerFactory = E.ReactNative.createFactory();
                    break;
                  default:
                    throw new TypeError(`unknown handlerName "${e}"`);
                }
              }
              const n = this._handlerFactory();
              (this._handlerName = n.name),
                n.close(),
                (this._extendedRtpCapabilities = void 0),
                (this._recvRtpCapabilities = void 0),
                (this._canProduceByKind = { audio: !1, video: !1 }),
                (this._sctpCapabilities = void 0);
            }
            get handlerName() {
              return this._handlerName;
            }
            get loaded() {
              return this._loaded;
            }
            get rtpCapabilities() {
              if (!this._loaded) throw new u.InvalidStateError("not loaded");
              return this._recvRtpCapabilities;
            }
            get sctpCapabilities() {
              if (!this._loaded) throw new u.InvalidStateError("not loaded");
              return this._sctpCapabilities;
            }
            get observer() {
              return this._observer;
            }
            async load({ routerRtpCapabilities: e }) {
              let t;
              T.debug("load() [routerRtpCapabilities:%o]", e),
                (e = l.clone(e, void 0));
              try {
                if (this._loaded)
                  throw new u.InvalidStateError("already loaded");
                p.validateRtpCapabilities(e), (t = this._handlerFactory());
                const r = await t.getNativeRtpCapabilities();
                T.debug("load() | got native RTP capabilities:%o", r),
                  p.validateRtpCapabilities(r),
                  (this._extendedRtpCapabilities = p.getExtendedRtpCapabilities(
                    r,
                    e
                  )),
                  T.debug(
                    "load() | got extended RTP capabilities:%o",
                    this._extendedRtpCapabilities
                  ),
                  (this._canProduceByKind.audio = p.canSend(
                    "audio",
                    this._extendedRtpCapabilities
                  )),
                  (this._canProduceByKind.video = p.canSend(
                    "video",
                    this._extendedRtpCapabilities
                  )),
                  (this._recvRtpCapabilities = p.getRecvRtpCapabilities(
                    this._extendedRtpCapabilities
                  )),
                  p.validateRtpCapabilities(this._recvRtpCapabilities),
                  T.debug(
                    "load() | got receiving RTP capabilities:%o",
                    this._recvRtpCapabilities
                  ),
                  (this._sctpCapabilities =
                    await t.getNativeSctpCapabilities()),
                  T.debug(
                    "load() | got native SCTP capabilities:%o",
                    this._sctpCapabilities
                  ),
                  p.validateSctpCapabilities(this._sctpCapabilities),
                  T.debug("load() succeeded"),
                  (this._loaded = !0),
                  t.close();
              } catch (e) {
                throw (t && t.close(), e);
              }
            }
            canProduce(e) {
              if (!this._loaded) throw new u.InvalidStateError("not loaded");
              if ("audio" !== e && "video" !== e)
                throw new TypeError(`invalid kind "${e}"`);
              return this._canProduceByKind[e];
            }
            createSendTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d = {},
            }) {
              return (
                T.debug("createSendTransport()"),
                this._createTransport({
                  direction: "send",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  iceServers: i,
                  iceTransportPolicy: s,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            createRecvTransport({
              id: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              appData: d = {},
            }) {
              return (
                T.debug("createRecvTransport()"),
                this._createTransport({
                  direction: "recv",
                  id: e,
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  iceServers: i,
                  iceTransportPolicy: s,
                  additionalSettings: o,
                  proprietaryConstraints: c,
                  appData: d,
                })
              );
            }
            _createTransport({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: n,
              dtlsParameters: a,
              sctpParameters: i,
              iceServers: s,
              iceTransportPolicy: o,
              additionalSettings: c,
              proprietaryConstraints: d,
              appData: l = {},
            }) {
              if (!this._loaded) throw new u.InvalidStateError("not loaded");
              if ("string" != typeof t) throw new TypeError("missing id");
              if ("object" != typeof r)
                throw new TypeError("missing iceParameters");
              if (!Array.isArray(n))
                throw new TypeError("missing iceCandidates");
              if ("object" != typeof a)
                throw new TypeError("missing dtlsParameters");
              if (i && "object" != typeof i)
                throw new TypeError("wrong sctpParameters");
              if (l && "object" != typeof l)
                throw new TypeError("if given, appData must be an object");
              const p = new h.Transport({
                direction: e,
                id: t,
                iceParameters: r,
                iceCandidates: n,
                dtlsParameters: a,
                sctpParameters: i,
                iceServers: s,
                iceTransportPolicy: o,
                additionalSettings: c,
                proprietaryConstraints: d,
                appData: l,
                handlerFactory: this._handlerFactory,
                extendedRtpCapabilities: this._extendedRtpCapabilities,
                canProduceByKind: this._canProduceByKind,
              });
              return this._observer.safeEmit("newtransport", p), p;
            }
          };
        },
        4493: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.EnhancedEventEmitter = void 0);
          const n = r(7187),
            a = new (r(8562).Logger)("EnhancedEventEmitter");
          class i extends n.EventEmitter {
            constructor() {
              super(), this.setMaxListeners(1 / 0);
            }
            safeEmit(e, ...t) {
              const r = this.listenerCount(e);
              try {
                return this.emit(e, ...t);
              } catch (t) {
                return (
                  a.error(
                    "safeEmit() | event listener threw an error [event:%s]:%o",
                    e,
                    t
                  ),
                  Boolean(r)
                );
              }
            }
            async safeEmitAsPromise(e, ...t) {
              return new Promise((r, n) => {
                try {
                  this.emit(e, ...t, r, n);
                } catch (t) {
                  a.error(
                    "safeEmitAsPromise() | event listener threw an error [event:%s]:%o",
                    e,
                    t
                  ),
                    n(t);
                }
              });
            }
          }
          t.EnhancedEventEmitter = i;
        },
        8562: function (e, t, r) {
          "use strict";
          var n =
            (this && this.__importDefault) ||
            function (e) {
              return e && e.__esModule ? e : { default: e };
            };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Logger = void 0);
          const a = n(r(1227)),
            i = "mediasoup-client";
          t.Logger = class {
            constructor(e) {
              e
                ? ((this._debug = (0, a.default)(`${i}:${e}`)),
                  (this._warn = (0, a.default)(`${i}:WARN:${e}`)),
                  (this._error = (0, a.default)(`${i}:ERROR:${e}`)))
                : ((this._debug = (0, a.default)(i)),
                  (this._warn = (0, a.default)(`${i}:WARN`)),
                  (this._error = (0, a.default)(`${i}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        6569: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Producer = void 0);
          const n = r(8562),
            a = r(4493),
            i = r(9992),
            s = new n.Logger("Producer");
          class o extends a.EnhancedEventEmitter {
            constructor({
              id: e,
              localId: t,
              rtpSender: r,
              track: n,
              rtpParameters: i,
              stopTracks: o,
              disableTrackOnPause: c,
              zeroRtpOnPause: d,
              appData: u,
            }) {
              super(),
                (this._closed = !1),
                (this._observer = new a.EnhancedEventEmitter()),
                s.debug("constructor()"),
                (this._id = e),
                (this._localId = t),
                (this._rtpSender = r),
                (this._track = n),
                (this._kind = n.kind),
                (this._rtpParameters = i),
                (this._paused = !!c && !n.enabled),
                (this._maxSpatialLayer = void 0),
                (this._stopTracks = o),
                (this._disableTrackOnPause = c),
                (this._zeroRtpOnPause = d),
                (this._appData = u),
                (this._onTrackEnded = this._onTrackEnded.bind(this)),
                this._handleTrack();
            }
            get id() {
              return this._id;
            }
            get localId() {
              return this._localId;
            }
            get closed() {
              return this._closed;
            }
            get kind() {
              return this._kind;
            }
            get rtpSender() {
              return this._rtpSender;
            }
            get track() {
              return this._track;
            }
            get rtpParameters() {
              return this._rtpParameters;
            }
            get paused() {
              return this._paused;
            }
            get maxSpatialLayer() {
              return this._maxSpatialLayer;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              this._closed ||
                (s.debug("close()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.emit("@close"),
                this._observer.safeEmit("close"));
            }
            transportClosed() {
              this._closed ||
                (s.debug("transportClosed()"),
                (this._closed = !0),
                this._destroyTrack(),
                this.safeEmit("transportclose"),
                this._observer.safeEmit("close"));
            }
            async getStats() {
              if (this._closed) throw new i.InvalidStateError("closed");
              return this.safeEmitAsPromise("@getstats");
            }
            pause() {
              s.debug("pause()"),
                this._closed
                  ? s.error("pause() | Producer closed")
                  : ((this._paused = !0),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !1),
                    this._zeroRtpOnPause &&
                      this.safeEmitAsPromise("@replacetrack", null).catch(
                        () => {}
                      ),
                    this._observer.safeEmit("pause"));
            }
            resume() {
              s.debug("resume()"),
                this._closed
                  ? s.error("resume() | Producer closed")
                  : ((this._paused = !1),
                    this._track &&
                      this._disableTrackOnPause &&
                      (this._track.enabled = !0),
                    this._zeroRtpOnPause &&
                      this.safeEmitAsPromise(
                        "@replacetrack",
                        this._track
                      ).catch(() => {}),
                    this._observer.safeEmit("resume"));
            }
            async replaceTrack({ track: e }) {
              if ((s.debug("replaceTrack() [track:%o]", e), this._closed)) {
                if (e && this._stopTracks)
                  try {
                    e.stop();
                  } catch (e) {}
                throw new i.InvalidStateError("closed");
              }
              if (e && "ended" === e.readyState)
                throw new i.InvalidStateError("track ended");
              e !== this._track
                ? ((this._zeroRtpOnPause && this._paused) ||
                    (await this.safeEmitAsPromise("@replacetrack", e)),
                  this._destroyTrack(),
                  (this._track = e),
                  this._track &&
                    this._disableTrackOnPause &&
                    (this._paused
                      ? this._paused && (this._track.enabled = !1)
                      : (this._track.enabled = !0)),
                  this._handleTrack())
                : s.debug("replaceTrack() | same track, ignored");
            }
            async setMaxSpatialLayer(e) {
              if (this._closed) throw new i.InvalidStateError("closed");
              if ("video" !== this._kind)
                throw new i.UnsupportedError("not a video Producer");
              if ("number" != typeof e)
                throw new TypeError("invalid spatialLayer");
              e !== this._maxSpatialLayer &&
                (await this.safeEmitAsPromise("@setmaxspatiallayer", e),
                (this._maxSpatialLayer = e));
            }
            async setRtpEncodingParameters(e) {
              if (this._closed) throw new i.InvalidStateError("closed");
              if ("object" != typeof e) throw new TypeError("invalid params");
              await this.safeEmitAsPromise("@setrtpencodingparameters", e);
            }
            _onTrackEnded() {
              s.debug('track "ended" event'),
                this.safeEmit("trackended"),
                this._observer.safeEmit("trackended");
            }
            _handleTrack() {
              this._track &&
                this._track.addEventListener("ended", this._onTrackEnded);
            }
            _destroyTrack() {
              if (this._track)
                try {
                  this._track.removeEventListener("ended", this._onTrackEnded),
                    this._stopTracks && this._track.stop();
                } catch (e) {}
            }
          }
          t.Producer = o;
        },
        4879: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        7669: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 });
        },
        5202: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Transport = void 0);
          const s = r(2186),
            o = r(8562),
            c = r(4493),
            d = r(9992),
            u = i(r(3347)),
            l = i(r(5280)),
            p = r(6569),
            h = r(9514),
            _ = r(5504),
            f = r(1623),
            m = new o.Logger("Transport");
          class v extends c.EnhancedEventEmitter {
            constructor({
              direction: e,
              id: t,
              iceParameters: r,
              iceCandidates: n,
              dtlsParameters: a,
              sctpParameters: i,
              iceServers: o,
              iceTransportPolicy: l,
              additionalSettings: p,
              proprietaryConstraints: h,
              appData: _,
              handlerFactory: f,
              extendedRtpCapabilities: v,
              canProduceByKind: g,
            }) {
              super(),
                (this._closed = !1),
                (this._connectionState = "new"),
                (this._producers = new Map()),
                (this._consumers = new Map()),
                (this._dataProducers = new Map()),
                (this._dataConsumers = new Map()),
                (this._probatorConsumerCreated = !1),
                (this._awaitQueue = new s.AwaitQueue({
                  ClosedErrorClass: d.InvalidStateError,
                })),
                (this._observer = new c.EnhancedEventEmitter()),
                m.debug("constructor() [id:%s, direction:%s]", t, e),
                (this._id = t),
                (this._direction = e),
                (this._extendedRtpCapabilities = v),
                (this._canProduceByKind = g),
                (this._maxSctpMessageSize = i ? i.maxMessageSize : null),
                delete (p = u.clone(p, {})).iceServers,
                delete p.iceTransportPolicy,
                delete p.bundlePolicy,
                delete p.rtcpMuxPolicy,
                delete p.sdpSemantics,
                (this._handler = f()),
                this._handler.run({
                  direction: e,
                  iceParameters: r,
                  iceCandidates: n,
                  dtlsParameters: a,
                  sctpParameters: i,
                  iceServers: o,
                  iceTransportPolicy: l,
                  additionalSettings: p,
                  proprietaryConstraints: h,
                  extendedRtpCapabilities: v,
                }),
                (this._appData = _),
                this._handleHandler();
            }
            get id() {
              return this._id;
            }
            get closed() {
              return this._closed;
            }
            get direction() {
              return this._direction;
            }
            get handler() {
              return this._handler;
            }
            get connectionState() {
              return this._connectionState;
            }
            get appData() {
              return this._appData;
            }
            set appData(e) {
              throw new Error("cannot override appData object");
            }
            get observer() {
              return this._observer;
            }
            close() {
              if (!this._closed) {
                m.debug("close()"),
                  (this._closed = !0),
                  this._awaitQueue.close(),
                  this._handler.close();
                for (const e of this._producers.values()) e.transportClosed();
                this._producers.clear();
                for (const e of this._consumers.values()) e.transportClosed();
                this._consumers.clear();
                for (const e of this._dataProducers.values())
                  e.transportClosed();
                this._dataProducers.clear();
                for (const e of this._dataConsumers.values())
                  e.transportClosed();
                this._dataConsumers.clear(), this._observer.safeEmit("close");
              }
            }
            async getStats() {
              if (this._closed) throw new d.InvalidStateError("closed");
              return this._handler.getTransportStats();
            }
            async restartIce({ iceParameters: e }) {
              if ((m.debug("restartIce()"), this._closed))
                throw new d.InvalidStateError("closed");
              if (!e) throw new TypeError("missing iceParameters");
              return this._awaitQueue.push(
                async () => this._handler.restartIce(e),
                "transport.restartIce()"
              );
            }
            async updateIceServers({ iceServers: e } = {}) {
              if ((m.debug("updateIceServers()"), this._closed))
                throw new d.InvalidStateError("closed");
              if (!Array.isArray(e)) throw new TypeError("missing iceServers");
              return this._awaitQueue.push(
                async () => this._handler.updateIceServers(e),
                "transport.updateIceServers()"
              );
            }
            async produce({
              track: e,
              encodings: t,
              codecOptions: r,
              codec: n,
              stopTracks: a = !0,
              disableTrackOnPause: i = !0,
              zeroRtpOnPause: s = !1,
              appData: o = {},
            } = {}) {
              if ((m.debug("produce() [track:%o]", e), !e))
                throw new TypeError("missing track");
              if ("send" !== this._direction)
                throw new d.UnsupportedError("not a sending Transport");
              if (!this._canProduceByKind[e.kind])
                throw new d.UnsupportedError(`cannot produce ${e.kind}`);
              if ("ended" === e.readyState)
                throw new d.InvalidStateError("track ended");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("produce"))
                throw new TypeError(
                  'no "produce" listener set into this transport'
                );
              if (o && "object" != typeof o)
                throw new TypeError("if given, appData must be an object");
              return this._awaitQueue
                .push(async () => {
                  let c;
                  if (t && !Array.isArray(t))
                    throw TypeError("encodings must be an array");
                  t && 0 === t.length
                    ? (c = void 0)
                    : t &&
                      (c = t.map((e) => {
                        const t = { active: !0 };
                        return (
                          !1 === e.active && (t.active = !1),
                          "boolean" == typeof e.dtx && (t.dtx = e.dtx),
                          "string" == typeof e.scalabilityMode &&
                            (t.scalabilityMode = e.scalabilityMode),
                          "number" == typeof e.scaleResolutionDownBy &&
                            (t.scaleResolutionDownBy = e.scaleResolutionDownBy),
                          "number" == typeof e.maxBitrate &&
                            (t.maxBitrate = e.maxBitrate),
                          "number" == typeof e.maxFramerate &&
                            (t.maxFramerate = e.maxFramerate),
                          "boolean" == typeof e.adaptivePtime &&
                            (t.adaptivePtime = e.adaptivePtime),
                          "string" == typeof e.priority &&
                            (t.priority = e.priority),
                          "string" == typeof e.networkPriority &&
                            (t.networkPriority = e.networkPriority),
                          t
                        );
                      }));
                  const {
                    localId: d,
                    rtpParameters: u,
                    rtpSender: h,
                  } = await this._handler.send({
                    track: e,
                    encodings: c,
                    codecOptions: r,
                    codec: n,
                  });
                  try {
                    l.validateRtpParameters(u);
                    const { id: t } = await this.safeEmitAsPromise("produce", {
                        kind: e.kind,
                        rtpParameters: u,
                        appData: o,
                      }),
                      r = new p.Producer({
                        id: t,
                        localId: d,
                        rtpSender: h,
                        track: e,
                        rtpParameters: u,
                        stopTracks: a,
                        disableTrackOnPause: i,
                        zeroRtpOnPause: s,
                        appData: o,
                      });
                    return (
                      this._producers.set(r.id, r),
                      this._handleProducer(r),
                      this._observer.safeEmit("newproducer", r),
                      r
                    );
                  } catch (e) {
                    throw (this._handler.stopSending(d).catch(() => {}), e);
                  }
                }, "transport.produce()")
                .catch((t) => {
                  if (a)
                    try {
                      e.stop();
                    } catch (e) {}
                  throw t;
                });
            }
            async consume({
              id: e,
              producerId: t,
              kind: r,
              rtpParameters: n,
              appData: a = {},
            }) {
              if (
                (m.debug("consume()"), (n = u.clone(n, void 0)), this._closed)
              )
                throw new d.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new d.UnsupportedError("not a receiving Transport");
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing producerId");
              if ("audio" !== r && "video" !== r)
                throw new TypeError(`invalid kind '${r}'`);
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (a && "object" != typeof a)
                throw new TypeError("if given, appData must be an object");
              return this._awaitQueue.push(async () => {
                if (!l.canReceive(n, this._extendedRtpCapabilities))
                  throw new d.UnsupportedError("cannot consume this Producer");
                const {
                    localId: i,
                    rtpReceiver: s,
                    track: o,
                  } = await this._handler.receive({
                    trackId: e,
                    kind: r,
                    rtpParameters: n,
                  }),
                  c = new h.Consumer({
                    id: e,
                    localId: i,
                    producerId: t,
                    rtpReceiver: s,
                    track: o,
                    rtpParameters: n,
                    appData: a,
                  });
                if (
                  (this._consumers.set(c.id, c),
                  this._handleConsumer(c),
                  !this._probatorConsumerCreated && "video" === r)
                )
                  try {
                    const e = l.generateProbatorRtpParameters(c.rtpParameters);
                    await this._handler.receive({
                      trackId: "probator",
                      kind: "video",
                      rtpParameters: e,
                    }),
                      m.debug("consume() | Consumer for RTP probation created"),
                      (this._probatorConsumerCreated = !0);
                  } catch (e) {
                    m.error(
                      "consume() | failed to create Consumer for RTP probation:%o",
                      e
                    );
                  }
                return this._observer.safeEmit("newconsumer", c), c;
              }, "transport.consume()");
            }
            async produceData({
              ordered: e = !0,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n = "",
              protocol: a = "",
              appData: i = {},
            } = {}) {
              if ((m.debug("produceData()"), "send" !== this._direction))
                throw new d.UnsupportedError("not a sending Transport");
              if (!this._maxSctpMessageSize)
                throw new d.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (0 === this.listenerCount("producedata"))
                throw new TypeError(
                  'no "producedata" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              return (
                (t || r) && (e = !1),
                this._awaitQueue.push(async () => {
                  const { dataChannel: s, sctpStreamParameters: o } =
                    await this._handler.sendDataChannel({
                      ordered: e,
                      maxPacketLifeTime: t,
                      maxRetransmits: r,
                      label: n,
                      protocol: a,
                    });
                  l.validateSctpStreamParameters(o);
                  const { id: c } = await this.safeEmitAsPromise(
                      "producedata",
                      {
                        sctpStreamParameters: o,
                        label: n,
                        protocol: a,
                        appData: i,
                      }
                    ),
                    d = new _.DataProducer({
                      id: c,
                      dataChannel: s,
                      sctpStreamParameters: o,
                      appData: i,
                    });
                  return (
                    this._dataProducers.set(d.id, d),
                    this._handleDataProducer(d),
                    this._observer.safeEmit("newdataproducer", d),
                    d
                  );
                }, "transport.produceData()")
              );
            }
            async consumeData({
              id: e,
              dataProducerId: t,
              sctpStreamParameters: r,
              label: n = "",
              protocol: a = "",
              appData: i = {},
            }) {
              if (
                (m.debug("consumeData()"),
                (r = u.clone(r, void 0)),
                this._closed)
              )
                throw new d.InvalidStateError("closed");
              if ("recv" !== this._direction)
                throw new d.UnsupportedError("not a receiving Transport");
              if (!this._maxSctpMessageSize)
                throw new d.UnsupportedError(
                  "SCTP not enabled by remote Transport"
                );
              if ("string" != typeof e) throw new TypeError("missing id");
              if ("string" != typeof t)
                throw new TypeError("missing dataProducerId");
              if (
                0 === this.listenerCount("connect") &&
                "new" === this._connectionState
              )
                throw new TypeError(
                  'no "connect" listener set into this transport'
                );
              if (i && "object" != typeof i)
                throw new TypeError("if given, appData must be an object");
              return (
                l.validateSctpStreamParameters(r),
                this._awaitQueue.push(async () => {
                  const { dataChannel: s } =
                      await this._handler.receiveDataChannel({
                        sctpStreamParameters: r,
                        label: n,
                        protocol: a,
                      }),
                    o = new f.DataConsumer({
                      id: e,
                      dataProducerId: t,
                      dataChannel: s,
                      sctpStreamParameters: r,
                      appData: i,
                    });
                  return (
                    this._dataConsumers.set(o.id, o),
                    this._handleDataConsumer(o),
                    this._observer.safeEmit("newdataconsumer", o),
                    o
                  );
                }, "transport.consumeData()")
              );
            }
            _handleHandler() {
              const e = this._handler;
              e.on("@connect", ({ dtlsParameters: e }, t, r) => {
                this._closed
                  ? r(new d.InvalidStateError("closed"))
                  : this.safeEmit("connect", { dtlsParameters: e }, t, r);
              }),
                e.on("@connectionstatechange", (e) => {
                  e !== this._connectionState &&
                    (m.debug("connection state changed to %s", e),
                    (this._connectionState = e),
                    this._closed || this.safeEmit("connectionstatechange", e));
                });
            }
            _handleProducer(e) {
              e.on("@close", () => {
                this._producers.delete(e.id),
                  this._closed ||
                    this._awaitQueue
                      .push(
                        async () => this._handler.stopSending(e.localId),
                        "producer @close event"
                      )
                      .catch((e) => m.warn("producer.close() failed:%o", e));
              }),
                e.on("@replacetrack", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () => this._handler.replaceTrack(e.localId, t),
                      "producer @replacetrack event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@setmaxspatiallayer", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        this._handler.setMaxSpatialLayer(e.localId, t),
                      "producer @setmaxspatiallayer event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@setrtpencodingparameters", (t, r, n) => {
                  this._awaitQueue
                    .push(
                      async () =>
                        this._handler.setRtpEncodingParameters(e.localId, t),
                      "producer @setrtpencodingparameters event"
                    )
                    .then(r)
                    .catch(n);
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new d.InvalidStateError("closed"));
                  this._handler.getSenderStats(e.localId).then(t).catch(r);
                });
            }
            _handleConsumer(e) {
              e.on("@close", () => {
                this._consumers.delete(e.id),
                  this._closed ||
                    this._awaitQueue
                      .push(
                        async () => this._handler.stopReceiving(e.localId),
                        "consumer @close event"
                      )
                      .catch(() => {});
              }),
                e.on("@pause", () => {
                  this._awaitQueue
                    .push(
                      async () => this._handler.pauseReceiving(e.localId),
                      "consumer @pause event"
                    )
                    .catch(() => {});
                }),
                e.on("@resume", () => {
                  this._awaitQueue
                    .push(
                      async () => this._handler.resumeReceiving(e.localId),
                      "consumer @resume event"
                    )
                    .catch(() => {});
                }),
                e.on("@getstats", (t, r) => {
                  if (this._closed) return r(new d.InvalidStateError("closed"));
                  this._handler.getReceiverStats(e.localId).then(t).catch(r);
                });
            }
            _handleDataProducer(e) {
              e.on("@close", () => {
                this._dataProducers.delete(e.id);
              });
            }
            _handleDataConsumer(e) {
              e.on("@close", () => {
                this._dataConsumers.delete(e.id);
              });
            }
          }
          t.Transport = v;
        },
        9992: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.InvalidStateError = t.UnsupportedError = void 0);
          class r extends Error {
            constructor(e) {
              super(e),
                (this.name = "UnsupportedError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, r)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.UnsupportedError = r;
          class n extends Error {
            constructor(e) {
              super(e),
                (this.name = "InvalidStateError"),
                Error.hasOwnProperty("captureStackTrace")
                  ? Error.captureStackTrace(this, n)
                  : (this.stack = new Error(e).stack);
            }
          }
          t.InvalidStateError = n;
        },
        564: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome55 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(9992),
            d = i(r(3347)),
            u = i(r(5280)),
            l = i(r(2267)),
            p = i(r(9875)),
            h = r(9316),
            _ = r(7910),
            f = new o.Logger("Chrome55"),
            m = { OS: 1024, MIS: 1024 };
          class v extends h.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Chrome55";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: m };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new _.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: u.getSendingRtpParameters("audio", d),
                  video: u.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: u.getSendingRemoteRtpParameters("audio", d),
                  video: u.getSendingRemoteRtpParameters("video", d),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                c = s.parse(o.sdp);
              const h = d.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = u.reduceCodecs(h.codecs);
              const _ = d.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((_.codecs = u.reduceCodecs(_.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: c,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (c = s.parse(o.sdp)),
                  (i = c.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(c) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (c = s.parse(this._pc.localDescription.sdp)),
                (i = c.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = l.getCname({ offerMediaObject: i })),
                (h.encodings = p.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                "video/vp8" === h.codecs[0].mimeType.toLowerCase()
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: _,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const v = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(v, e),
                { localId: v, rtpParameters: h }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError(" not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not supported");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % m.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t,
                o = r.rtcp.cname;
              this._remoteSdp.receive({
                mid: i,
                kind: t,
                offerRtpParameters: r,
                streamId: o,
                trackId: e,
              });
              const c = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                c
              ),
                await this._pc.setRemoteDescription(c);
              let d = await this._pc.createAnswer();
              const u = s.parse(d.sdp),
                p = u.media.find((e) => String(e.mid) === i);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: p,
              }),
                (d = { type: "answer", sdp: s.write(u) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: u,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  d
                ),
                await this._pc.setLocalDescription(d);
              const h = this._pc
                .getRemoteStreams()
                .find((e) => e.id === o)
                .getTrackById(a);
              if (!h) throw new Error("remote track not found");
              return (
                this._mapRecvLocalIdInfo.set(a, { mid: i, rtpParameters: r }),
                { localId: a, track: h }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome55 = v;
        },
        5697: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome67 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            u = i(r(2267)),
            l = i(r(9875)),
            p = r(9316),
            h = r(7910),
            _ = new o.Logger("Chrome67"),
            f = { OS: 1024, MIS: 1024 };
          class m extends p.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new m();
            }
            get name() {
              return "Chrome67";
            }
            close() {
              if ((_.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: u,
            }) {
              _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", u),
                  video: d.getSendingRemoteRtpParameters("video", u),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (_.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  _.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                p = s.parse(o.sdp);
              const h = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = d.reduceCodecs(h.codecs);
              const f = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((f.codecs = d.reduceCodecs(f.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: p,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (_.debug("send() | enabling simulcast"),
                  (p = s.parse(o.sdp)),
                  (i = p.media.find((e) => "video" === e.type)),
                  l.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(p) })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (p = s.parse(this._pc.localDescription.sdp)),
                (i = p.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = u.getCname({ offerMediaObject: i })),
                (h.encodings = l.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                "video/vp8" === h.codecs[0].mimeType.toLowerCase()
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: f,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const v = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const g = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(v, g),
                { localId: v, rtpParameters: h, rtpSender: g }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                _.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              this._pc.removeTrack(t),
                t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void _.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.track;
              await r.replaceTrack(t),
                n && this._sendStream.removeTrack(n),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              _.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                _.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t;
              this._remoteSdp.receive({
                mid: i,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const o = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                o
              ),
                await this._pc.setRemoteDescription(o);
              let c = await this._pc.createAnswer();
              const d = s.parse(c.sdp),
                l = d.media.find((e) => String(e.mid) === i);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: l,
              }),
                (c = { type: "answer", sdp: s.write(d) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: d,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  c
                ),
                await this._pc.setLocalDescription(c);
              const p = this._pc
                .getReceivers()
                .find((e) => e.track && e.track.id === a);
              if (!p) throw new Error("new RTCRtpReceiver not");
              return (
                this._mapRecvLocalIdInfo.set(a, {
                  mid: i,
                  rtpParameters: r,
                  rtpReceiver: p,
                }),
                { localId: a, track: p.track, rtpReceiver: p }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                _.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome67 = m;
        },
        5372: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome70 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            u = i(r(2267)),
            l = i(r(9072)),
            p = r(9316),
            h = r(7910),
            _ = r(2770),
            f = new o.Logger("Chrome70"),
            m = { OS: 1024, MIS: 1024 };
          class v extends p.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Chrome70";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: m };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: u,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", u),
                  video: d.getSendingRemoteRtpParameters("video", u),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              o.codecs = d.reduceCodecs(o.codecs, n);
              const p = this._remoteSdp.getNextMediaSectionIdx(),
                h = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let m,
                v = await this._pc.createOffer(),
                g = s.parse(v.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole:
                    null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                      ? a
                      : "client",
                  localSdpObject: g,
                })),
                t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling legacy simulcast"),
                  (g = s.parse(v.sdp)),
                  (m = g.media[p.idx]),
                  l.addLegacySimulcast({
                    offerMediaObject: m,
                    numStreams: t.length,
                  }),
                  (v = { type: "offer", sdp: s.write(g) }));
              let y = !1;
              const b = (0, _.parse)((t || [{}])[0].scalabilityMode);
              if (
                (t &&
                  1 === t.length &&
                  b.spatialLayers > 1 &&
                  "video/vp9" === i.codecs[0].mimeType.toLowerCase() &&
                  (f.debug("send() | enabling legacy simulcast for VP9 SVC"),
                  (y = !0),
                  (g = s.parse(v.sdp)),
                  (m = g.media[p.idx]),
                  l.addLegacySimulcast({
                    offerMediaObject: m,
                    numStreams: b.spatialLayers,
                  }),
                  (v = { type: "offer", sdp: s.write(g) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  v
                ),
                await this._pc.setLocalDescription(v),
                t)
              ) {
                f.debug("send() | applying given encodings");
                const e = h.sender.getParameters();
                for (let r = 0; r < (e.encodings || []).length; ++r) {
                  const n = e.encodings[r],
                    a = t[r];
                  if (!a) break;
                  e.encodings[r] = Object.assign(n, a);
                }
                await h.sender.setParameters(e);
              }
              const x = h.mid;
              if (
                ((i.mid = x),
                (g = s.parse(this._pc.localDescription.sdp)),
                (m = g.media[p.idx]),
                (i.rtcp.cname = u.getCname({ offerMediaObject: m })),
                (i.encodings = l.getRtpEncodings({ offerMediaObject: m })),
                t)
              )
                for (let e = 0; e < i.encodings.length; ++e)
                  t[e] && Object.assign(i.encodings[e], t[e]);
              if (
                (y && (i.encodings = [i.encodings[0]]),
                i.encodings.length > 1 &&
                  ("video/vp8" === i.codecs[0].mimeType.toLowerCase() ||
                    "video/h264" === i.codecs[0].mimeType.toLowerCase()))
              )
                for (const e of i.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: m,
                reuseMid: p.reuseMid,
                offerRtpParameters: i,
                answerRtpParameters: o,
                codecOptions: r,
              });
              const E = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  E
                ),
                await this._pc.setRemoteDescription(E),
                this._mapMidTransceiver.set(x, h),
                { localId: x, rtpParameters: i, rtpSender: h.sender }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.closeMediaSection(t.mid);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % m.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: a,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const i = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
              let o = await this._pc.createAnswer();
              const c = s.parse(o.sdp),
                d = c.media.find((e) => String(e.mid) === a);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: d,
              }),
                (o = { type: "answer", sdp: s.write(c) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: c,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o);
              const l = this._pc.getTransceivers().find((e) => e.mid === a);
              if (!l) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(a, l),
                { localId: a, track: l.receiver.track, rtpReceiver: l.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome70 = v;
        },
        6656: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Chrome74 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            u = i(r(2267)),
            l = i(r(9072)),
            p = r(9316),
            h = r(7910),
            _ = r(2770),
            f = new o.Logger("Chrome74"),
            m = { OS: 1024, MIS: 1024 };
          class v extends p.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Chrome74";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "unified-plan",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: m };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: u,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", u),
                  video: d.getSendingRemoteRtpParameters("video", u),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "unified-plan",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  t.length > 1 &&
                  t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  });
              const i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              o.codecs = d.reduceCodecs(o.codecs, n);
              const p = this._remoteSdp.getNextMediaSectionIdx(),
                h = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                  sendEncodings: t,
                });
              let m,
                v = await this._pc.createOffer(),
                g = s.parse(v.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole:
                    null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                      ? a
                      : "client",
                  localSdpObject: g,
                }));
              let y = !1;
              const b = (0, _.parse)((t || [{}])[0].scalabilityMode);
              t &&
                1 === t.length &&
                b.spatialLayers > 1 &&
                "video/vp9" === i.codecs[0].mimeType.toLowerCase() &&
                (f.debug("send() | enabling legacy simulcast for VP9 SVC"),
                (y = !0),
                (g = s.parse(v.sdp)),
                (m = g.media[p.idx]),
                l.addLegacySimulcast({
                  offerMediaObject: m,
                  numStreams: b.spatialLayers,
                }),
                (v = { type: "offer", sdp: s.write(g) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  v
                ),
                await this._pc.setLocalDescription(v);
              const x = h.mid;
              if (
                ((i.mid = x),
                (g = s.parse(this._pc.localDescription.sdp)),
                (m = g.media[p.idx]),
                (i.rtcp.cname = u.getCname({ offerMediaObject: m })),
                t)
              )
                if (1 === t.length) {
                  let e = l.getRtpEncodings({ offerMediaObject: m });
                  Object.assign(e[0], t[0]),
                    y && (e = [e[0]]),
                    (i.encodings = e);
                } else i.encodings = t;
              else i.encodings = l.getRtpEncodings({ offerMediaObject: m });
              if (
                i.encodings.length > 1 &&
                ("video/vp8" === i.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === i.codecs[0].mimeType.toLowerCase())
              )
                for (const e of i.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: m,
                reuseMid: p.reuseMid,
                offerRtpParameters: i,
                answerRtpParameters: o,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const E = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  E
                ),
                await this._pc.setRemoteDescription(E),
                this._mapMidTransceiver.set(x, h),
                { localId: x, rtpParameters: i, rtpSender: h.sender }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.closeMediaSection(t.mid);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % m.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: a,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const i = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
              let o = await this._pc.createAnswer();
              const c = s.parse(o.sdp),
                d = c.media.find((e) => String(e.mid) === a);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: d,
              }),
                (o = { type: "answer", sdp: s.write(c) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: c,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o);
              const l = this._pc.getTransceivers().find((e) => e.mid === a);
              if (!l) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(a, l),
                { localId: a, track: l.receiver.track, rtpReceiver: l.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {
              this._assertRecvDirection(),
                f.debug("pauseReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "inactive";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async resumeReceiving(e) {
              this._assertRecvDirection(),
                f.debug("resumeReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "recvonly";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Chrome74 = v;
        },
        7392: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Edge11 = void 0);
          const s = r(8562),
            o = r(9992),
            c = i(r(3347)),
            d = i(r(5280)),
            u = i(r(3635)),
            l = r(9316),
            p = new s.Logger("Edge11");
          class h extends l.HandlerInterface {
            constructor() {
              super(),
                (this._rtpSenders = new Map()),
                (this._rtpReceivers = new Map()),
                (this._nextSendLocalId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new h();
            }
            get name() {
              return "Edge11";
            }
            close() {
              p.debug("close()");
              try {
                this._iceGatherer.close();
              } catch (e) {}
              try {
                this._iceTransport.stop();
              } catch (e) {}
              try {
                this._dtlsTransport.stop();
              } catch (e) {}
              for (const e of this._rtpSenders.values())
                try {
                  e.stop();
                } catch (e) {}
              for (const e of this._rtpReceivers.values())
                try {
                  e.stop();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              return p.debug("getNativeRtpCapabilities()"), u.getCapabilities();
            }
            async getNativeSctpCapabilities() {
              return (
                p.debug("getNativeSctpCapabilities()"),
                { numStreams: { OS: 0, MIS: 0 } }
              );
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: u,
              extendedRtpCapabilities: l,
            }) {
              p.debug("run()"),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", l),
                  video: d.getSendingRtpParameters("video", l),
                }),
                (this._remoteIceParameters = t),
                (this._remoteIceCandidates = r),
                (this._remoteDtlsParameters = n),
                (this._cname = `CNAME-${c.generateRandomNumber()}`),
                this._setIceGatherer({ iceServers: i, iceTransportPolicy: s }),
                this._setIceTransport(),
                this._setDtlsTransport();
            }
            async updateIceServers(e) {
              throw new o.UnsupportedError("not supported");
            }
            async restartIce(e) {
              if (
                (p.debug("restartIce()"),
                (this._remoteIceParameters = e),
                this._transportReady)
              ) {
                p.debug("restartIce() | calling iceTransport.start()"),
                  this._iceTransport.start(this._iceGatherer, e, "controlling");
                for (const e of this._remoteIceCandidates)
                  this._iceTransport.addRemoteCandidate(e);
                this._iceTransport.addRemoteCandidate({});
              }
            }
            async getTransportStats() {
              return this._iceTransport.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              p.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                this._transportReady ||
                  (await this._setupTransport({ localDtlsRole: "server" })),
                p.debug("send() | calling new RTCRtpSender()");
              const a = new RTCRtpSender(e, this._dtlsTransport),
                i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const s = i.codecs.some((e) => /.+\/rtx$/i.test(e.mimeType));
              t || (t = [{}]);
              for (const e of t)
                (e.ssrc = c.generateRandomNumber()),
                  s && (e.rtx = { ssrc: c.generateRandomNumber() });
              (i.encodings = t),
                (i.rtcp = { cname: this._cname, reducedSize: !0, mux: !0 });
              const o = u.mangleRtpParameters(i);
              p.debug("send() | calling rtpSender.send() [params:%o]", o),
                await a.send(o);
              const l = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._rtpSenders.set(l, a),
                { localId: l, rtpParameters: i, rtpSender: a }
              );
            }
            async stopSending(e) {
              p.debug("stopSending() [localId:%s]", e);
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              this._rtpSenders.delete(e);
              try {
                p.debug("stopSending() | calling rtpSender.stop()"), t.stop();
              } catch (e) {
                throw (
                  (p.warn("stopSending() | rtpSender.stop() failed:%o", e), e)
                );
              }
            }
            async replaceTrack(e, t) {
              t
                ? p.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                : p.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              r.setTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              p.debug(
                "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              p.debug(
                "setRtpEncodingParameters() [localId:%s, params:%o]",
                e,
                t
              );
              const r = this._rtpSenders.get(e);
              if (!r) throw new Error("RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              const t = this._rtpSenders.get(e);
              if (!t) throw new Error("RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              p.debug("receive() [trackId:%s, kind:%s]", e, t),
                this._transportReady ||
                  (await this._setupTransport({ localDtlsRole: "server" })),
                p.debug("receive() | calling new RTCRtpReceiver()");
              const n = new RTCRtpReceiver(this._dtlsTransport, t);
              n.addEventListener("error", (e) => {
                p.error('rtpReceiver "error" event [event:%o]', e);
              });
              const a = u.mangleRtpParameters(r);
              p.debug(
                "receive() | calling rtpReceiver.receive() [params:%o]",
                a
              ),
                await n.receive(a);
              const i = e;
              return (
                this._rtpReceivers.set(i, n),
                { localId: i, track: n.track, rtpReceiver: n }
              );
            }
            async stopReceiving(e) {
              p.debug("stopReceiving() [localId:%s]", e);
              const t = this._rtpReceivers.get(e);
              if (!t) throw new Error("RTCRtpReceiver not found");
              this._rtpReceivers.delete(e);
              try {
                p.debug("stopReceiving() | calling rtpReceiver.stop()"),
                  t.stop();
              } catch (e) {
                p.warn("stopReceiving() | rtpReceiver.stop() failed:%o", e);
              }
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              const t = this._rtpReceivers.get(e);
              if (!t) throw new Error("RTCRtpReceiver not found");
              return t.getStats();
            }
            async receiveDataChannel(e) {
              throw new o.UnsupportedError("not implemented");
            }
            _setIceGatherer({ iceServers: e, iceTransportPolicy: t }) {
              const r = new RTCIceGatherer({
                iceServers: e || [],
                gatherPolicy: t || "all",
              });
              r.addEventListener("error", (e) => {
                p.error('iceGatherer "error" event [event:%o]', e);
              });
              try {
                r.gather();
              } catch (e) {
                p.debug(
                  "_setIceGatherer() | iceGatherer.gather() failed: %s",
                  e.toString()
                );
              }
              this._iceGatherer = r;
            }
            _setIceTransport() {
              const e = new RTCIceTransport(this._iceGatherer);
              e.addEventListener("statechange", () => {
                switch (e.state) {
                  case "checking":
                    this.emit("@connectionstatechange", "connecting");
                    break;
                  case "connected":
                  case "completed":
                    this.emit("@connectionstatechange", "connected");
                    break;
                  case "failed":
                    this.emit("@connectionstatechange", "failed");
                    break;
                  case "disconnected":
                    this.emit("@connectionstatechange", "disconnected");
                    break;
                  case "closed":
                    this.emit("@connectionstatechange", "closed");
                }
              }),
                e.addEventListener("icestatechange", () => {
                  switch (e.state) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                }),
                e.addEventListener("candidatepairchange", (e) => {
                  p.debug(
                    'iceTransport "candidatepairchange" event [pair:%o]',
                    e.pair
                  );
                }),
                (this._iceTransport = e);
            }
            _setDtlsTransport() {
              const e = new RTCDtlsTransport(this._iceTransport);
              e.addEventListener("statechange", () => {
                p.debug(
                  'dtlsTransport "statechange" event [state:%s]',
                  e.state
                );
              }),
                e.addEventListener("dtlsstatechange", () => {
                  p.debug(
                    'dtlsTransport "dtlsstatechange" event [state:%s]',
                    e.state
                  ),
                    "closed" === e.state &&
                      this.emit("@connectionstatechange", "closed");
                }),
                e.addEventListener("error", (e) => {
                  p.error('dtlsTransport "error" event [event:%o]', e);
                }),
                (this._dtlsTransport = e);
            }
            async _setupTransport({ localDtlsRole: e }) {
              p.debug("_setupTransport()");
              const t = this._dtlsTransport.getLocalParameters();
              (t.role = e),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: t }),
                this._iceTransport.start(
                  this._iceGatherer,
                  this._remoteIceParameters,
                  "controlling"
                );
              for (const e of this._remoteIceCandidates)
                this._iceTransport.addRemoteCandidate(e);
              this._iceTransport.addRemoteCandidate({}),
                (this._remoteDtlsParameters.fingerprints =
                  this._remoteDtlsParameters.fingerprints.filter(
                    (e) =>
                      "sha-256" === e.algorithm ||
                      "sha-384" === e.algorithm ||
                      "sha-512" === e.algorithm
                  )),
                this._dtlsTransport.start(this._remoteDtlsParameters),
                (this._transportReady = !0);
            }
          }
          t.Edge11 = h;
        },
        1419: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Firefox60 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(9992),
            d = i(r(3347)),
            u = i(r(5280)),
            l = i(r(2267)),
            p = i(r(9072)),
            h = r(9316),
            _ = r(7910),
            f = new o.Logger("Firefox60"),
            m = { OS: 16, MIS: 2048 };
          class v extends h.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "Firefox60";
            }
            close() {
              if ((f.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                  iceServers: [],
                  iceTransportPolicy: "all",
                  bundlePolicy: "max-bundle",
                  rtcpMuxPolicy: "require",
                }),
                t = document.createElement("canvas");
              t.getContext("2d");
              const r = t.captureStream().getVideoTracks()[0];
              try {
                e.addTransceiver("audio", { direction: "sendrecv" });
                const n = e.addTransceiver(r, { direction: "sendrecv" }),
                  a = n.sender.getParameters(),
                  i = [
                    { rid: "r0", maxBitrate: 1e5 },
                    { rid: "r1", maxBitrate: 5e5 },
                  ];
                (a.encodings = i), await n.sender.setParameters(a);
                const o = await e.createOffer();
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                const c = s.parse(o.sdp);
                return l.extractRtpCapabilities({ sdpObject: c });
              } catch (n) {
                try {
                  t.remove();
                } catch (e) {}
                try {
                  r.stop();
                } catch (e) {}
                try {
                  e.close();
                } catch (e) {}
                throw n;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: m };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new _.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: u.getSendingRtpParameters("audio", d),
                  video: u.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: u.getSendingRemoteRtpParameters("audio", d),
                  video: u.getSendingRemoteRtpParameters("video", d),
                }),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              throw new c.UnsupportedError("not supported");
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                t &&
                  (t = d.clone(t, [])).length > 1 &&
                  (t.forEach((e, t) => {
                    e.rid = `r${t}`;
                  }),
                  t.reverse());
              const a = d.clone(this._sendingRtpParametersByKind[e.kind], {});
              a.codecs = u.reduceCodecs(a.codecs, n);
              const i = d.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              i.codecs = u.reduceCodecs(i.codecs, n);
              const o = this._pc.addTransceiver(e, {
                direction: "sendonly",
                streams: [this._sendStream],
              });
              if (t) {
                const e = o.sender.getParameters();
                (e.encodings = t), await o.sender.setParameters(e);
              }
              const c = await this._pc.createOffer();
              let h = s.parse(c.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole: "client",
                  localSdpObject: h,
                })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  c
                ),
                await this._pc.setLocalDescription(c);
              const _ = o.mid;
              (a.mid = _), (h = s.parse(this._pc.localDescription.sdp));
              const m = h.media[h.media.length - 1];
              if (((a.rtcp.cname = l.getCname({ offerMediaObject: m })), t))
                if (1 === t.length) {
                  const e = p.getRtpEncodings({ offerMediaObject: m });
                  Object.assign(e[0], t[0]), (a.encodings = e);
                } else a.encodings = t.reverse();
              else a.encodings = p.getRtpEncodings({ offerMediaObject: m });
              if (
                a.encodings.length > 1 &&
                ("video/vp8" === a.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === a.codecs[0].mimeType.toLowerCase())
              )
                for (const e of a.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: m,
                offerRtpParameters: a,
                answerRtpParameters: i,
                codecOptions: r,
                extmapAllowMixed: !0,
              });
              const v = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                f.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  v
                ),
                await this._pc.setRemoteDescription(v),
                this._mapMidTransceiver.set(_, o),
                { localId: _, rtpParameters: a, rtpSender: o.sender }
              );
            }
            async stopSending(e) {
              f.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated transceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.disableMediaSection(t.mid);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? f.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : f.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated transceiver not found");
              const n = r.sender.getParameters();
              (t = n.encodings.length - 1 - t),
                n.encodings.forEach((e, r) => {
                  e.active = r >= t;
                }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                f.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              this._assertSendDirection();
              const i = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", i);
              const o = this._pc.createDataChannel(n, i);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % m.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: o,
                sctpStreamParameters: {
                  streamId: i.id,
                  ordered: i.ordered,
                  maxPacketLifeTime: i.maxPacketLifeTime,
                  maxRetransmits: i.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const n = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: n,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const a = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                a
              ),
                await this._pc.setRemoteDescription(a);
              let i = await this._pc.createAnswer();
              const o = s.parse(i.sdp),
                c = o.media.find((e) => String(e.mid) === n);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: c,
              }),
                (i = { type: "answer", sdp: s.write(o) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: o,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  i
                ),
                await this._pc.setLocalDescription(i);
              const d = this._pc.getTransceivers().find((e) => e.mid === n);
              if (!d) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(n, d),
                { localId: n, track: d.receiver.track, rtpReceiver: d.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {
              this._assertRecvDirection(),
                f.debug("pauseReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "inactive";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async resumeReceiving(e) {
              this._assertRecvDirection(),
                f.debug("resumeReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "recvonly";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              f.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              this._assertRecvDirection();
              const {
                  streamId: n,
                  ordered: a,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                } = e,
                c = {
                  negotiated: !0,
                  id: n,
                  ordered: a,
                  maxPacketLifeTime: i,
                  maxRetransmits: o,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", c);
              const d = this._pc.createDataChannel(t, c);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole: "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: d };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Firefox60 = v;
        },
        9316: (e, t, r) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.HandlerInterface = void 0);
          const n = r(4493);
          class a extends n.EnhancedEventEmitter {
            constructor() {
              super();
            }
          }
          t.HandlerInterface = a;
        },
        4770: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.ReactNative = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(9992),
            d = i(r(3347)),
            u = i(r(5280)),
            l = i(r(2267)),
            p = i(r(9875)),
            h = r(9316),
            _ = r(7910),
            f = new o.Logger("ReactNative"),
            m = { OS: 1024, MIS: 1024 };
          class v extends h.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdTrack = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new v();
            }
            get name() {
              return "ReactNative";
            }
            close() {
              if ((f.debug("close()"), this._sendStream.release(!1), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              f.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return l.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return f.debug("getNativeSctpCapabilities()"), { numStreams: m };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: d,
            }) {
              f.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new _.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: u.getSendingRtpParameters("audio", d),
                  video: u.getSendingRtpParameters("video", d),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: u.getSendingRemoteRtpParameters("audio", d),
                  video: u.getSendingRemoteRtpParameters("video", d),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    sdpSemantics: "plan-b",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              f.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (f.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  f.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  f.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                f.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  f.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addStream(this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                c = s.parse(o.sdp);
              const h = d.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = u.reduceCodecs(h.codecs);
              const _ = d.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((_.codecs = u.reduceCodecs(_.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: c,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (f.debug("send() | enabling simulcast"),
                  (c = s.parse(o.sdp)),
                  (i = c.media.find((e) => "video" === e.type)),
                  p.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(c) })),
                f.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (c = s.parse(this._pc.localDescription.sdp)),
                (i = c.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = l.getCname({ offerMediaObject: i })),
                (h.encodings = p.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                ("video/vp8" === h.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === h.codecs[0].mimeType.toLowerCase())
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: _,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const v = String(this._nextSendLocalId);
              return (
                this._nextSendLocalId++,
                this._mapSendLocalIdTrack.set(v, e),
                { localId: v, rtpParameters: h }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                f.debug("stopSending() [localId:%s]", e);
              const t = this._mapSendLocalIdTrack.get(e);
              if (!t) throw new Error("track not found");
              this._mapSendLocalIdTrack.delete(e),
                this._sendStream.removeTrack(t),
                this._pc.addStream(this._sendStream);
              const r = await this._pc.createOffer();
              f.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void f.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setMaxSpatialLayer(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async setRtpEncodingParameters(e, t) {
              throw new c.UnsupportedError("not implemented");
            }
            async getSenderStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmitTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              f.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % m.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  f.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                f.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t;
              let o = r.rtcp.cname;
              f.debug(
                "receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc"
              ),
                (o += `-hack-${d.generateRandomNumber()}`),
                this._remoteSdp.receive({
                  mid: i,
                  kind: t,
                  offerRtpParameters: r,
                  streamId: o,
                  trackId: e,
                });
              const c = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                c
              ),
                await this._pc.setRemoteDescription(c);
              let u = await this._pc.createAnswer();
              const p = s.parse(u.sdp),
                h = p.media.find((e) => String(e.mid) === i);
              l.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: h,
              }),
                (u = { type: "answer", sdp: s.write(p) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: p,
                  })),
                f.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  u
                ),
                await this._pc.setLocalDescription(u);
              const _ = this._pc
                .getRemoteStreams()
                .find((e) => e.id === o)
                .getTrackById(a);
              if (!_) throw new Error("remote track not found");
              return (
                this._mapRecvLocalIdInfo.set(a, { mid: i, rtpParameters: r }),
                { localId: a, track: _ }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                f.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              f.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              f.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async getReceiverStats(e) {
              throw new c.UnsupportedError("not implemented");
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmitTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              f.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                f.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = l.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.ReactNative = v;
        },
        2205: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari11 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            u = i(r(2267)),
            l = i(r(9875)),
            p = r(9316),
            h = r(7910),
            _ = new o.Logger("Safari11"),
            f = { OS: 1024, MIS: 1024 };
          class m extends p.HandlerInterface {
            constructor() {
              super(),
                (this._sendStream = new MediaStream()),
                (this._mapSendLocalIdRtpSender = new Map()),
                (this._nextSendLocalId = 0),
                (this._mapRecvLocalIdInfo = new Map()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new m();
            }
            get name() {
              return "Safari11";
            }
            close() {
              if ((_.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
                sdpSemantics: "plan-b",
              });
              try {
                const t = await e.createOffer({
                  offerToReceiveAudio: !0,
                  offerToReceiveVideo: !0,
                });
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: u,
            }) {
              _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                  planB: !0,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", u),
                  video: d.getSendingRemoteRtpParameters("video", u),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (_.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id),
                n &&
                  _.warn(
                    "send() | codec selection is not available in %s handler",
                    this.name
                  ),
                this._sendStream.addTrack(e),
                this._pc.addTrack(e, this._sendStream);
              let i,
                o = await this._pc.createOffer(),
                p = s.parse(o.sdp);
              const h = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              h.codecs = d.reduceCodecs(h.codecs);
              const f = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              if (
                ((f.codecs = d.reduceCodecs(f.codecs)),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                        ? a
                        : "client",
                    localSdpObject: p,
                  })),
                "video" === e.kind &&
                  t &&
                  t.length > 1 &&
                  (_.debug("send() | enabling simulcast"),
                  (p = s.parse(o.sdp)),
                  (i = p.media.find((e) => "video" === e.type)),
                  l.addLegacySimulcast({
                    offerMediaObject: i,
                    track: e,
                    numStreams: t.length,
                  }),
                  (o = { type: "offer", sdp: s.write(p) })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o),
                (p = s.parse(this._pc.localDescription.sdp)),
                (i = p.media.find((t) => t.type === e.kind)),
                (h.rtcp.cname = u.getCname({ offerMediaObject: i })),
                (h.encodings = l.getRtpEncodings({
                  offerMediaObject: i,
                  track: e,
                })),
                t)
              )
                for (let e = 0; e < h.encodings.length; ++e)
                  t[e] && Object.assign(h.encodings[e], t[e]);
              if (
                h.encodings.length > 1 &&
                "video/vp8" === h.codecs[0].mimeType.toLowerCase()
              )
                for (const e of h.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: i,
                offerRtpParameters: h,
                answerRtpParameters: f,
                codecOptions: r,
              });
              const m = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "send() | calling pc.setRemoteDescription() [answer:%o]",
                m
              ),
                await this._pc.setRemoteDescription(m);
              const v = String(this._nextSendLocalId);
              this._nextSendLocalId++;
              const g = this._pc.getSenders().find((t) => t.track === e);
              return (
                this._mapSendLocalIdRtpSender.set(v, g),
                { localId: v, rtpParameters: h, rtpSender: g }
              );
            }
            async stopSending(e) {
              this._assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              t.track && this._sendStream.removeTrack(t.track),
                this._mapSendLocalIdRtpSender.delete(e);
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              );
              try {
                await this._pc.setLocalDescription(r);
              } catch (e) {
                if (0 === this._sendStream.getTracks().length)
                  return void _.warn(
                    "stopSending() | ignoring expected error due no sending tracks: %s",
                    e.toString()
                  );
                throw e;
              }
              if ("stable" === this._pc.signalingState) return;
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.track;
              await r.replaceTrack(t),
                n && this._sendStream.removeTrack(n),
                t && this._sendStream.addTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapSendLocalIdRtpSender.get(e);
              if (!r) throw new Error("associated RTCRtpSender not found");
              const n = r.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapSendLocalIdRtpSender.get(e);
              if (!t) throw new Error("associated RTCRtpSender not found");
              return t.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              _.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                _.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = e,
                i = t;
              this._remoteSdp.receive({
                mid: i,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const o = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                o
              ),
                await this._pc.setRemoteDescription(o);
              let c = await this._pc.createAnswer();
              const d = s.parse(c.sdp),
                l = d.media.find((e) => String(e.mid) === i);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: l,
              }),
                (c = { type: "answer", sdp: s.write(d) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: d,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  c
                ),
                await this._pc.setLocalDescription(c);
              const p = this._pc
                .getReceivers()
                .find((e) => e.track && e.track.id === a);
              if (!p) throw new Error("new RTCRtpReceiver not");
              return (
                this._mapRecvLocalIdInfo.set(a, {
                  mid: i,
                  rtpParameters: r,
                  rtpReceiver: p,
                }),
                { localId: a, track: p.track, rtpReceiver: p }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                _.debug("stopReceiving() [localId:%s]", e);
              const { mid: t, rtpParameters: r } =
                this._mapRecvLocalIdInfo.get(e) || {};
              this._mapRecvLocalIdInfo.delete(e),
                this._remoteSdp.planBStopReceiving({
                  mid: t,
                  offerRtpParameters: r,
                });
              const n = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n);
              const a = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                a
              ),
                await this._pc.setLocalDescription(a);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const { rtpReceiver: t } = this._mapRecvLocalIdInfo.get(e) || {};
              if (!t) throw new Error("associated RTCRtpReceiver not found");
              return t.getStats();
            }
            async pauseReceiving(e) {}
            async resumeReceiving(e) {}
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation({
                  oldDataChannelSpec: !0,
                });
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari11 = m;
        },
        9862: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.Safari12 = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = i(r(3347)),
            d = i(r(5280)),
            u = i(r(2267)),
            l = i(r(9072)),
            p = r(9316),
            h = r(7910),
            _ = new o.Logger("Safari12"),
            f = { OS: 1024, MIS: 1024 };
          class m extends p.HandlerInterface {
            constructor() {
              super(),
                (this._mapMidTransceiver = new Map()),
                (this._sendStream = new MediaStream()),
                (this._hasDataChannelMediaSection = !1),
                (this._nextSendSctpStreamId = 0),
                (this._transportReady = !1);
            }
            static createFactory() {
              return () => new m();
            }
            get name() {
              return "Safari12";
            }
            close() {
              if ((_.debug("close()"), this._pc))
                try {
                  this._pc.close();
                } catch (e) {}
            }
            async getNativeRtpCapabilities() {
              _.debug("getNativeRtpCapabilities()");
              const e = new RTCPeerConnection({
                iceServers: [],
                iceTransportPolicy: "all",
                bundlePolicy: "max-bundle",
                rtcpMuxPolicy: "require",
              });
              try {
                e.addTransceiver("audio"), e.addTransceiver("video");
                const t = await e.createOffer();
                try {
                  e.close();
                } catch (e) {}
                const r = s.parse(t.sdp);
                return u.extractRtpCapabilities({ sdpObject: r });
              } catch (t) {
                try {
                  e.close();
                } catch (e) {}
                throw t;
              }
            }
            async getNativeSctpCapabilities() {
              return _.debug("getNativeSctpCapabilities()"), { numStreams: f };
            }
            run({
              direction: e,
              iceParameters: t,
              iceCandidates: r,
              dtlsParameters: n,
              sctpParameters: a,
              iceServers: i,
              iceTransportPolicy: s,
              additionalSettings: o,
              proprietaryConstraints: c,
              extendedRtpCapabilities: u,
            }) {
              _.debug("run()"),
                (this._direction = e),
                (this._remoteSdp = new h.RemoteSdp({
                  iceParameters: t,
                  iceCandidates: r,
                  dtlsParameters: n,
                  sctpParameters: a,
                })),
                (this._sendingRtpParametersByKind = {
                  audio: d.getSendingRtpParameters("audio", u),
                  video: d.getSendingRtpParameters("video", u),
                }),
                (this._sendingRemoteRtpParametersByKind = {
                  audio: d.getSendingRemoteRtpParameters("audio", u),
                  video: d.getSendingRemoteRtpParameters("video", u),
                }),
                n.role &&
                  "auto" !== n.role &&
                  (this._forcedLocalDtlsRole =
                    "server" === n.role ? "client" : "server"),
                (this._pc = new RTCPeerConnection(
                  {
                    iceServers: i || [],
                    iceTransportPolicy: s || "all",
                    bundlePolicy: "max-bundle",
                    rtcpMuxPolicy: "require",
                    ...o,
                  },
                  c
                )),
                this._pc.addEventListener("iceconnectionstatechange", () => {
                  switch (this._pc.iceConnectionState) {
                    case "checking":
                      this.emit("@connectionstatechange", "connecting");
                      break;
                    case "connected":
                    case "completed":
                      this.emit("@connectionstatechange", "connected");
                      break;
                    case "failed":
                      this.emit("@connectionstatechange", "failed");
                      break;
                    case "disconnected":
                      this.emit("@connectionstatechange", "disconnected");
                      break;
                    case "closed":
                      this.emit("@connectionstatechange", "closed");
                  }
                });
            }
            async updateIceServers(e) {
              _.debug("updateIceServers()");
              const t = this._pc.getConfiguration();
              (t.iceServers = e), this._pc.setConfiguration(t);
            }
            async restartIce(e) {
              if (
                (_.debug("restartIce()"),
                this._remoteSdp.updateIceParameters(e),
                this._transportReady)
              )
                if ("send" === this._direction) {
                  const e = await this._pc.createOffer({ iceRestart: !0 });
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setLocalDescription(e);
                  const t = { type: "answer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setRemoteDescription(t);
                } else {
                  const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                  _.debug(
                    "restartIce() | calling pc.setRemoteDescription() [offer:%o]",
                    e
                  ),
                    await this._pc.setRemoteDescription(e);
                  const t = await this._pc.createAnswer();
                  _.debug(
                    "restartIce() | calling pc.setLocalDescription() [answer:%o]",
                    t
                  ),
                    await this._pc.setLocalDescription(t);
                }
            }
            async getTransportStats() {
              return this._pc.getStats();
            }
            async send({ track: e, encodings: t, codecOptions: r, codec: n }) {
              var a;
              this._assertSendDirection(),
                _.debug("send() [kind:%s, track.id:%s]", e.kind, e.id);
              const i = c.clone(this._sendingRtpParametersByKind[e.kind], {});
              i.codecs = d.reduceCodecs(i.codecs, n);
              const o = c.clone(
                this._sendingRemoteRtpParametersByKind[e.kind],
                {}
              );
              o.codecs = d.reduceCodecs(o.codecs, n);
              const p = this._remoteSdp.getNextMediaSectionIdx(),
                h = this._pc.addTransceiver(e, {
                  direction: "sendonly",
                  streams: [this._sendStream],
                });
              let f,
                m = await this._pc.createOffer(),
                v = s.parse(m.sdp);
              this._transportReady ||
                (await this._setupTransport({
                  localDtlsRole:
                    null !== (a = this._forcedLocalDtlsRole) && void 0 !== a
                      ? a
                      : "client",
                  localSdpObject: v,
                })),
                t &&
                  t.length > 1 &&
                  (_.debug("send() | enabling legacy simulcast"),
                  (v = s.parse(m.sdp)),
                  (f = v.media[p.idx]),
                  l.addLegacySimulcast({
                    offerMediaObject: f,
                    numStreams: t.length,
                  }),
                  (m = { type: "offer", sdp: s.write(v) })),
                _.debug(
                  "send() | calling pc.setLocalDescription() [offer:%o]",
                  m
                ),
                await this._pc.setLocalDescription(m);
              const g = h.mid;
              if (
                ((i.mid = g),
                (v = s.parse(this._pc.localDescription.sdp)),
                (f = v.media[p.idx]),
                (i.rtcp.cname = u.getCname({ offerMediaObject: f })),
                (i.encodings = l.getRtpEncodings({ offerMediaObject: f })),
                t)
              )
                for (let e = 0; e < i.encodings.length; ++e)
                  t[e] && Object.assign(i.encodings[e], t[e]);
              if (
                i.encodings.length > 1 &&
                ("video/vp8" === i.codecs[0].mimeType.toLowerCase() ||
                  "video/h264" === i.codecs[0].mimeType.toLowerCase())
              )
                for (const e of i.encodings) e.scalabilityMode = "S1T3";
              this._remoteSdp.send({
                offerMediaObject: f,
                reuseMid: p.reuseMid,
                offerRtpParameters: i,
                answerRtpParameters: o,
                codecOptions: r,
              });
              const y = { type: "answer", sdp: this._remoteSdp.getSdp() };
              return (
                _.debug(
                  "send() | calling pc.setRemoteDescription() [answer:%o]",
                  y
                ),
                await this._pc.setRemoteDescription(y),
                this._mapMidTransceiver.set(g, h),
                { localId: g, rtpParameters: i, rtpSender: h.sender }
              );
            }
            async stopSending(e) {
              this._assertSendDirection(),
                _.debug("stopSending() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.sender.replaceTrack(null),
                this._pc.removeTrack(t.sender),
                this._remoteSdp.closeMediaSection(t.mid);
              const r = await this._pc.createOffer();
              _.debug(
                "stopSending() | calling pc.setLocalDescription() [offer:%o]",
                r
              ),
                await this._pc.setLocalDescription(r);
              const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopSending() | calling pc.setRemoteDescription() [answer:%o]",
                n
              ),
                await this._pc.setRemoteDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async replaceTrack(e, t) {
              this._assertSendDirection(),
                t
                  ? _.debug("replaceTrack() [localId:%s, track.id:%s]", e, t.id)
                  : _.debug("replaceTrack() [localId:%s, no track]", e);
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              await r.sender.replaceTrack(t);
            }
            async setMaxSpatialLayer(e, t) {
              this._assertSendDirection(),
                _.debug(
                  "setMaxSpatialLayer() [localId:%s, spatialLayer:%s]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                e.active = r <= t;
              }),
                await r.sender.setParameters(n);
            }
            async setRtpEncodingParameters(e, t) {
              this._assertSendDirection(),
                _.debug(
                  "setRtpEncodingParameters() [localId:%s, params:%o]",
                  e,
                  t
                );
              const r = this._mapMidTransceiver.get(e);
              if (!r) throw new Error("associated RTCRtpTransceiver not found");
              const n = r.sender.getParameters();
              n.encodings.forEach((e, r) => {
                n.encodings[r] = { ...e, ...t };
              }),
                await r.sender.setParameters(n);
            }
            async getSenderStats(e) {
              this._assertSendDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.sender.getStats();
            }
            async sendDataChannel({
              ordered: e,
              maxPacketLifeTime: t,
              maxRetransmits: r,
              label: n,
              protocol: a,
            }) {
              var i;
              this._assertSendDirection();
              const o = {
                negotiated: !0,
                id: this._nextSendSctpStreamId,
                ordered: e,
                maxPacketLifeTime: t,
                maxRetransmits: r,
                protocol: a,
              };
              _.debug("sendDataChannel() [options:%o]", o);
              const c = this._pc.createDataChannel(n, o);
              if (
                ((this._nextSendSctpStreamId =
                  ++this._nextSendSctpStreamId % f.MIS),
                !this._hasDataChannelMediaSection)
              ) {
                const e = await this._pc.createOffer(),
                  t = s.parse(e.sdp),
                  r = t.media.find((e) => "application" === e.type);
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (i = this._forcedLocalDtlsRole) && void 0 !== i
                        ? i
                        : "client",
                    localSdpObject: t,
                  })),
                  _.debug(
                    "sendDataChannel() | calling pc.setLocalDescription() [offer:%o]",
                    e
                  ),
                  await this._pc.setLocalDescription(e),
                  this._remoteSdp.sendSctpAssociation({ offerMediaObject: r });
                const n = { type: "answer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  n
                ),
                  await this._pc.setRemoteDescription(n),
                  (this._hasDataChannelMediaSection = !0);
              }
              return {
                dataChannel: c,
                sctpStreamParameters: {
                  streamId: o.id,
                  ordered: o.ordered,
                  maxPacketLifeTime: o.maxPacketLifeTime,
                  maxRetransmits: o.maxRetransmits,
                },
              };
            }
            async receive({ trackId: e, kind: t, rtpParameters: r }) {
              var n;
              this._assertRecvDirection(),
                _.debug("receive() [trackId:%s, kind:%s]", e, t);
              const a = r.mid || String(this._mapMidTransceiver.size);
              this._remoteSdp.receive({
                mid: a,
                kind: t,
                offerRtpParameters: r,
                streamId: r.rtcp.cname,
                trackId: e,
              });
              const i = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "receive() | calling pc.setRemoteDescription() [offer:%o]",
                i
              ),
                await this._pc.setRemoteDescription(i);
              let o = await this._pc.createAnswer();
              const c = s.parse(o.sdp),
                d = c.media.find((e) => String(e.mid) === a);
              u.applyCodecParameters({
                offerRtpParameters: r,
                answerMediaObject: d,
              }),
                (o = { type: "answer", sdp: s.write(c) }),
                this._transportReady ||
                  (await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: c,
                  })),
                _.debug(
                  "receive() | calling pc.setLocalDescription() [answer:%o]",
                  o
                ),
                await this._pc.setLocalDescription(o);
              const l = this._pc.getTransceivers().find((e) => e.mid === a);
              if (!l) throw new Error("new RTCRtpTransceiver not found");
              return (
                this._mapMidTransceiver.set(a, l),
                { localId: a, track: l.receiver.track, rtpReceiver: l.receiver }
              );
            }
            async stopReceiving(e) {
              this._assertRecvDirection(),
                _.debug("stopReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              this._remoteSdp.closeMediaSection(t.mid);
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "stopReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              _.debug(
                "stopReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n),
                this._mapMidTransceiver.delete(e);
            }
            async pauseReceiving(e) {
              this._assertRecvDirection(),
                _.debug("pauseReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "inactive";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              _.debug(
                "pauseReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async resumeReceiving(e) {
              this._assertRecvDirection(),
                _.debug("resumeReceiving() [localId:%s]", e);
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              t.direction = "recvonly";
              const r = { type: "offer", sdp: this._remoteSdp.getSdp() };
              _.debug(
                "resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]",
                r
              ),
                await this._pc.setRemoteDescription(r);
              const n = await this._pc.createAnswer();
              _.debug(
                "resumeReceiving() | calling pc.setLocalDescription() [answer:%o]",
                n
              ),
                await this._pc.setLocalDescription(n);
            }
            async getReceiverStats(e) {
              this._assertRecvDirection();
              const t = this._mapMidTransceiver.get(e);
              if (!t) throw new Error("associated RTCRtpTransceiver not found");
              return t.receiver.getStats();
            }
            async receiveDataChannel({
              sctpStreamParameters: e,
              label: t,
              protocol: r,
            }) {
              var n;
              this._assertRecvDirection();
              const {
                  streamId: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                } = e,
                d = {
                  negotiated: !0,
                  id: a,
                  ordered: i,
                  maxPacketLifeTime: o,
                  maxRetransmits: c,
                  protocol: r,
                };
              _.debug("receiveDataChannel() [options:%o]", d);
              const u = this._pc.createDataChannel(t, d);
              if (!this._hasDataChannelMediaSection) {
                this._remoteSdp.receiveSctpAssociation();
                const e = { type: "offer", sdp: this._remoteSdp.getSdp() };
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]",
                  e
                ),
                  await this._pc.setRemoteDescription(e);
                const t = await this._pc.createAnswer();
                if (!this._transportReady) {
                  const e = s.parse(t.sdp);
                  await this._setupTransport({
                    localDtlsRole:
                      null !== (n = this._forcedLocalDtlsRole) && void 0 !== n
                        ? n
                        : "client",
                    localSdpObject: e,
                  });
                }
                _.debug(
                  "receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]",
                  t
                ),
                  await this._pc.setLocalDescription(t),
                  (this._hasDataChannelMediaSection = !0);
              }
              return { dataChannel: u };
            }
            async _setupTransport({ localDtlsRole: e, localSdpObject: t }) {
              t || (t = s.parse(this._pc.localDescription.sdp));
              const r = u.extractDtlsParameters({ sdpObject: t });
              (r.role = e),
                this._remoteSdp.updateDtlsRole(
                  "client" === e ? "server" : "client"
                ),
                await this.safeEmitAsPromise("@connect", { dtlsParameters: r }),
                (this._transportReady = !0);
            }
            _assertSendDirection() {
              if ("send" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "send" direction'
                );
            }
            _assertRecvDirection() {
              if ("recv" !== this._direction)
                throw new Error(
                  'method can just be called for handlers with "recv" direction'
                );
            }
          }
          t.Safari12 = m;
        },
        3635: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.mangleRtpParameters = t.getCapabilities = void 0);
          const s = i(r(3347));
          (t.getCapabilities = function () {
            const e = RTCRtpReceiver.getCapabilities(),
              t = s.clone(e, {});
            for (const e of t.codecs) {
              if (
                ((e.channels = e.numChannels),
                delete e.numChannels,
                (e.mimeType = e.mimeType || `${e.kind}/${e.name}`),
                e.parameters)
              ) {
                const t = e.parameters;
                t.apt && (t.apt = Number(t.apt)),
                  t["packetization-mode"] &&
                    (t["packetization-mode"] = Number(t["packetization-mode"]));
              }
              for (const t of e.rtcpFeedback || [])
                t.parameter || (t.parameter = "");
            }
            return t;
          }),
            (t.mangleRtpParameters = function (e) {
              const t = s.clone(e, {});
              t.mid && ((t.muxId = t.mid), delete t.mid);
              for (const e of t.codecs)
                e.channels && ((e.numChannels = e.channels), delete e.channels),
                  e.mimeType && !e.name && (e.name = e.mimeType.split("/")[1]),
                  delete e.mimeType;
              return t;
            });
        },
        6698: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.OfferMediaSection =
              t.AnswerMediaSection =
              t.MediaSection =
                void 0);
          const s = i(r(3347));
          class o {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              planB: n = !1,
            }) {
              if (
                ((this._mediaObject = {}),
                (this._planB = n),
                e && this.setIceParameters(e),
                t)
              ) {
                this._mediaObject.candidates = [];
                for (const e of t) {
                  const t = { component: 1 };
                  (t.foundation = e.foundation),
                    (t.ip = e.ip),
                    (t.port = e.port),
                    (t.priority = e.priority),
                    (t.transport = e.protocol),
                    (t.type = e.type),
                    e.tcpType && (t.tcptype = e.tcpType),
                    this._mediaObject.candidates.push(t);
                }
                (this._mediaObject.endOfCandidates = "end-of-candidates"),
                  (this._mediaObject.iceOptions = "renomination");
              }
              r && this.setDtlsRole(r.role);
            }
            get mid() {
              return String(this._mediaObject.mid);
            }
            get closed() {
              return 0 === this._mediaObject.port;
            }
            getObject() {
              return this._mediaObject;
            }
            setIceParameters(e) {
              (this._mediaObject.iceUfrag = e.usernameFragment),
                (this._mediaObject.icePwd = e.password);
            }
            disable() {
              (this._mediaObject.direction = "inactive"),
                delete this._mediaObject.ext,
                delete this._mediaObject.ssrcs,
                delete this._mediaObject.ssrcGroups,
                delete this._mediaObject.simulcast,
                delete this._mediaObject.simulcast_03,
                delete this._mediaObject.rids;
            }
            close() {
              (this._mediaObject.direction = "inactive"),
                (this._mediaObject.port = 0),
                delete this._mediaObject.ext,
                delete this._mediaObject.ssrcs,
                delete this._mediaObject.ssrcGroups,
                delete this._mediaObject.simulcast,
                delete this._mediaObject.simulcast_03,
                delete this._mediaObject.rids,
                delete this._mediaObject.extmapAllowMixed;
            }
          }
          t.MediaSection = o;
          t.AnswerMediaSection = class extends o {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: a,
              planB: i = !1,
              offerMediaObject: o,
              offerRtpParameters: d,
              answerRtpParameters: u,
              codecOptions: l,
              extmapAllowMixed: p = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: i,
                }),
                (this._mediaObject.mid = String(o.mid)),
                (this._mediaObject.type = o.type),
                (this._mediaObject.protocol = o.protocol),
                a
                  ? ((this._mediaObject.connection = {
                      ip: a.ip,
                      version: a.ipVersion,
                    }),
                    (this._mediaObject.port = a.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.port = 7)),
                o.type)
              ) {
                case "audio":
                case "video":
                  (this._mediaObject.direction = "recvonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []);
                  for (const e of u.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: c(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = s.clone(e.parameters, {});
                    if (l) {
                      const {
                          opusStereo: t,
                          opusFec: n,
                          opusDtx: a,
                          opusMaxPlaybackRate: i,
                          opusMaxAverageBitrate: s,
                          opusPtime: o,
                          videoGoogleStartBitrate: c,
                          videoGoogleMaxBitrate: u,
                          videoGoogleMinBitrate: p,
                        } = l,
                        h = d.codecs.find(
                          (t) => t.payloadType === e.payloadType
                        );
                      switch (e.mimeType.toLowerCase()) {
                        case "audio/opus":
                          void 0 !== t &&
                            ((h.parameters["sprop-stereo"] = t ? 1 : 0),
                            (r.stereo = t ? 1 : 0)),
                            void 0 !== n &&
                              ((h.parameters.useinbandfec = n ? 1 : 0),
                              (r.useinbandfec = n ? 1 : 0)),
                            void 0 !== a &&
                              ((h.parameters.usedtx = a ? 1 : 0),
                              (r.usedtx = a ? 1 : 0)),
                            void 0 !== i && (r.maxplaybackrate = i),
                            void 0 !== s && (r.maxaveragebitrate = s),
                            void 0 !== o &&
                              ((h.parameters.ptime = o), (r.ptime = o));
                          break;
                        case "video/vp8":
                        case "video/vp9":
                        case "video/h264":
                        case "video/h265":
                          void 0 !== c && (r["x-google-start-bitrate"] = c),
                            void 0 !== u && (r["x-google-max-bitrate"] = u),
                            void 0 !== p && (r["x-google-min-bitrate"] = p);
                      }
                    }
                    const n = { payload: e.payloadType, config: "" };
                    for (const e of Object.keys(r))
                      n.config && (n.config += ";"),
                        (n.config += `${e}=${r[e]}`);
                    n.config && this._mediaObject.fmtp.push(n);
                    for (const t of e.rtcpFeedback)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = u.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of u.headerExtensions) {
                    (o.ext || []).some((t) => t.uri === e.uri) &&
                      this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  }
                  if (
                    (p &&
                      "extmap-allow-mixed" === o.extmapAllowMixed &&
                      (this._mediaObject.extmapAllowMixed =
                        "extmap-allow-mixed"),
                    o.simulcast)
                  ) {
                    (this._mediaObject.simulcast = {
                      dir1: "recv",
                      list1: o.simulcast.list1,
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of o.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  } else if (o.simulcast_03) {
                    (this._mediaObject.simulcast_03 = {
                      value: o.simulcast_03.value.replace(/send/g, "recv"),
                    }),
                      (this._mediaObject.rids = []);
                    for (const e of o.rids || [])
                      "send" === e.direction &&
                        this._mediaObject.rids.push({
                          id: e.id,
                          direction: "recv",
                        });
                  }
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize"),
                    this._planB &&
                      "video" === this._mediaObject.type &&
                      (this._mediaObject.xGoogleFlag = "conference");
                  break;
                case "application":
                  "number" == typeof o.sctpPort
                    ? ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = n.port),
                      (this._mediaObject.maxMessageSize = n.maxMessageSize))
                    : o.sctpmap &&
                      ((this._mediaObject.payloads = n.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: n.port,
                        maxMessageSize: n.maxMessageSize,
                      }));
              }
            }
            setDtlsRole(e) {
              switch (e) {
                case "client":
                  this._mediaObject.setup = "active";
                  break;
                case "server":
                  this._mediaObject.setup = "passive";
                  break;
                case "auto":
                  this._mediaObject.setup = "actpass";
              }
            }
          };
          function c(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i").exec(e.mimeType);
            if (!t) throw new TypeError("invalid codec.mimeType");
            return t[2];
          }
          t.OfferMediaSection = class extends o {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: a,
              planB: i = !1,
              mid: s,
              kind: o,
              offerRtpParameters: d,
              streamId: u,
              trackId: l,
              oldDataChannelSpec: p = !1,
            }) {
              switch (
                (super({
                  iceParameters: e,
                  iceCandidates: t,
                  dtlsParameters: r,
                  planB: i,
                }),
                (this._mediaObject.mid = String(s)),
                (this._mediaObject.type = o),
                a
                  ? ((this._mediaObject.connection = {
                      ip: a.ip,
                      version: a.ipVersion,
                    }),
                    (this._mediaObject.protocol = "RTP/AVP"),
                    (this._mediaObject.port = a.port))
                  : ((this._mediaObject.connection = {
                      ip: "127.0.0.1",
                      version: 4,
                    }),
                    (this._mediaObject.protocol = n
                      ? "UDP/DTLS/SCTP"
                      : "UDP/TLS/RTP/SAVPF"),
                    (this._mediaObject.port = 7)),
                o)
              ) {
                case "audio":
                case "video": {
                  (this._mediaObject.direction = "sendonly"),
                    (this._mediaObject.rtp = []),
                    (this._mediaObject.rtcpFb = []),
                    (this._mediaObject.fmtp = []),
                    this._planB ||
                      (this._mediaObject.msid = `${u || "-"} ${l}`);
                  for (const e of d.codecs) {
                    const t = {
                      payload: e.payloadType,
                      codec: c(e),
                      rate: e.clockRate,
                    };
                    e.channels > 1 && (t.encoding = e.channels),
                      this._mediaObject.rtp.push(t);
                    const r = { payload: e.payloadType, config: "" };
                    for (const t of Object.keys(e.parameters))
                      r.config && (r.config += ";"),
                        (r.config += `${t}=${e.parameters[t]}`);
                    r.config && this._mediaObject.fmtp.push(r);
                    for (const t of e.rtcpFeedback)
                      this._mediaObject.rtcpFb.push({
                        payload: e.payloadType,
                        type: t.type,
                        subtype: t.parameter,
                      });
                  }
                  (this._mediaObject.payloads = d.codecs
                    .map((e) => e.payloadType)
                    .join(" ")),
                    (this._mediaObject.ext = []);
                  for (const e of d.headerExtensions)
                    this._mediaObject.ext.push({ uri: e.uri, value: e.id });
                  (this._mediaObject.rtcpMux = "rtcp-mux"),
                    (this._mediaObject.rtcpRsize = "rtcp-rsize");
                  const e = d.encodings[0],
                    t = e.ssrc,
                    r = e.rtx && e.rtx.ssrc ? e.rtx.ssrc : void 0;
                  (this._mediaObject.ssrcs = []),
                    (this._mediaObject.ssrcGroups = []),
                    d.rtcp.cname &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "cname",
                        value: d.rtcp.cname,
                      }),
                    this._planB &&
                      this._mediaObject.ssrcs.push({
                        id: t,
                        attribute: "msid",
                        value: `${u || "-"} ${l}`,
                      }),
                    r &&
                      (d.rtcp.cname &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "cname",
                          value: d.rtcp.cname,
                        }),
                      this._planB &&
                        this._mediaObject.ssrcs.push({
                          id: r,
                          attribute: "msid",
                          value: `${u || "-"} ${l}`,
                        }),
                      this._mediaObject.ssrcGroups.push({
                        semantics: "FID",
                        ssrcs: `${t} ${r}`,
                      }));
                  break;
                }
                case "application":
                  p
                    ? ((this._mediaObject.payloads = n.port),
                      (this._mediaObject.sctpmap = {
                        app: "webrtc-datachannel",
                        sctpmapNumber: n.port,
                        maxMessageSize: n.maxMessageSize,
                      }))
                    : ((this._mediaObject.payloads = "webrtc-datachannel"),
                      (this._mediaObject.sctpPort = n.port),
                      (this._mediaObject.maxMessageSize = n.maxMessageSize));
              }
            }
            setDtlsRole(e) {
              this._mediaObject.setup = "actpass";
            }
            planBReceive({ offerRtpParameters: e, streamId: t, trackId: r }) {
              const n = e.encodings[0],
                a = n.ssrc,
                i = n.rtx && n.rtx.ssrc ? n.rtx.ssrc : void 0,
                s = this._mediaObject.payloads.split(" ");
              for (const t of e.codecs) {
                if (s.includes(String(t.payloadType))) continue;
                const e = {
                  payload: t.payloadType,
                  codec: c(t),
                  rate: t.clockRate,
                };
                t.channels > 1 && (e.encoding = t.channels),
                  this._mediaObject.rtp.push(e);
                const r = { payload: t.payloadType, config: "" };
                for (const e of Object.keys(t.parameters))
                  r.config && (r.config += ";"),
                    (r.config += `${e}=${t.parameters[e]}`);
                r.config && this._mediaObject.fmtp.push(r);
                for (const e of t.rtcpFeedback)
                  this._mediaObject.rtcpFb.push({
                    payload: t.payloadType,
                    type: e.type,
                    subtype: e.parameter,
                  });
              }
              (this._mediaObject.payloads += ` ${e.codecs
                .filter(
                  (e) => !this._mediaObject.payloads.includes(e.payloadType)
                )
                .map((e) => e.payloadType)
                .join(" ")}`),
                (this._mediaObject.payloads =
                  this._mediaObject.payloads.trim()),
                e.rtcp.cname &&
                  this._mediaObject.ssrcs.push({
                    id: a,
                    attribute: "cname",
                    value: e.rtcp.cname,
                  }),
                this._mediaObject.ssrcs.push({
                  id: a,
                  attribute: "msid",
                  value: `${t || "-"} ${r}`,
                }),
                i &&
                  (e.rtcp.cname &&
                    this._mediaObject.ssrcs.push({
                      id: i,
                      attribute: "cname",
                      value: e.rtcp.cname,
                    }),
                  this._mediaObject.ssrcs.push({
                    id: i,
                    attribute: "msid",
                    value: `${t || "-"} ${r}`,
                  }),
                  this._mediaObject.ssrcGroups.push({
                    semantics: "FID",
                    ssrcs: `${a} ${i}`,
                  }));
            }
            planBStopReceiving({ offerRtpParameters: e }) {
              const t = e.encodings[0],
                r = t.ssrc,
                n = t.rtx && t.rtx.ssrc ? t.rtx.ssrc : void 0;
              (this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter(
                (e) => e.id !== r && e.id !== n
              )),
                n &&
                  (this._mediaObject.ssrcGroups =
                    this._mediaObject.ssrcGroups.filter(
                      (e) => e.ssrcs !== `${r} ${n}`
                    ));
            }
          };
        },
        7910: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.RemoteSdp = void 0);
          const s = i(r(766)),
            o = r(8562),
            c = r(6698),
            d = new o.Logger("RemoteSdp");
          t.RemoteSdp = class {
            constructor({
              iceParameters: e,
              iceCandidates: t,
              dtlsParameters: r,
              sctpParameters: n,
              plainRtpParameters: a,
              planB: i = !1,
            }) {
              if (
                ((this._mediaSections = []),
                (this._midToIndex = new Map()),
                (this._iceParameters = e),
                (this._iceCandidates = t),
                (this._dtlsParameters = r),
                (this._sctpParameters = n),
                (this._plainRtpParameters = a),
                (this._planB = i),
                (this._sdpObject = {
                  version: 0,
                  origin: {
                    address: "0.0.0.0",
                    ipVer: 4,
                    netType: "IN",
                    sessionId: 1e4,
                    sessionVersion: 0,
                    username: "mediasoup-client",
                  },
                  name: "-",
                  timing: { start: 0, stop: 0 },
                  media: [],
                }),
                e && e.iceLite && (this._sdpObject.icelite = "ice-lite"),
                r)
              ) {
                this._sdpObject.msidSemantic = { semantic: "WMS", token: "*" };
                const e = this._dtlsParameters.fingerprints.length;
                (this._sdpObject.fingerprint = {
                  type: r.fingerprints[e - 1].algorithm,
                  hash: r.fingerprints[e - 1].value,
                }),
                  (this._sdpObject.groups = [{ type: "BUNDLE", mids: "" }]);
              }
              a &&
                ((this._sdpObject.origin.address = a.ip),
                (this._sdpObject.origin.ipVer = a.ipVersion));
            }
            updateIceParameters(e) {
              d.debug("updateIceParameters() [iceParameters:%o]", e),
                (this._iceParameters = e),
                (this._sdpObject.icelite = e.iceLite ? "ice-lite" : void 0);
              for (const t of this._mediaSections) t.setIceParameters(e);
            }
            updateDtlsRole(e) {
              d.debug("updateDtlsRole() [role:%s]", e),
                (this._dtlsParameters.role = e);
              for (const t of this._mediaSections) t.setDtlsRole(e);
            }
            getNextMediaSectionIdx() {
              for (let e = 0; e < this._mediaSections.length; ++e) {
                const t = this._mediaSections[e];
                if (t.closed) return { idx: e, reuseMid: t.mid };
              }
              return { idx: this._mediaSections.length };
            }
            send({
              offerMediaObject: e,
              reuseMid: t,
              offerRtpParameters: r,
              answerRtpParameters: n,
              codecOptions: a,
              extmapAllowMixed: i = !1,
            }) {
              const s = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                plainRtpParameters: this._plainRtpParameters,
                planB: this._planB,
                offerMediaObject: e,
                offerRtpParameters: r,
                answerRtpParameters: n,
                codecOptions: a,
                extmapAllowMixed: i,
              });
              t
                ? this._replaceMediaSection(s, t)
                : this._midToIndex.has(s.mid)
                ? this._replaceMediaSection(s)
                : this._addMediaSection(s);
            }
            receive({
              mid: e,
              kind: t,
              offerRtpParameters: r,
              streamId: n,
              trackId: a,
            }) {
              const i = this._midToIndex.get(e);
              let s;
              if ((void 0 !== i && (s = this._mediaSections[i]), s))
                s.planBReceive({
                  offerRtpParameters: r,
                  streamId: n,
                  trackId: a,
                }),
                  this._replaceMediaSection(s);
              else {
                s = new c.OfferMediaSection({
                  iceParameters: this._iceParameters,
                  iceCandidates: this._iceCandidates,
                  dtlsParameters: this._dtlsParameters,
                  plainRtpParameters: this._plainRtpParameters,
                  planB: this._planB,
                  mid: e,
                  kind: t,
                  offerRtpParameters: r,
                  streamId: n,
                  trackId: a,
                });
                const i = this._mediaSections.find((e) => e.closed);
                i
                  ? this._replaceMediaSection(s, i.mid)
                  : this._addMediaSection(s);
              }
            }
            disableMediaSection(e) {
              const t = this._midToIndex.get(e);
              if (void 0 === t)
                throw new Error(`no media section found with mid '${e}'`);
              this._mediaSections[t].disable();
            }
            closeMediaSection(e) {
              const t = this._midToIndex.get(e);
              if (void 0 === t)
                throw new Error(`no media section found with mid '${e}'`);
              const r = this._mediaSections[t];
              if (e === this._firstMid)
                return (
                  d.debug(
                    "closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]",
                    e
                  ),
                  void this.disableMediaSection(e)
                );
              r.close(), this._regenerateBundleMids();
            }
            planBStopReceiving({ mid: e, offerRtpParameters: t }) {
              const r = this._midToIndex.get(e);
              if (void 0 === r)
                throw new Error(`no media section found with mid '${e}'`);
              const n = this._mediaSections[r];
              n.planBStopReceiving({ offerRtpParameters: t }),
                this._replaceMediaSection(n);
            }
            sendSctpAssociation({ offerMediaObject: e }) {
              const t = new c.AnswerMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                offerMediaObject: e,
              });
              this._addMediaSection(t);
            }
            receiveSctpAssociation({ oldDataChannelSpec: e = !1 } = {}) {
              const t = new c.OfferMediaSection({
                iceParameters: this._iceParameters,
                iceCandidates: this._iceCandidates,
                dtlsParameters: this._dtlsParameters,
                sctpParameters: this._sctpParameters,
                plainRtpParameters: this._plainRtpParameters,
                mid: "datachannel",
                kind: "application",
                oldDataChannelSpec: e,
              });
              this._addMediaSection(t);
            }
            getSdp() {
              return (
                this._sdpObject.origin.sessionVersion++,
                s.write(this._sdpObject)
              );
            }
            _addMediaSection(e) {
              this._firstMid || (this._firstMid = e.mid),
                this._mediaSections.push(e),
                this._midToIndex.set(e.mid, this._mediaSections.length - 1),
                this._sdpObject.media.push(e.getObject()),
                this._regenerateBundleMids();
            }
            _replaceMediaSection(e, t) {
              if ("string" == typeof t) {
                const r = this._midToIndex.get(t);
                if (void 0 === r)
                  throw new Error(`no media section found for reuseMid '${t}'`);
                const n = this._mediaSections[r];
                (this._mediaSections[r] = e),
                  this._midToIndex.delete(n.mid),
                  this._midToIndex.set(e.mid, r),
                  (this._sdpObject.media[r] = e.getObject()),
                  this._regenerateBundleMids();
              } else {
                const t = this._midToIndex.get(e.mid);
                if (void 0 === t)
                  throw new Error(`no media section found with mid '${e.mid}'`);
                (this._mediaSections[t] = e),
                  (this._sdpObject.media[t] = e.getObject());
              }
            }
            _regenerateBundleMids() {
              this._dtlsParameters &&
                (this._sdpObject.groups[0].mids = this._mediaSections
                  .filter((e) => !e.closed)
                  .map((e) => e.mid)
                  .join(" "));
            }
          };
        },
        2267: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.applyCodecParameters =
              t.getCname =
              t.extractDtlsParameters =
              t.extractRtpCapabilities =
                void 0);
          const s = i(r(766));
          (t.extractRtpCapabilities = function ({ sdpObject: e }) {
            const t = new Map(),
              r = [];
            let n = !1,
              a = !1;
            for (const i of e.media) {
              const e = i.type;
              switch (e) {
                case "audio":
                  if (n) continue;
                  n = !0;
                  break;
                case "video":
                  if (a) continue;
                  a = !0;
                  break;
                default:
                  continue;
              }
              for (const r of i.rtp) {
                const n = {
                  kind: e,
                  mimeType: `${e}/${r.codec}`,
                  preferredPayloadType: r.payload,
                  clockRate: r.rate,
                  channels: r.encoding,
                  parameters: {},
                  rtcpFeedback: [],
                };
                t.set(n.preferredPayloadType, n);
              }
              for (const e of i.fmtp || []) {
                const r = s.parseParams(e.config),
                  n = t.get(e.payload);
                n &&
                  (r &&
                    r.hasOwnProperty("profile-level-id") &&
                    (r["profile-level-id"] = String(r["profile-level-id"])),
                  (n.parameters = r));
              }
              for (const e of i.rtcpFb || []) {
                const r = t.get(e.payload);
                if (!r) continue;
                const n = { type: e.type, parameter: e.subtype };
                n.parameter || delete n.parameter, r.rtcpFeedback.push(n);
              }
              for (const t of i.ext || []) {
                if (t["encrypt-uri"]) continue;
                const n = { kind: e, uri: t.uri, preferredId: t.value };
                r.push(n);
              }
            }
            return { codecs: Array.from(t.values()), headerExtensions: r };
          }),
            (t.extractDtlsParameters = function ({ sdpObject: e }) {
              const t = (e.media || []).find((e) => e.iceUfrag && 0 !== e.port);
              if (!t) throw new Error("no active media section found");
              const r = t.fingerprint || e.fingerprint;
              let n;
              switch (t.setup) {
                case "active":
                  n = "client";
                  break;
                case "passive":
                  n = "server";
                  break;
                case "actpass":
                  n = "auto";
              }
              return {
                role: n,
                fingerprints: [{ algorithm: r.type, value: r.hash }],
              };
            }),
            (t.getCname = function ({ offerMediaObject: e }) {
              const t = (e.ssrcs || []).find((e) => "cname" === e.attribute);
              return t ? t.value : "";
            }),
            (t.applyCodecParameters = function ({
              offerRtpParameters: e,
              answerMediaObject: t,
            }) {
              for (const r of e.codecs) {
                const e = r.mimeType.toLowerCase();
                if ("audio/opus" !== e) continue;
                if (!(t.rtp || []).find((e) => e.payload === r.payloadType))
                  continue;
                t.fmtp = t.fmtp || [];
                let n = t.fmtp.find((e) => e.payload === r.payloadType);
                n ||
                  ((n = { payload: r.payloadType, config: "" }),
                  t.fmtp.push(n));
                const a = s.parseParams(n.config);
                switch (e) {
                  case "audio/opus": {
                    const e = r.parameters["sprop-stereo"];
                    void 0 !== e && (a.stereo = e ? 1 : 0);
                    break;
                  }
                }
                n.config = "";
                for (const e of Object.keys(a))
                  n.config && (n.config += ";"), (n.config += `${e}=${a[e]}`);
              }
            });
        },
        9875: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e, track: t }) {
              let r;
              const n = new Set();
              for (const a of e.ssrcs || []) {
                if ("msid" !== a.attribute) continue;
                if (a.value.split(" ")[1] === t.id) {
                  const e = a.id;
                  n.add(e), r || (r = e);
                }
              }
              if (0 === n.size)
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              const a = new Map();
              for (const t of e.ssrcGroups || []) {
                if ("FID" !== t.semantics) continue;
                let [e, r] = t.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (r = Number(r)),
                  n.has(e) && (n.delete(e), n.delete(r), a.set(e, r));
              }
              for (const e of n) a.set(e, null);
              const i = [];
              for (const [e, t] of a) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), i.push(r);
              }
              return i;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              track: t,
              numStreams: r,
            }) {
              if (r <= 1)
                throw new TypeError("numStreams must be greater than 1");
              let n, a, i;
              if (
                !(e.ssrcs || []).find((e) => {
                  if ("msid" !== e.attribute) return !1;
                  return (
                    e.value.split(" ")[1] === t.id &&
                    ((n = e.id), (i = e.value.split(" ")[0]), !0)
                  );
                })
              )
                throw new Error(
                  `a=ssrc line with msid information not found [track.id:${t.id}]`
                );
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === n && ((a = Number(t[1])), !0);
              });
              const s = e.ssrcs.find(
                (e) => "cname" === e.attribute && e.id === n
              );
              if (!s)
                throw new Error(
                  `a=ssrc line with cname information not found [track.id:${t.id}]`
                );
              const o = s.value,
                c = [],
                d = [];
              for (let e = 0; e < r; ++e) c.push(n + e), a && d.push(a + e);
              (e.ssrcGroups = e.ssrcGroups || []),
                (e.ssrcs = e.ssrcs || []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: c.join(" ") });
              for (let r = 0; r < c.length; ++r) {
                const n = c[r];
                e.ssrcs.push({ id: n, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: n,
                    attribute: "msid",
                    value: `${i} ${t.id}`,
                  });
              }
              for (let r = 0; r < d.length; ++r) {
                const n = c[r],
                  a = d[r];
                e.ssrcs.push({ id: a, attribute: "cname", value: o }),
                  e.ssrcs.push({
                    id: a,
                    attribute: "msid",
                    value: `${i} ${t.id}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${n} ${a}` });
              }
            });
        },
        9072: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.addLegacySimulcast = t.getRtpEncodings = void 0),
            (t.getRtpEncodings = function ({ offerMediaObject: e }) {
              const t = new Set();
              for (const r of e.ssrcs || []) {
                const e = r.id;
                t.add(e);
              }
              if (0 === t.size) throw new Error("no a=ssrc lines found");
              const r = new Map();
              for (const n of e.ssrcGroups || []) {
                if ("FID" !== n.semantics) continue;
                let [e, a] = n.ssrcs.split(/\s+/);
                (e = Number(e)),
                  (a = Number(a)),
                  t.has(e) && (t.delete(e), t.delete(a), r.set(e, a));
              }
              for (const e of t) r.set(e, null);
              const n = [];
              for (const [e, t] of r) {
                const r = { ssrc: e };
                t && (r.rtx = { ssrc: t }), n.push(r);
              }
              return n;
            }),
            (t.addLegacySimulcast = function ({
              offerMediaObject: e,
              numStreams: t,
            }) {
              if (t <= 1)
                throw new TypeError("numStreams must be greater than 1");
              const r = (e.ssrcs || []).find((e) => "msid" === e.attribute);
              if (!r)
                throw new Error("a=ssrc line with msid information not found");
              const [n, a] = r.value.split(" "),
                i = r.id;
              let s;
              (e.ssrcGroups || []).some((e) => {
                if ("FID" !== e.semantics) return !1;
                const t = e.ssrcs.split(/\s+/);
                return Number(t[0]) === i && ((s = Number(t[1])), !0);
              });
              const o = e.ssrcs.find((e) => "cname" === e.attribute);
              if (!o)
                throw new Error("a=ssrc line with cname information not found");
              const c = o.value,
                d = [],
                u = [];
              for (let e = 0; e < t; ++e) d.push(i + e), s && u.push(s + e);
              (e.ssrcGroups = []),
                (e.ssrcs = []),
                e.ssrcGroups.push({ semantics: "SIM", ssrcs: d.join(" ") });
              for (let t = 0; t < d.length; ++t) {
                const r = d[t];
                e.ssrcs.push({ id: r, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: r,
                    attribute: "msid",
                    value: `${n} ${a}`,
                  });
              }
              for (let t = 0; t < u.length; ++t) {
                const r = d[t],
                  i = u[t];
                e.ssrcs.push({ id: i, attribute: "cname", value: c }),
                  e.ssrcs.push({
                    id: i,
                    attribute: "msid",
                    value: `${n} ${a}`,
                  }),
                  e.ssrcGroups.push({ semantics: "FID", ssrcs: `${r} ${i}` });
              }
            });
        },
        960: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              },
            s =
              (this && this.__importDefault) ||
              function (e) {
                return e && e.__esModule ? e : { default: e };
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.debug =
              t.parseScalabilityMode =
              t.detectDevice =
              t.Device =
              t.version =
              t.types =
                void 0);
          const o = s(r(1227));
          t.debug = o.default;
          const c = r(3120);
          Object.defineProperty(t, "Device", {
            enumerable: !0,
            get: function () {
              return c.Device;
            },
          }),
            Object.defineProperty(t, "detectDevice", {
              enumerable: !0,
              get: function () {
                return c.detectDevice;
              },
            });
          const d = i(r(53));
          (t.types = d), (t.version = "3.6.47");
          var u = r(2770);
          Object.defineProperty(t, "parseScalabilityMode", {
            enumerable: !0,
            get: function () {
              return u.parse;
            },
          });
        },
        5280: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__setModuleDefault) ||
              (Object.create
                ? function (e, t) {
                    Object.defineProperty(e, "default", {
                      enumerable: !0,
                      value: t,
                    });
                  }
                : function (e, t) {
                    e.default = t;
                  }),
            i =
              (this && this.__importStar) ||
              function (e) {
                if (e && e.__esModule) return e;
                var t = {};
                if (null != e)
                  for (var r in e)
                    "default" !== r &&
                      Object.prototype.hasOwnProperty.call(e, r) &&
                      n(t, e, r);
                return a(t, e), t;
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.canReceive =
              t.canSend =
              t.generateProbatorRtpParameters =
              t.reduceCodecs =
              t.getSendingRemoteRtpParameters =
              t.getSendingRtpParameters =
              t.getRecvRtpCapabilities =
              t.getExtendedRtpCapabilities =
              t.validateSctpStreamParameters =
              t.validateSctpParameters =
              t.validateNumSctpStreams =
              t.validateSctpCapabilities =
              t.validateRtcpParameters =
              t.validateRtpEncodingParameters =
              t.validateRtpHeaderExtensionParameters =
              t.validateRtpCodecParameters =
              t.validateRtpParameters =
              t.validateRtpHeaderExtension =
              t.validateRtcpFeedback =
              t.validateRtpCodecCapability =
              t.validateRtpCapabilities =
                void 0);
          const s = i(r(7855)),
            o = i(r(3347));
          function c(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if (
              ((e.kind = r[1].toLowerCase()),
              e.preferredPayloadType &&
                "number" != typeof e.preferredPayloadType)
            )
              throw new TypeError("invalid codec.preferredPayloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === e.kind
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) d(t);
          }
          function d(e) {
            if ("object" != typeof e)
              throw new TypeError("fb is not an object");
            if (!e.type || "string" != typeof e.type)
              throw new TypeError("missing fb.type");
            (e.parameter && "string" == typeof e.parameter) ||
              (e.parameter = "");
          }
          function u(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if ("audio" !== e.kind && "video" !== e.kind)
              throw new TypeError("invalid ext.kind");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.preferredId)
              throw new TypeError("missing ext.preferredId");
            if (e.preferredEncrypt && "boolean" != typeof e.preferredEncrypt)
              throw new TypeError("invalid ext.preferredEncrypt");
            if (
              (e.preferredEncrypt || (e.preferredEncrypt = !1),
              e.direction && "string" != typeof e.direction)
            )
              throw new TypeError("invalid ext.direction");
            e.direction || (e.direction = "sendrecv");
          }
          function l(e) {
            if ("object" != typeof e)
              throw new TypeError("params is not an object");
            if (e.mid && "string" != typeof e.mid)
              throw new TypeError("params.mid is not a string");
            if (!Array.isArray(e.codecs))
              throw new TypeError("missing params.codecs");
            for (const t of e.codecs) p(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("params.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) h(t);
            if (e.encodings && !Array.isArray(e.encodings))
              throw new TypeError("params.encodings is not an array");
            e.encodings || (e.encodings = []);
            for (const t of e.encodings) _(t);
            if (e.rtcp && "object" != typeof e.rtcp)
              throw new TypeError("params.rtcp is not an object");
            e.rtcp || (e.rtcp = {}), f(e.rtcp);
          }
          function p(e) {
            const t = new RegExp("^(audio|video)/(.+)", "i");
            if ("object" != typeof e)
              throw new TypeError("codec is not an object");
            if (!e.mimeType || "string" != typeof e.mimeType)
              throw new TypeError("missing codec.mimeType");
            const r = t.exec(e.mimeType);
            if (!r) throw new TypeError("invalid codec.mimeType");
            if ("number" != typeof e.payloadType)
              throw new TypeError("missing codec.payloadType");
            if ("number" != typeof e.clockRate)
              throw new TypeError("missing codec.clockRate");
            "audio" === r[1].toLowerCase()
              ? "number" != typeof e.channels && (e.channels = 1)
              : delete e.channels,
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError(
                  `invalid codec parameter [key:${t}s, value:${r}]`
                );
              if ("apt" === t && "number" != typeof r)
                throw new TypeError("invalid codec apt parameter");
            }
            (e.rtcpFeedback && Array.isArray(e.rtcpFeedback)) ||
              (e.rtcpFeedback = []);
            for (const t of e.rtcpFeedback) d(t);
          }
          function h(e) {
            if ("object" != typeof e)
              throw new TypeError("ext is not an object");
            if (!e.uri || "string" != typeof e.uri)
              throw new TypeError("missing ext.uri");
            if ("number" != typeof e.id) throw new TypeError("missing ext.id");
            if (e.encrypt && "boolean" != typeof e.encrypt)
              throw new TypeError("invalid ext.encrypt");
            e.encrypt || (e.encrypt = !1),
              (e.parameters && "object" == typeof e.parameters) ||
                (e.parameters = {});
            for (const t of Object.keys(e.parameters)) {
              let r = e.parameters[t];
              if (
                (void 0 === r && ((e.parameters[t] = ""), (r = "")),
                "string" != typeof r && "number" != typeof r)
              )
                throw new TypeError("invalid header extension parameter");
            }
          }
          function _(e) {
            if ("object" != typeof e)
              throw new TypeError("encoding is not an object");
            if (e.ssrc && "number" != typeof e.ssrc)
              throw new TypeError("invalid encoding.ssrc");
            if (e.rid && "string" != typeof e.rid)
              throw new TypeError("invalid encoding.rid");
            if (e.rtx && "object" != typeof e.rtx)
              throw new TypeError("invalid encoding.rtx");
            if (e.rtx && "number" != typeof e.rtx.ssrc)
              throw new TypeError("missing encoding.rtx.ssrc");
            if (
              ((e.dtx && "boolean" == typeof e.dtx) || (e.dtx = !1),
              e.scalabilityMode && "string" != typeof e.scalabilityMode)
            )
              throw new TypeError("invalid encoding.scalabilityMode");
          }
          function f(e) {
            if ("object" != typeof e)
              throw new TypeError("rtcp is not an object");
            if (e.cname && "string" != typeof e.cname)
              throw new TypeError("invalid rtcp.cname");
            (e.reducedSize && "boolean" == typeof e.reducedSize) ||
              (e.reducedSize = !0);
          }
          function m(e) {
            if ("object" != typeof e)
              throw new TypeError("numStreams is not an object");
            if ("number" != typeof e.OS)
              throw new TypeError("missing numStreams.OS");
            if ("number" != typeof e.MIS)
              throw new TypeError("missing numStreams.MIS");
          }
          function v(e) {
            return !!e && /.+\/rtx$/i.test(e.mimeType);
          }
          function g(e, t, { strict: r = !1, modify: n = !1 } = {}) {
            const a = e.mimeType.toLowerCase();
            if (a !== t.mimeType.toLowerCase()) return !1;
            if (e.clockRate !== t.clockRate) return !1;
            if (e.channels !== t.channels) return !1;
            switch (a) {
              case "video/h264":
                if (r) {
                  if (
                    (e.parameters["packetization-mode"] || 0) !==
                    (t.parameters["packetization-mode"] || 0)
                  )
                    return !1;
                  if (!s.isSameProfile(e.parameters, t.parameters)) return !1;
                  let r;
                  try {
                    r = s.generateProfileLevelIdForAnswer(
                      e.parameters,
                      t.parameters
                    );
                  } catch (e) {
                    return !1;
                  }
                  n &&
                    (r
                      ? ((e.parameters["profile-level-id"] = r),
                        (t.parameters["profile-level-id"] = r))
                      : (delete e.parameters["profile-level-id"],
                        delete t.parameters["profile-level-id"]));
                }
                break;
              case "video/vp9":
                if (r) {
                  if (
                    (e.parameters["profile-id"] || 0) !==
                    (t.parameters["profile-id"] || 0)
                  )
                    return !1;
                }
            }
            return !0;
          }
          function y(e, t) {
            return (!e.kind || !t.kind || e.kind === t.kind) && e.uri === t.uri;
          }
          function b(e, t) {
            const r = [];
            for (const n of e.rtcpFeedback || []) {
              const e = (t.rtcpFeedback || []).find(
                (e) =>
                  e.type === n.type &&
                  (e.parameter === n.parameter ||
                    (!e.parameter && !n.parameter))
              );
              e && r.push(e);
            }
            return r;
          }
          (t.validateRtpCapabilities = function (e) {
            if ("object" != typeof e)
              throw new TypeError("caps is not an object");
            if (e.codecs && !Array.isArray(e.codecs))
              throw new TypeError("caps.codecs is not an array");
            e.codecs || (e.codecs = []);
            for (const t of e.codecs) c(t);
            if (e.headerExtensions && !Array.isArray(e.headerExtensions))
              throw new TypeError("caps.headerExtensions is not an array");
            e.headerExtensions || (e.headerExtensions = []);
            for (const t of e.headerExtensions) u(t);
          }),
            (t.validateRtpCodecCapability = c),
            (t.validateRtcpFeedback = d),
            (t.validateRtpHeaderExtension = u),
            (t.validateRtpParameters = l),
            (t.validateRtpCodecParameters = p),
            (t.validateRtpHeaderExtensionParameters = h),
            (t.validateRtpEncodingParameters = _),
            (t.validateRtcpParameters = f),
            (t.validateSctpCapabilities = function (e) {
              if ("object" != typeof e)
                throw new TypeError("caps is not an object");
              if (!e.numStreams || "object" != typeof e.numStreams)
                throw new TypeError("missing caps.numStreams");
              m(e.numStreams);
            }),
            (t.validateNumSctpStreams = m),
            (t.validateSctpParameters = function (e) {
              if ("object" != typeof e)
                throw new TypeError("params is not an object");
              if ("number" != typeof e.port)
                throw new TypeError("missing params.port");
              if ("number" != typeof e.OS)
                throw new TypeError("missing params.OS");
              if ("number" != typeof e.MIS)
                throw new TypeError("missing params.MIS");
              if ("number" != typeof e.maxMessageSize)
                throw new TypeError("missing params.maxMessageSize");
            }),
            (t.validateSctpStreamParameters = function (e) {
              if ("object" != typeof e)
                throw new TypeError("params is not an object");
              if ("number" != typeof e.streamId)
                throw new TypeError("missing params.streamId");
              let t = !1;
              if (
                ("boolean" == typeof e.ordered ? (t = !0) : (e.ordered = !0),
                e.maxPacketLifeTime && "number" != typeof e.maxPacketLifeTime)
              )
                throw new TypeError("invalid params.maxPacketLifeTime");
              if (e.maxRetransmits && "number" != typeof e.maxRetransmits)
                throw new TypeError("invalid params.maxRetransmits");
              if (e.maxPacketLifeTime && e.maxRetransmits)
                throw new TypeError(
                  "cannot provide both maxPacketLifeTime and maxRetransmits"
                );
              if (t && e.ordered && (e.maxPacketLifeTime || e.maxRetransmits))
                throw new TypeError(
                  "cannot be ordered with maxPacketLifeTime or maxRetransmits"
                );
              if (
                (t ||
                  (!e.maxPacketLifeTime && !e.maxRetransmits) ||
                  (e.ordered = !1),
                e.label && "string" != typeof e.label)
              )
                throw new TypeError("invalid params.label");
              if (e.protocol && "string" != typeof e.protocol)
                throw new TypeError("invalid params.protocol");
            }),
            (t.getExtendedRtpCapabilities = function (e, t) {
              const r = { codecs: [], headerExtensions: [] };
              for (const n of t.codecs || []) {
                if (v(n)) continue;
                const t = (e.codecs || []).find((e) =>
                  g(e, n, { strict: !0, modify: !0 })
                );
                if (!t) continue;
                const a = {
                  mimeType: t.mimeType,
                  kind: t.kind,
                  clockRate: t.clockRate,
                  channels: t.channels,
                  localPayloadType: t.preferredPayloadType,
                  localRtxPayloadType: void 0,
                  remotePayloadType: n.preferredPayloadType,
                  remoteRtxPayloadType: void 0,
                  localParameters: t.parameters,
                  remoteParameters: n.parameters,
                  rtcpFeedback: b(t, n),
                };
                r.codecs.push(a);
              }
              for (const n of r.codecs) {
                const r = e.codecs.find(
                    (e) => v(e) && e.parameters.apt === n.localPayloadType
                  ),
                  a = t.codecs.find(
                    (e) => v(e) && e.parameters.apt === n.remotePayloadType
                  );
                r &&
                  a &&
                  ((n.localRtxPayloadType = r.preferredPayloadType),
                  (n.remoteRtxPayloadType = a.preferredPayloadType));
              }
              for (const n of t.headerExtensions) {
                const t = e.headerExtensions.find((e) => y(e, n));
                if (!t) continue;
                const a = {
                  kind: n.kind,
                  uri: n.uri,
                  sendId: t.preferredId,
                  recvId: n.preferredId,
                  encrypt: t.preferredEncrypt,
                  direction: "sendrecv",
                };
                switch (n.direction) {
                  case "sendrecv":
                    a.direction = "sendrecv";
                    break;
                  case "recvonly":
                    a.direction = "sendonly";
                    break;
                  case "sendonly":
                    a.direction = "recvonly";
                    break;
                  case "inactive":
                    a.direction = "inactive";
                }
                r.headerExtensions.push(a);
              }
              return r;
            }),
            (t.getRecvRtpCapabilities = function (e) {
              const t = { codecs: [], headerExtensions: [] };
              for (const r of e.codecs) {
                const e = {
                  mimeType: r.mimeType,
                  kind: r.kind,
                  preferredPayloadType: r.remotePayloadType,
                  clockRate: r.clockRate,
                  channels: r.channels,
                  parameters: r.localParameters,
                  rtcpFeedback: r.rtcpFeedback,
                };
                if ((t.codecs.push(e), !r.remoteRtxPayloadType)) continue;
                const n = {
                  mimeType: `${r.kind}/rtx`,
                  kind: r.kind,
                  preferredPayloadType: r.remoteRtxPayloadType,
                  clockRate: r.clockRate,
                  parameters: { apt: r.remotePayloadType },
                  rtcpFeedback: [],
                };
                t.codecs.push(n);
              }
              for (const r of e.headerExtensions) {
                if ("sendrecv" !== r.direction && "recvonly" !== r.direction)
                  continue;
                const e = {
                  kind: r.kind,
                  uri: r.uri,
                  preferredId: r.recvId,
                  preferredEncrypt: r.encrypt,
                  direction: r.direction,
                };
                t.headerExtensions.push(e);
              }
              return t;
            }),
            (t.getSendingRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const n of t.codecs) {
                if (n.kind !== e) continue;
                const t = {
                  mimeType: n.mimeType,
                  payloadType: n.localPayloadType,
                  clockRate: n.clockRate,
                  channels: n.channels,
                  parameters: n.localParameters,
                  rtcpFeedback: n.rtcpFeedback,
                };
                if ((r.codecs.push(t), n.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${n.kind}/rtx`,
                    payloadType: n.localRtxPayloadType,
                    clockRate: n.clockRate,
                    parameters: { apt: n.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const n of t.headerExtensions) {
                if (
                  (n.kind && n.kind !== e) ||
                  ("sendrecv" !== n.direction && "sendonly" !== n.direction)
                )
                  continue;
                const t = {
                  uri: n.uri,
                  id: n.sendId,
                  encrypt: n.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              return r;
            }),
            (t.getSendingRemoteRtpParameters = function (e, t) {
              const r = {
                mid: void 0,
                codecs: [],
                headerExtensions: [],
                encodings: [],
                rtcp: {},
              };
              for (const n of t.codecs) {
                if (n.kind !== e) continue;
                const t = {
                  mimeType: n.mimeType,
                  payloadType: n.localPayloadType,
                  clockRate: n.clockRate,
                  channels: n.channels,
                  parameters: n.remoteParameters,
                  rtcpFeedback: n.rtcpFeedback,
                };
                if ((r.codecs.push(t), n.localRtxPayloadType)) {
                  const e = {
                    mimeType: `${n.kind}/rtx`,
                    payloadType: n.localRtxPayloadType,
                    clockRate: n.clockRate,
                    parameters: { apt: n.localPayloadType },
                    rtcpFeedback: [],
                  };
                  r.codecs.push(e);
                }
              }
              for (const n of t.headerExtensions) {
                if (
                  (n.kind && n.kind !== e) ||
                  ("sendrecv" !== n.direction && "sendonly" !== n.direction)
                )
                  continue;
                const t = {
                  uri: n.uri,
                  id: n.sendId,
                  encrypt: n.encrypt,
                  parameters: {},
                };
                r.headerExtensions.push(t);
              }
              if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "goog-remb" !== e.type
                  );
              else if (
                r.headerExtensions.some(
                  (e) =>
                    "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" ===
                    e.uri
                )
              )
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type
                  );
              else
                for (const e of r.codecs)
                  e.rtcpFeedback = (e.rtcpFeedback || []).filter(
                    (e) => "transport-cc" !== e.type && "goog-remb" !== e.type
                  );
              return r;
            }),
            (t.reduceCodecs = function (e, t) {
              const r = [];
              if (t) {
                for (let n = 0; n < e.length; ++n)
                  if (g(e[n], t)) {
                    r.push(e[n]), v(e[n + 1]) && r.push(e[n + 1]);
                    break;
                  }
                if (0 === r.length)
                  throw new TypeError("no matching codec found");
              } else r.push(e[0]), v(e[1]) && r.push(e[1]);
              return r;
            }),
            (t.generateProbatorRtpParameters = function (e) {
              l((e = o.clone(e, {})));
              const t = {
                mid: "probator",
                codecs: [],
                headerExtensions: [],
                encodings: [{ ssrc: 1234 }],
                rtcp: { cname: "probator" },
              };
              return (
                t.codecs.push(e.codecs[0]),
                (t.codecs[0].payloadType = 127),
                (t.headerExtensions = e.headerExtensions),
                t
              );
            }),
            (t.canSend = function (e, t) {
              return t.codecs.some((t) => t.kind === e);
            }),
            (t.canReceive = function (e, t) {
              if ((l(e), 0 === e.codecs.length)) return !1;
              const r = e.codecs[0];
              return t.codecs.some(
                (e) => e.remotePayloadType === r.payloadType
              );
            });
        },
        2770: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.parse = void 0);
          const r = new RegExp("^[LS]([1-9]\\d{0,1})T([1-9]\\d{0,1})");
          t.parse = function (e) {
            const t = r.exec(e || "");
            return t
              ? { spatialLayers: Number(t[1]), temporalLayers: Number(t[2]) }
              : { spatialLayers: 1, temporalLayers: 1 };
          };
        },
        53: function (e, t, r) {
          "use strict";
          var n =
              (this && this.__createBinding) ||
              (Object.create
                ? function (e, t, r, n) {
                    void 0 === n && (n = r),
                      Object.defineProperty(e, n, {
                        enumerable: !0,
                        get: function () {
                          return t[r];
                        },
                      });
                  }
                : function (e, t, r, n) {
                    void 0 === n && (n = r), (e[n] = t[r]);
                  }),
            a =
              (this && this.__exportStar) ||
              function (e, t) {
                for (var r in e)
                  "default" === r ||
                    Object.prototype.hasOwnProperty.call(t, r) ||
                    n(t, e, r);
              };
          Object.defineProperty(t, "__esModule", { value: !0 }),
            a(r(3120), t),
            a(r(5202), t),
            a(r(6569), t),
            a(r(9514), t),
            a(r(5504), t),
            a(r(1623), t),
            a(r(4879), t),
            a(r(7669), t),
            a(r(9316), t),
            a(r(9992), t);
        },
        3347: (e, t) => {
          "use strict";
          Object.defineProperty(t, "__esModule", { value: !0 }),
            (t.generateRandomNumber = t.clone = void 0),
            (t.clone = function (e, t) {
              return void 0 === e ? t : JSON.parse(JSON.stringify(e));
            }),
            (t.generateRandomNumber = function () {
              return Math.round(1e7 * Math.random());
            });
        },
        7824: (e) => {
          var t = 1e3,
            r = 60 * t,
            n = 60 * r,
            a = 24 * n,
            i = 7 * a,
            s = 365.25 * a;
          function o(e, t, r, n) {
            var a = t >= 1.5 * r;
            return Math.round(e / r) + " " + n + (a ? "s" : "");
          }
          e.exports = function (e, c) {
            c = c || {};
            var d = typeof e;
            if ("string" === d && e.length > 0)
              return (function (e) {
                if ((e = String(e)).length > 100) return;
                var o =
                  /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
                    e
                  );
                if (!o) return;
                var c = parseFloat(o[1]);
                switch ((o[2] || "ms").toLowerCase()) {
                  case "years":
                  case "year":
                  case "yrs":
                  case "yr":
                  case "y":
                    return c * s;
                  case "weeks":
                  case "week":
                  case "w":
                    return c * i;
                  case "days":
                  case "day":
                  case "d":
                    return c * a;
                  case "hours":
                  case "hour":
                  case "hrs":
                  case "hr":
                  case "h":
                    return c * n;
                  case "minutes":
                  case "minute":
                  case "mins":
                  case "min":
                  case "m":
                    return c * r;
                  case "seconds":
                  case "second":
                  case "secs":
                  case "sec":
                  case "s":
                    return c * t;
                  case "milliseconds":
                  case "millisecond":
                  case "msecs":
                  case "msec":
                  case "ms":
                    return c;
                  default:
                    return;
                }
              })(e);
            if ("number" === d && isFinite(e))
              return c.long
                ? (function (e) {
                    var i = Math.abs(e);
                    if (i >= a) return o(e, i, a, "day");
                    if (i >= n) return o(e, i, n, "hour");
                    if (i >= r) return o(e, i, r, "minute");
                    if (i >= t) return o(e, i, t, "second");
                    return e + " ms";
                  })(e)
                : (function (e) {
                    var i = Math.abs(e);
                    if (i >= a) return Math.round(e / a) + "d";
                    if (i >= n) return Math.round(e / n) + "h";
                    if (i >= r) return Math.round(e / r) + "m";
                    if (i >= t) return Math.round(e / t) + "s";
                    return e + "ms";
                  })(e);
            throw new Error(
              "val is not a non-empty string or a valid number. val=" +
                JSON.stringify(e)
            );
          };
        },
        7576: (e, t, r) => {
          const { EventEmitter: n } = r(7187),
            a = r(3417);
          e.exports = class extends n {
            constructor(e) {
              super(),
                this.setMaxListeners(1 / 0),
                (this._logger = e || new a("EnhancedEventEmitter"));
            }
            safeEmit(e, ...t) {
              try {
                this.emit(e, ...t);
              } catch (t) {
                this._logger.error(
                  "safeEmit() | event listener threw an error [event:%s]:%o",
                  e,
                  t
                );
              }
            }
            async safeEmitAsPromise(e, ...t) {
              return new Promise((r, n) => {
                this.safeEmit(e, ...t, r, n);
              });
            }
          };
        },
        3417: (e, t, r) => {
          const n = r(1227),
            a = "protoo-client";
          e.exports = class {
            constructor(e) {
              e
                ? ((this._debug = n(`${a}:${e}`)),
                  (this._warn = n(`${a}:WARN:${e}`)),
                  (this._error = n(`${a}:ERROR:${e}`)))
                : ((this._debug = n(a)),
                  (this._warn = n(`${a}:WARN`)),
                  (this._error = n(`${a}:ERROR`))),
                (this._debug.log = console.info.bind(console)),
                (this._warn.log = console.warn.bind(console)),
                (this._error.log = console.error.bind(console));
            }
            get debug() {
              return this._debug;
            }
            get warn() {
              return this._warn;
            }
            get error() {
              return this._error;
            }
          };
        },
        6508: (e, t, r) => {
          const n = r(3417),
            { generateRandomNumber: a } = r(5654),
            i = new n("Message");
          e.exports = class {
            static parse(e) {
              let t;
              const r = {};
              try {
                t = JSON.parse(e);
              } catch (e) {
                return void i.error("parse() | invalid JSON: %s", e);
              }
              if ("object" == typeof t && !Array.isArray(t)) {
                if (t.request) {
                  if (((r.request = !0), "string" != typeof t.method))
                    return void i.error(
                      "parse() | missing/invalid method field"
                    );
                  if ("number" != typeof t.id)
                    return void i.error("parse() | missing/invalid id field");
                  (r.id = t.id), (r.method = t.method), (r.data = t.data || {});
                } else if (t.response) {
                  if (((r.response = !0), "number" != typeof t.id))
                    return void i.error("parse() | missing/invalid id field");
                  (r.id = t.id),
                    t.ok
                      ? ((r.ok = !0), (r.data = t.data || {}))
                      : ((r.ok = !1),
                        (r.errorCode = t.errorCode),
                        (r.errorReason = t.errorReason));
                } else {
                  if (!t.notification)
                    return void i.error(
                      "parse() | missing request/response field"
                    );
                  if (((r.notification = !0), "string" != typeof t.method))
                    return void i.error(
                      "parse() | missing/invalid method field"
                    );
                  (r.method = t.method), (r.data = t.data || {});
                }
                return r;
              }
              i.error("parse() | not an object");
            }
            static createRequest(e, t) {
              return { request: !0, id: a(), method: e, data: t || {} };
            }
            static createSuccessResponse(e, t) {
              return { response: !0, id: e.id, ok: !0, data: t || {} };
            }
            static createErrorResponse(e, t, r) {
              return {
                response: !0,
                id: e.id,
                ok: !1,
                errorCode: t,
                errorReason: r,
              };
            }
            static createNotification(e, t) {
              return { notification: !0, method: e, data: t || {} };
            }
          };
        },
        7502: (e, t, r) => {
          const n = r(3417),
            a = r(7576),
            i = r(6508),
            s = new n("Peer");
          e.exports = class extends a {
            constructor(e) {
              super(s),
                s.debug("constructor()"),
                (this._closed = !1),
                (this._transport = e),
                (this._connected = !1),
                (this._data = {}),
                (this._sents = new Map()),
                this._handleTransport();
            }
            get closed() {
              return this._closed;
            }
            get connected() {
              return this._connected;
            }
            get data() {
              return this._data;
            }
            set data(e) {
              throw new Error("cannot override data object");
            }
            close() {
              if (!this._closed) {
                s.debug("close()"),
                  (this._closed = !0),
                  (this._connected = !1),
                  this._transport.close();
                for (const e of this._sents.values()) e.close();
                this.safeEmit("close");
              }
            }
            async request(e, t) {
              const r = i.createRequest(e, t);
              return (
                this._logger.debug("request() [method:%s, id:%s]", e, r.id),
                await this._transport.send(r),
                new Promise((e, t) => {
                  const n = 1500 * (15 + 0.1 * this._sents.size),
                    a = {
                      id: r.id,
                      method: r.method,
                      resolve: (t) => {
                        this._sents.delete(r.id) &&
                          (clearTimeout(a.timer), e(t));
                      },
                      reject: (e) => {
                        this._sents.delete(r.id) &&
                          (clearTimeout(a.timer), t(e));
                      },
                      timer: setTimeout(() => {
                        this._sents.delete(r.id) &&
                          t(new Error("request timeout"));
                      }, n),
                      close: () => {
                        clearTimeout(a.timer), t(new Error("peer closed"));
                      },
                    };
                  this._sents.set(r.id, a);
                })
              );
            }
            async notify(e, t) {
              const r = i.createNotification(e, t);
              this._logger.debug("notify() [method:%s]", e),
                await this._transport.send(r);
            }
            _handleTransport() {
              if (this._transport.closed)
                return (
                  (this._closed = !0),
                  void setTimeout(() => {
                    this._closed ||
                      ((this._connected = !1), this.safeEmit("close"));
                  })
                );
              this._transport.on("open", () => {
                this._closed ||
                  (s.debug('emit "open"'),
                  (this._connected = !0),
                  this.safeEmit("open"));
              }),
                this._transport.on("disconnected", () => {
                  this._closed ||
                    (s.debug('emit "disconnected"'),
                    (this._connected = !1),
                    this.safeEmit("disconnected"));
                }),
                this._transport.on("failed", (e) => {
                  this._closed ||
                    (s.debug('emit "failed" [currentAttempt:%s]', e),
                    (this._connected = !1),
                    this.safeEmit("failed", e));
                }),
                this._transport.on("close", () => {
                  this._closed ||
                    ((this._closed = !0),
                    s.debug('emit "close"'),
                    (this._connected = !1),
                    this.safeEmit("close"));
                }),
                this._transport.on("message", (e) => {
                  e.request
                    ? this._handleRequest(e)
                    : e.response
                    ? this._handleResponse(e)
                    : e.notification && this._handleNotification(e);
                });
            }
            _handleRequest(e) {
              try {
                this.emit(
                  "request",
                  e,
                  (t) => {
                    const r = i.createSuccessResponse(e, t);
                    this._transport.send(r).catch(() => {});
                  },
                  (t, r) => {
                    t instanceof Error
                      ? ((r = t.message), (t = 500))
                      : "number" == typeof t &&
                        r instanceof Error &&
                        (r = r.message);
                    const n = i.createErrorResponse(e, t, r);
                    this._transport.send(n).catch(() => {});
                  }
                );
              } catch (t) {
                const r = i.createErrorResponse(e, 500, String(t));
                this._transport.send(r).catch(() => {});
              }
            }
            _handleResponse(e) {
              const t = this._sents.get(e.id);
              if (t)
                if (e.ok) t.resolve(e.data);
                else {
                  const r = new Error(e.errorReason);
                  (r.code = e.errorCode), t.reject(r);
                }
              else
                s.error(
                  "received response does not match any sent request [id:%s]",
                  e.id
                );
            }
            _handleNotification(e) {
              this.safeEmit("notification", e);
            }
          };
        },
        9293: (e, t, r) => {
          const { version: n } = r(7002),
            a = r(7502),
            i = r(2165);
          (t._z = a), (t.qo = i);
        },
        2165: (e, t, r) => {
          const n = r(5840).w3cwebsocket,
            a = r(9353),
            i = r(3417),
            s = r(7576),
            o = r(6508),
            c = { retries: 10, factor: 2, minTimeout: 1e3, maxTimeout: 8e3 },
            d = new i("WebSocketTransport");
          e.exports = class extends s {
            constructor(e, t) {
              super(d),
                d.debug("constructor() [url:%s, options:%o]", e, t),
                (this._closed = !1),
                (this._url = e),
                (this._options = t || {}),
                (this._ws = null),
                this._runWebSocket();
            }
            get closed() {
              return this._closed;
            }
            close() {
              if (!this._closed) {
                d.debug("close()"), (this._closed = !0), this.safeEmit("close");
                try {
                  (this._ws.onopen = null),
                    (this._ws.onclose = null),
                    (this._ws.onerror = null),
                    (this._ws.onmessage = null),
                    this._ws.close();
                } catch (e) {
                  d.error("close() | error closing the WebSocket: %o", e);
                }
              }
            }
            async send(e) {
              if (this._closed) throw new Error("transport closed");
              try {
                this._ws.send(JSON.stringify(e));
              } catch (e) {
                throw (d.warn("send() failed:%o", e), e);
              }
            }
            _runWebSocket() {
              const e = a.operation(this._options.retry || c);
              let t = !1;
              e.attempt((r) => {
                this._closed
                  ? e.stop()
                  : (d.debug("_runWebSocket() [currentAttempt:%s]", r),
                    (this._ws = new n(
                      this._url,
                      "protoo",
                      this._options.origin,
                      this._options.headers,
                      this._options.requestOptions,
                      this._options.clientConfig
                    )),
                    (this._ws.onopen = () => {
                      this._closed || ((t = !0), this.safeEmit("open"));
                    }),
                    (this._ws.onclose = (n) => {
                      if (!this._closed) {
                        if (
                          (d.warn(
                            'WebSocket "close" event [wasClean:%s, code:%s, reason:"%s"]',
                            n.wasClean,
                            n.code,
                            n.reason
                          ),
                          4e3 !== n.code)
                        ) {
                          if (t) {
                            if (
                              (e.stop(),
                              this.safeEmit("disconnected"),
                              this._closed)
                            )
                              return;
                            return void this._runWebSocket();
                          }
                          if ((this.safeEmit("failed", r), this._closed))
                            return;
                          if (e.retry(!0)) return;
                        }
                        (this._closed = !0), this.safeEmit("close");
                      }
                    }),
                    (this._ws.onerror = () => {
                      this._closed || d.error('WebSocket "error" event');
                    }),
                    (this._ws.onmessage = (e) => {
                      if (this._closed) return;
                      const t = o.parse(e.data);
                      t &&
                        (0 !== this.listenerCount("message")
                          ? this.safeEmit("message", t)
                          : d.error(
                              'no listeners for WebSocket "message" event, ignoring received message'
                            ));
                    }));
              });
            }
          };
        },
        5654: (e, t) => {
          t.generateRandomNumber = function () {
            return Math.round(1e7 * Math.random());
          };
        },
        3196: (e) => {
          "use strict";
          e.exports = function (e) {
            var t,
              r,
              n = "",
              a = (e = (function (e) {
                return (
                  e || (e = {}),
                  {
                    length: e.length || 8,
                    numeric: "boolean" != typeof e.numeric || e.numeric,
                    letters: "boolean" != typeof e.letters || e.letters,
                    special: "boolean" == typeof e.special && e.special,
                    exclude: Array.isArray(e.exclude) ? e.exclude : [],
                  }
                );
              })(e)).length,
              i =
                (e.exclude,
                (function (e) {
                  var t = "";
                  e.numeric && (t += "0123456789"),
                    e.letters &&
                      (t +=
                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"),
                    e.special && (t += "!$%^&*()_+|~-=`{}[]:;<>?,./");
                  for (var r = 0; r <= e.exclude.length; r++)
                    t = t.replace(e.exclude[r], "");
                  return t;
                })(e));
            for (t = 1; t <= a; t++)
              n += i.substring(
                (r = Math.floor(Math.random() * i.length)),
                r + 1
              );
            return n;
          };
        },
        5666: (e) => {
          var t = (function (e) {
            "use strict";
            var t,
              r = Object.prototype,
              n = r.hasOwnProperty,
              a = "function" == typeof Symbol ? Symbol : {},
              i = a.iterator || "@@iterator",
              s = a.asyncIterator || "@@asyncIterator",
              o = a.toStringTag || "@@toStringTag";
            function c(e, t, r) {
              return (
                Object.defineProperty(e, t, {
                  value: r,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
                }),
                e[t]
              );
            }
            try {
              c({}, "");
            } catch (e) {
              c = function (e, t, r) {
                return (e[t] = r);
              };
            }
            function d(e, t, r, n) {
              var a = t && t.prototype instanceof m ? t : m,
                i = Object.create(a.prototype),
                s = new O(n || []);
              return (
                (i._invoke = (function (e, t, r) {
                  var n = l;
                  return function (a, i) {
                    if (n === h)
                      throw new Error("Generator is already running");
                    if (n === _) {
                      if ("throw" === a) throw i;
                      return C();
                    }
                    for (r.method = a, r.arg = i; ; ) {
                      var s = r.delegate;
                      if (s) {
                        var o = w(s, r);
                        if (o) {
                          if (o === f) continue;
                          return o;
                        }
                      }
                      if ("next" === r.method) r.sent = r._sent = r.arg;
                      else if ("throw" === r.method) {
                        if (n === l) throw ((n = _), r.arg);
                        r.dispatchException(r.arg);
                      } else "return" === r.method && r.abrupt("return", r.arg);
                      n = h;
                      var c = u(e, t, r);
                      if ("normal" === c.type) {
                        if (((n = r.done ? _ : p), c.arg === f)) continue;
                        return { value: c.arg, done: r.done };
                      }
                      "throw" === c.type &&
                        ((n = _), (r.method = "throw"), (r.arg = c.arg));
                    }
                  };
                })(e, r, s)),
                i
              );
            }
            function u(e, t, r) {
              try {
                return { type: "normal", arg: e.call(t, r) };
              } catch (e) {
                return { type: "throw", arg: e };
              }
            }
            e.wrap = d;
            var l = "suspendedStart",
              p = "suspendedYield",
              h = "executing",
              _ = "completed",
              f = {};
            function m() {}
            function v() {}
            function g() {}
            var y = {};
            c(y, i, function () {
              return this;
            });
            var b = Object.getPrototypeOf,
              x = b && b(b(k([])));
            x && x !== r && n.call(x, i) && (y = x);
            var E = (g.prototype = m.prototype = Object.create(y));
            function T(e) {
              ["next", "throw", "return"].forEach(function (t) {
                c(e, t, function (e) {
                  return this._invoke(t, e);
                });
              });
            }
            function S(e, t) {
              function r(a, i, s, o) {
                var c = u(e[a], e, i);
                if ("throw" !== c.type) {
                  var d = c.arg,
                    l = d.value;
                  return l && "object" == typeof l && n.call(l, "__await")
                    ? t.resolve(l.__await).then(
                        function (e) {
                          r("next", e, s, o);
                        },
                        function (e) {
                          r("throw", e, s, o);
                        }
                      )
                    : t.resolve(l).then(
                        function (e) {
                          (d.value = e), s(d);
                        },
                        function (e) {
                          return r("throw", e, s, o);
                        }
                      );
                }
                o(c.arg);
              }
              var a;
              this._invoke = function (e, n) {
                function i() {
                  return new t(function (t, a) {
                    r(e, n, t, a);
                  });
                }
                return (a = a ? a.then(i, i) : i());
              };
            }
            function w(e, r) {
              var n = e.iterator[r.method];
              if (n === t) {
                if (((r.delegate = null), "throw" === r.method)) {
                  if (
                    e.iterator.return &&
                    ((r.method = "return"),
                    (r.arg = t),
                    w(e, r),
                    "throw" === r.method)
                  )
                    return f;
                  (r.method = "throw"),
                    (r.arg = new TypeError(
                      "The iterator does not provide a 'throw' method"
                    ));
                }
                return f;
              }
              var a = u(n, e.iterator, r.arg);
              if ("throw" === a.type)
                return (
                  (r.method = "throw"), (r.arg = a.arg), (r.delegate = null), f
                );
              var i = a.arg;
              return i
                ? i.done
                  ? ((r[e.resultName] = i.value),
                    (r.next = e.nextLoc),
                    "return" !== r.method && ((r.method = "next"), (r.arg = t)),
                    (r.delegate = null),
                    f)
                  : i
                : ((r.method = "throw"),
                  (r.arg = new TypeError("iterator result is not an object")),
                  (r.delegate = null),
                  f);
            }
            function R(e) {
              var t = { tryLoc: e[0] };
              1 in e && (t.catchLoc = e[1]),
                2 in e && ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
                this.tryEntries.push(t);
            }
            function P(e) {
              var t = e.completion || {};
              (t.type = "normal"), delete t.arg, (e.completion = t);
            }
            function O(e) {
              (this.tryEntries = [{ tryLoc: "root" }]),
                e.forEach(R, this),
                this.reset(!0);
            }
            function k(e) {
              if (e) {
                var r = e[i];
                if (r) return r.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                  var a = -1,
                    s = function r() {
                      for (; ++a < e.length; )
                        if (n.call(e, a))
                          return (r.value = e[a]), (r.done = !1), r;
                      return (r.value = t), (r.done = !0), r;
                    };
                  return (s.next = s);
                }
              }
              return { next: C };
            }
            function C() {
              return { value: t, done: !0 };
            }
            return (
              (v.prototype = g),
              c(E, "constructor", g),
              c(g, "constructor", v),
              (v.displayName = c(g, o, "GeneratorFunction")),
              (e.isGeneratorFunction = function (e) {
                var t = "function" == typeof e && e.constructor;
                return (
                  !!t &&
                  (t === v || "GeneratorFunction" === (t.displayName || t.name))
                );
              }),
              (e.mark = function (e) {
                return (
                  Object.setPrototypeOf
                    ? Object.setPrototypeOf(e, g)
                    : ((e.__proto__ = g), c(e, o, "GeneratorFunction")),
                  (e.prototype = Object.create(E)),
                  e
                );
              }),
              (e.awrap = function (e) {
                return { __await: e };
              }),
              T(S.prototype),
              c(S.prototype, s, function () {
                return this;
              }),
              (e.AsyncIterator = S),
              (e.async = function (t, r, n, a, i) {
                void 0 === i && (i = Promise);
                var s = new S(d(t, r, n, a), i);
                return e.isGeneratorFunction(r)
                  ? s
                  : s.next().then(function (e) {
                      return e.done ? e.value : s.next();
                    });
              }),
              T(E),
              c(E, o, "Generator"),
              c(E, i, function () {
                return this;
              }),
              c(E, "toString", function () {
                return "[object Generator]";
              }),
              (e.keys = function (e) {
                var t = [];
                for (var r in e) t.push(r);
                return (
                  t.reverse(),
                  function r() {
                    for (; t.length; ) {
                      var n = t.pop();
                      if (n in e) return (r.value = n), (r.done = !1), r;
                    }
                    return (r.done = !0), r;
                  }
                );
              }),
              (e.values = k),
              (O.prototype = {
                constructor: O,
                reset: function (e) {
                  if (
                    ((this.prev = 0),
                    (this.next = 0),
                    (this.sent = this._sent = t),
                    (this.done = !1),
                    (this.delegate = null),
                    (this.method = "next"),
                    (this.arg = t),
                    this.tryEntries.forEach(P),
                    !e)
                  )
                    for (var r in this)
                      "t" === r.charAt(0) &&
                        n.call(this, r) &&
                        !isNaN(+r.slice(1)) &&
                        (this[r] = t);
                },
                stop: function () {
                  this.done = !0;
                  var e = this.tryEntries[0].completion;
                  if ("throw" === e.type) throw e.arg;
                  return this.rval;
                },
                dispatchException: function (e) {
                  if (this.done) throw e;
                  var r = this;
                  function a(n, a) {
                    return (
                      (o.type = "throw"),
                      (o.arg = e),
                      (r.next = n),
                      a && ((r.method = "next"), (r.arg = t)),
                      !!a
                    );
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var s = this.tryEntries[i],
                      o = s.completion;
                    if ("root" === s.tryLoc) return a("end");
                    if (s.tryLoc <= this.prev) {
                      var c = n.call(s, "catchLoc"),
                        d = n.call(s, "finallyLoc");
                      if (c && d) {
                        if (this.prev < s.catchLoc) return a(s.catchLoc, !0);
                        if (this.prev < s.finallyLoc) return a(s.finallyLoc);
                      } else if (c) {
                        if (this.prev < s.catchLoc) return a(s.catchLoc, !0);
                      } else {
                        if (!d)
                          throw new Error(
                            "try statement without catch or finally"
                          );
                        if (this.prev < s.finallyLoc) return a(s.finallyLoc);
                      }
                    }
                  }
                },
                abrupt: function (e, t) {
                  for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                    var a = this.tryEntries[r];
                    if (
                      a.tryLoc <= this.prev &&
                      n.call(a, "finallyLoc") &&
                      this.prev < a.finallyLoc
                    ) {
                      var i = a;
                      break;
                    }
                  }
                  i &&
                    ("break" === e || "continue" === e) &&
                    i.tryLoc <= t &&
                    t <= i.finallyLoc &&
                    (i = null);
                  var s = i ? i.completion : {};
                  return (
                    (s.type = e),
                    (s.arg = t),
                    i
                      ? ((this.method = "next"), (this.next = i.finallyLoc), f)
                      : this.complete(s)
                  );
                },
                complete: function (e, t) {
                  if ("throw" === e.type) throw e.arg;
                  return (
                    "break" === e.type || "continue" === e.type
                      ? (this.next = e.arg)
                      : "return" === e.type
                      ? ((this.rval = this.arg = e.arg),
                        (this.method = "return"),
                        (this.next = "end"))
                      : "normal" === e.type && t && (this.next = t),
                    f
                  );
                },
                finish: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r.finallyLoc === e)
                      return this.complete(r.completion, r.afterLoc), P(r), f;
                  }
                },
                catch: function (e) {
                  for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                    var r = this.tryEntries[t];
                    if (r.tryLoc === e) {
                      var n = r.completion;
                      if ("throw" === n.type) {
                        var a = n.arg;
                        P(r);
                      }
                      return a;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function (e, r, n) {
                  return (
                    (this.delegate = {
                      iterator: k(e),
                      resultName: r,
                      nextLoc: n,
                    }),
                    "next" === this.method && (this.arg = t),
                    f
                  );
                },
              }),
              e
            );
          })(e.exports);
          try {
            regeneratorRuntime = t;
          } catch (e) {
            "object" == typeof globalThis
              ? (globalThis.regeneratorRuntime = t)
              : Function("r", "regeneratorRuntime = r")(t);
          }
        },
        9353: (e, t, r) => {
          e.exports = r(1846);
        },
        1846: (e, t, r) => {
          var n = r(1960);
          (t.operation = function (e) {
            var r = t.timeouts(e);
            return new n(r, {
              forever: e && e.forever,
              unref: e && e.unref,
              maxRetryTime: e && e.maxRetryTime,
            });
          }),
            (t.timeouts = function (e) {
              if (e instanceof Array) return [].concat(e);
              var t = {
                retries: 10,
                factor: 2,
                minTimeout: 1e3,
                maxTimeout: 1 / 0,
                randomize: !1,
              };
              for (var r in e) t[r] = e[r];
              if (t.minTimeout > t.maxTimeout)
                throw new Error("minTimeout is greater than maxTimeout");
              for (var n = [], a = 0; a < t.retries; a++)
                n.push(this.createTimeout(a, t));
              return (
                e && e.forever && !n.length && n.push(this.createTimeout(a, t)),
                n.sort(function (e, t) {
                  return e - t;
                }),
                n
              );
            }),
            (t.createTimeout = function (e, t) {
              var r = t.randomize ? Math.random() + 1 : 1,
                n = Math.round(r * t.minTimeout * Math.pow(t.factor, e));
              return (n = Math.min(n, t.maxTimeout));
            }),
            (t.wrap = function (e, r, n) {
              if ((r instanceof Array && ((n = r), (r = null)), !n))
                for (var a in ((n = []), e))
                  "function" == typeof e[a] && n.push(a);
              for (var i = 0; i < n.length; i++) {
                var s = n[i],
                  o = e[s];
                (e[s] = function (n) {
                  var a = t.operation(r),
                    i = Array.prototype.slice.call(arguments, 1),
                    s = i.pop();
                  i.push(function (e) {
                    a.retry(e) ||
                      (e && (arguments[0] = a.mainError()),
                      s.apply(this, arguments));
                  }),
                    a.attempt(function () {
                      n.apply(e, i);
                    });
                }.bind(e, o)),
                  (e[s].options = r);
              }
            });
        },
        1960: (e) => {
          function t(e, t) {
            "boolean" == typeof t && (t = { forever: t }),
              (this._originalTimeouts = JSON.parse(JSON.stringify(e))),
              (this._timeouts = e),
              (this._options = t || {}),
              (this._maxRetryTime = (t && t.maxRetryTime) || 1 / 0),
              (this._fn = null),
              (this._errors = []),
              (this._attempts = 1),
              (this._operationTimeout = null),
              (this._operationTimeoutCb = null),
              (this._timeout = null),
              (this._operationStart = null),
              this._options.forever &&
                (this._cachedTimeouts = this._timeouts.slice(0));
          }
          (e.exports = t),
            (t.prototype.reset = function () {
              (this._attempts = 1), (this._timeouts = this._originalTimeouts);
            }),
            (t.prototype.stop = function () {
              this._timeout && clearTimeout(this._timeout),
                (this._timeouts = []),
                (this._cachedTimeouts = null);
            }),
            (t.prototype.retry = function (e) {
              if ((this._timeout && clearTimeout(this._timeout), !e)) return !1;
              var t = new Date().getTime();
              if (e && t - this._operationStart >= this._maxRetryTime)
                return (
                  this._errors.unshift(
                    new Error("RetryOperation timeout occurred")
                  ),
                  !1
                );
              this._errors.push(e);
              var r = this._timeouts.shift();
              if (void 0 === r) {
                if (!this._cachedTimeouts) return !1;
                this._errors.splice(
                  this._errors.length - 1,
                  this._errors.length
                ),
                  (this._timeouts = this._cachedTimeouts.slice(0)),
                  (r = this._timeouts.shift());
              }
              var n = this,
                a = setTimeout(function () {
                  n._attempts++,
                    n._operationTimeoutCb &&
                      ((n._timeout = setTimeout(function () {
                        n._operationTimeoutCb(n._attempts);
                      }, n._operationTimeout)),
                      n._options.unref && n._timeout.unref()),
                    n._fn(n._attempts);
                }, r);
              return this._options.unref && a.unref(), !0;
            }),
            (t.prototype.attempt = function (e, t) {
              (this._fn = e),
                t &&
                  (t.timeout && (this._operationTimeout = t.timeout),
                  t.cb && (this._operationTimeoutCb = t.cb));
              var r = this;
              this._operationTimeoutCb &&
                (this._timeout = setTimeout(function () {
                  r._operationTimeoutCb();
                }, r._operationTimeout)),
                (this._operationStart = new Date().getTime()),
                this._fn(this._attempts);
            }),
            (t.prototype.try = function (e) {
              console.log("Using RetryOperation.try() is deprecated"),
                this.attempt(e);
            }),
            (t.prototype.start = function (e) {
              console.log("Using RetryOperation.start() is deprecated"),
                this.attempt(e);
            }),
            (t.prototype.start = t.prototype.try),
            (t.prototype.errors = function () {
              return this._errors;
            }),
            (t.prototype.attempts = function () {
              return this._attempts;
            }),
            (t.prototype.mainError = function () {
              if (0 === this._errors.length) return null;
              for (
                var e = {}, t = null, r = 0, n = 0;
                n < this._errors.length;
                n++
              ) {
                var a = this._errors[n],
                  i = a.message,
                  s = (e[i] || 0) + 1;
                (e[i] = s), s >= r && ((t = a), (r = s));
              }
              return t;
            });
        },
        6692: (e) => {
          var t = (e.exports = {
            v: [{ name: "version", reg: /^(\d*)$/ }],
            o: [
              {
                name: "origin",
                reg: /^(\S*) (\d*) (\d*) (\S*) IP(\d) (\S*)/,
                names: [
                  "username",
                  "sessionId",
                  "sessionVersion",
                  "netType",
                  "ipVer",
                  "address",
                ],
                format: "%s %s %d %s IP%d %s",
              },
            ],
            s: [{ name: "name" }],
            i: [{ name: "description" }],
            u: [{ name: "uri" }],
            e: [{ name: "email" }],
            p: [{ name: "phone" }],
            z: [{ name: "timezones" }],
            r: [{ name: "repeats" }],
            t: [
              {
                name: "timing",
                reg: /^(\d*) (\d*)/,
                names: ["start", "stop"],
                format: "%d %d",
              },
            ],
            c: [
              {
                name: "connection",
                reg: /^IN IP(\d) (\S*)/,
                names: ["version", "ip"],
                format: "IN IP%d %s",
              },
            ],
            b: [
              {
                push: "bandwidth",
                reg: /^(TIAS|AS|CT|RR|RS):(\d*)/,
                names: ["type", "limit"],
                format: "%s:%s",
              },
            ],
            m: [
              {
                reg: /^(\w*) (\d*) ([\w/]*)(?: (.*))?/,
                names: ["type", "port", "protocol", "payloads"],
                format: "%s %d %s %s",
              },
            ],
            a: [
              {
                push: "rtp",
                reg: /^rtpmap:(\d*) ([\w\-.]*)(?:\s*\/(\d*)(?:\s*\/(\S*))?)?/,
                names: ["payload", "codec", "rate", "encoding"],
                format: function (e) {
                  return e.encoding
                    ? "rtpmap:%d %s/%s/%s"
                    : e.rate
                    ? "rtpmap:%d %s/%s"
                    : "rtpmap:%d %s";
                },
              },
              {
                push: "fmtp",
                reg: /^fmtp:(\d*) ([\S| ]*)/,
                names: ["payload", "config"],
                format: "fmtp:%d %s",
              },
              { name: "control", reg: /^control:(.*)/, format: "control:%s" },
              {
                name: "rtcp",
                reg: /^rtcp:(\d*)(?: (\S*) IP(\d) (\S*))?/,
                names: ["port", "netType", "ipVer", "address"],
                format: function (e) {
                  return null != e.address ? "rtcp:%d %s IP%d %s" : "rtcp:%d";
                },
              },
              {
                push: "rtcpFbTrrInt",
                reg: /^rtcp-fb:(\*|\d*) trr-int (\d*)/,
                names: ["payload", "value"],
                format: "rtcp-fb:%s trr-int %d",
              },
              {
                push: "rtcpFb",
                reg: /^rtcp-fb:(\*|\d*) ([\w-_]*)(?: ([\w-_]*))?/,
                names: ["payload", "type", "subtype"],
                format: function (e) {
                  return null != e.subtype
                    ? "rtcp-fb:%s %s %s"
                    : "rtcp-fb:%s %s";
                },
              },
              {
                push: "ext",
                reg: /^extmap:(\d+)(?:\/(\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\S*)(?: (\S*))?/,
                names: ["value", "direction", "encrypt-uri", "uri", "config"],
                format: function (e) {
                  return (
                    "extmap:%d" +
                    (e.direction ? "/%s" : "%v") +
                    (e["encrypt-uri"] ? " %s" : "%v") +
                    " %s" +
                    (e.config ? " %s" : "")
                  );
                },
              },
              { name: "extmapAllowMixed", reg: /^(extmap-allow-mixed)/ },
              {
                push: "crypto",
                reg: /^crypto:(\d*) ([\w_]*) (\S*)(?: (\S*))?/,
                names: ["id", "suite", "config", "sessionConfig"],
                format: function (e) {
                  return null != e.sessionConfig
                    ? "crypto:%d %s %s %s"
                    : "crypto:%d %s %s";
                },
              },
              { name: "setup", reg: /^setup:(\w*)/, format: "setup:%s" },
              {
                name: "connectionType",
                reg: /^connection:(new|existing)/,
                format: "connection:%s",
              },
              { name: "mid", reg: /^mid:([^\s]*)/, format: "mid:%s" },
              { name: "msid", reg: /^msid:(.*)/, format: "msid:%s" },
              {
                name: "ptime",
                reg: /^ptime:(\d*(?:\.\d*)*)/,
                format: "ptime:%d",
              },
              {
                name: "maxptime",
                reg: /^maxptime:(\d*(?:\.\d*)*)/,
                format: "maxptime:%d",
              },
              {
                name: "direction",
                reg: /^(sendrecv|recvonly|sendonly|inactive)/,
              },
              { name: "icelite", reg: /^(ice-lite)/ },
              {
                name: "iceUfrag",
                reg: /^ice-ufrag:(\S*)/,
                format: "ice-ufrag:%s",
              },
              { name: "icePwd", reg: /^ice-pwd:(\S*)/, format: "ice-pwd:%s" },
              {
                name: "fingerprint",
                reg: /^fingerprint:(\S*) (\S*)/,
                names: ["type", "hash"],
                format: "fingerprint:%s %s",
              },
              {
                push: "candidates",
                reg: /^candidate:(\S*) (\d*) (\S*) (\d*) (\S*) (\d*) typ (\S*)(?: raddr (\S*) rport (\d*))?(?: tcptype (\S*))?(?: generation (\d*))?(?: network-id (\d*))?(?: network-cost (\d*))?/,
                names: [
                  "foundation",
                  "component",
                  "transport",
                  "priority",
                  "ip",
                  "port",
                  "type",
                  "raddr",
                  "rport",
                  "tcptype",
                  "generation",
                  "network-id",
                  "network-cost",
                ],
                format: function (e) {
                  var t = "candidate:%s %d %s %d %s %d typ %s";
                  return (
                    (t += null != e.raddr ? " raddr %s rport %d" : "%v%v"),
                    (t += null != e.tcptype ? " tcptype %s" : "%v"),
                    null != e.generation && (t += " generation %d"),
                    (t += null != e["network-id"] ? " network-id %d" : "%v"),
                    (t += null != e["network-cost"] ? " network-cost %d" : "%v")
                  );
                },
              },
              { name: "endOfCandidates", reg: /^(end-of-candidates)/ },
              {
                name: "remoteCandidates",
                reg: /^remote-candidates:(.*)/,
                format: "remote-candidates:%s",
              },
              {
                name: "iceOptions",
                reg: /^ice-options:(\S*)/,
                format: "ice-options:%s",
              },
              {
                push: "ssrcs",
                reg: /^ssrc:(\d*) ([\w_-]*)(?::(.*))?/,
                names: ["id", "attribute", "value"],
                format: function (e) {
                  var t = "ssrc:%d";
                  return (
                    null != e.attribute &&
                      ((t += " %s"), null != e.value && (t += ":%s")),
                    t
                  );
                },
              },
              {
                push: "ssrcGroups",
                reg: /^ssrc-group:([\x21\x23\x24\x25\x26\x27\x2A\x2B\x2D\x2E\w]*) (.*)/,
                names: ["semantics", "ssrcs"],
                format: "ssrc-group:%s %s",
              },
              {
                name: "msidSemantic",
                reg: /^msid-semantic:\s?(\w*) (\S*)/,
                names: ["semantic", "token"],
                format: "msid-semantic: %s %s",
              },
              {
                push: "groups",
                reg: /^group:(\w*) (.*)/,
                names: ["type", "mids"],
                format: "group:%s %s",
              },
              { name: "rtcpMux", reg: /^(rtcp-mux)/ },
              { name: "rtcpRsize", reg: /^(rtcp-rsize)/ },
              {
                name: "sctpmap",
                reg: /^sctpmap:([\w_/]*) (\S*)(?: (\S*))?/,
                names: ["sctpmapNumber", "app", "maxMessageSize"],
                format: function (e) {
                  return null != e.maxMessageSize
                    ? "sctpmap:%s %s %s"
                    : "sctpmap:%s %s";
                },
              },
              {
                name: "xGoogleFlag",
                reg: /^x-google-flag:([^\s]*)/,
                format: "x-google-flag:%s",
              },
              {
                push: "rids",
                reg: /^rid:([\d\w]+) (\w+)(?: ([\S| ]*))?/,
                names: ["id", "direction", "params"],
                format: function (e) {
                  return e.params ? "rid:%s %s %s" : "rid:%s %s";
                },
              },
              {
                push: "imageattrs",
                reg: new RegExp(
                  "^imageattr:(\\d+|\\*)[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"
                ),
                names: ["pt", "dir1", "attrs1", "dir2", "attrs2"],
                format: function (e) {
                  return "imageattr:%s %s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast",
                reg: new RegExp(
                  "^simulcast:(send|recv) ([a-zA-Z0-9\\-_~;,]+)(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?$"
                ),
                names: ["dir1", "list1", "dir2", "list2"],
                format: function (e) {
                  return "simulcast:%s %s" + (e.dir2 ? " %s %s" : "");
                },
              },
              {
                name: "simulcast_03",
                reg: /^simulcast:[\s\t]+([\S+\s\t]+)$/,
                names: ["value"],
                format: "simulcast: %s",
              },
              {
                name: "framerate",
                reg: /^framerate:(\d+(?:$|\.\d+))/,
                format: "framerate:%s",
              },
              {
                name: "sourceFilter",
                reg: /^source-filter: *(excl|incl) (\S*) (IP4|IP6|\*) (\S*) (.*)/,
                names: [
                  "filterMode",
                  "netType",
                  "addressTypes",
                  "destAddress",
                  "srcList",
                ],
                format: "source-filter: %s %s %s %s %s",
              },
              { name: "bundleOnly", reg: /^(bundle-only)/ },
              { name: "label", reg: /^label:(.+)/, format: "label:%s" },
              {
                name: "sctpPort",
                reg: /^sctp-port:(\d+)$/,
                format: "sctp-port:%s",
              },
              {
                name: "maxMessageSize",
                reg: /^max-message-size:(\d+)$/,
                format: "max-message-size:%s",
              },
              {
                push: "tsRefClocks",
                reg: /^ts-refclk:([^\s=]*)(?:=(\S*))?/,
                names: ["clksrc", "clksrcExt"],
                format: function (e) {
                  return "ts-refclk:%s" + (null != e.clksrcExt ? "=%s" : "");
                },
              },
              {
                name: "mediaClk",
                reg: /^mediaclk:(?:id=(\S*))? *([^\s=]*)(?:=(\S*))?(?: *rate=(\d+)\/(\d+))?/,
                names: [
                  "id",
                  "mediaClockName",
                  "mediaClockValue",
                  "rateNumerator",
                  "rateDenominator",
                ],
                format: function (e) {
                  var t = "mediaclk:";
                  return (
                    (t += null != e.id ? "id=%s %s" : "%v%s"),
                    (t += null != e.mediaClockValue ? "=%s" : ""),
                    (t += null != e.rateNumerator ? " rate=%s" : ""),
                    (t += null != e.rateDenominator ? "/%s" : "")
                  );
                },
              },
              { name: "keywords", reg: /^keywds:(.+)$/, format: "keywds:%s" },
              { name: "content", reg: /^content:(.+)/, format: "content:%s" },
              {
                name: "bfcpFloorCtrl",
                reg: /^floorctrl:(c-only|s-only|c-s)/,
                format: "floorctrl:%s",
              },
              { name: "bfcpConfId", reg: /^confid:(\d+)/, format: "confid:%s" },
              { name: "bfcpUserId", reg: /^userid:(\d+)/, format: "userid:%s" },
              {
                name: "bfcpFloorId",
                reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,
                names: ["id", "mStream"],
                format: "floorid:%s mstrm:%s",
              },
              { push: "invalid", names: ["value"] },
            ],
          });
          Object.keys(t).forEach(function (e) {
            t[e].forEach(function (e) {
              e.reg || (e.reg = /(.*)/), e.format || (e.format = "%s");
            });
          });
        },
        766: (e, t, r) => {
          var n = r(962),
            a = r(5776);
          (t.write = a),
            (t.parse = n.parse),
            (t.parseParams = n.parseParams),
            (t.parseFmtpConfig = n.parseFmtpConfig),
            (t.parsePayloads = n.parsePayloads),
            (t.parseRemoteCandidates = n.parseRemoteCandidates),
            (t.parseImageAttributes = n.parseImageAttributes),
            (t.parseSimulcastStreamList = n.parseSimulcastStreamList);
        },
        962: (e, t, r) => {
          var n = function (e) {
              return String(Number(e)) === e ? Number(e) : e;
            },
            a = function (e, t, r) {
              var a = e.name && e.names;
              e.push && !t[e.push]
                ? (t[e.push] = [])
                : a && !t[e.name] && (t[e.name] = {});
              var i = e.push ? {} : a ? t[e.name] : t;
              !(function (e, t, r, a) {
                if (a && !r) t[a] = n(e[1]);
                else
                  for (var i = 0; i < r.length; i += 1)
                    null != e[i + 1] && (t[r[i]] = n(e[i + 1]));
              })(r.match(e.reg), i, e.names, e.name),
                e.push && t[e.push].push(i);
            },
            i = r(6692),
            s = RegExp.prototype.test.bind(/^([a-z])=(.*)/);
          t.parse = function (e) {
            var t = {},
              r = [],
              n = t;
            return (
              e
                .split(/(\r\n|\r|\n)/)
                .filter(s)
                .forEach(function (e) {
                  var t = e[0],
                    s = e.slice(2);
                  "m" === t &&
                    (r.push({ rtp: [], fmtp: [] }), (n = r[r.length - 1]));
                  for (var o = 0; o < (i[t] || []).length; o += 1) {
                    var c = i[t][o];
                    if (c.reg.test(s)) return a(c, n, s);
                  }
                }),
              (t.media = r),
              t
            );
          };
          var o = function (e, t) {
            var r = t.split(/=(.+)/, 2);
            return (
              2 === r.length
                ? (e[r[0]] = n(r[1]))
                : 1 === r.length && t.length > 1 && (e[r[0]] = void 0),
              e
            );
          };
          (t.parseParams = function (e) {
            return e.split(/;\s?/).reduce(o, {});
          }),
            (t.parseFmtpConfig = t.parseParams),
            (t.parsePayloads = function (e) {
              return e.toString().split(" ").map(Number);
            }),
            (t.parseRemoteCandidates = function (e) {
              for (
                var t = [], r = e.split(" ").map(n), a = 0;
                a < r.length;
                a += 3
              )
                t.push({ component: r[a], ip: r[a + 1], port: r[a + 2] });
              return t;
            }),
            (t.parseImageAttributes = function (e) {
              return e.split(" ").map(function (e) {
                return e
                  .substring(1, e.length - 1)
                  .split(",")
                  .reduce(o, {});
              });
            }),
            (t.parseSimulcastStreamList = function (e) {
              return e.split(";").map(function (e) {
                return e.split(",").map(function (e) {
                  var t,
                    r = !1;
                  return (
                    "~" !== e[0]
                      ? (t = n(e))
                      : ((t = n(e.substring(1, e.length))), (r = !0)),
                    { scid: t, paused: r }
                  );
                });
              });
            });
        },
        5776: (e, t, r) => {
          var n = r(6692),
            a = /%[sdv%]/g,
            i = function (e) {
              var t = 1,
                r = arguments,
                n = r.length;
              return e.replace(a, function (e) {
                if (t >= n) return e;
                var a = r[t];
                switch (((t += 1), e)) {
                  case "%%":
                    return "%";
                  case "%s":
                    return String(a);
                  case "%d":
                    return Number(a);
                  case "%v":
                    return "";
                }
              });
            },
            s = function (e, t, r) {
              var n = [
                e +
                  "=" +
                  (t.format instanceof Function
                    ? t.format(t.push ? r : r[t.name])
                    : t.format),
              ];
              if (t.names)
                for (var a = 0; a < t.names.length; a += 1) {
                  var s = t.names[a];
                  t.name ? n.push(r[t.name][s]) : n.push(r[t.names[a]]);
                }
              else n.push(r[t.name]);
              return i.apply(null, n);
            },
            o = [
              "v",
              "o",
              "s",
              "i",
              "u",
              "e",
              "p",
              "c",
              "b",
              "t",
              "r",
              "z",
              "a",
            ],
            c = ["i", "c", "b", "a"];
          e.exports = function (e, t) {
            (t = t || {}),
              null == e.version && (e.version = 0),
              null == e.name && (e.name = " "),
              e.media.forEach(function (e) {
                null == e.payloads && (e.payloads = "");
              });
            var r = t.outerOrder || o,
              a = t.innerOrder || c,
              i = [];
            return (
              r.forEach(function (t) {
                n[t].forEach(function (r) {
                  r.name in e && null != e[r.name]
                    ? i.push(s(t, r, e))
                    : r.push in e &&
                      null != e[r.push] &&
                      e[r.push].forEach(function (e) {
                        i.push(s(t, r, e));
                      });
                });
              }),
              e.media.forEach(function (e) {
                i.push(s("m", n.m[0], e)),
                  a.forEach(function (t) {
                    n[t].forEach(function (r) {
                      r.name in e && null != e[r.name]
                        ? i.push(s(t, r, e))
                        : r.push in e &&
                          null != e[r.push] &&
                          e[r.push].forEach(function (e) {
                            i.push(s(t, r, e));
                          });
                    });
                  });
              }),
              i.join("\r\n") + "\r\n"
            );
          };
        },
        5840: (e, t, r) => {
          var n;
          if ("object" == typeof globalThis) n = globalThis;
          else
            try {
              n = r(284);
            } catch (e) {
            } finally {
              if ((n || "undefined" == typeof window || (n = window), !n))
                throw new Error("Could not determine global this");
            }
          var a = n.WebSocket || n.MozWebSocket,
            i = r(9387);
          function s(e, t) {
            return t ? new a(e, t) : new a(e);
          }
          a &&
            ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function (e) {
              Object.defineProperty(s, e, {
                get: function () {
                  return a[e];
                },
              });
            }),
            (e.exports = { w3cwebsocket: a ? s : null, version: i });
        },
        9387: (e, t, r) => {
          e.exports = r(9794).version;
        },
        6037: (e, t, r) => {
          "use strict";
          !(function (e) {
            const t = e.performance;
            function r(e) {
              t && t.mark && t.mark(e);
            }
            function n(e, r) {
              t && t.measure && t.measure(e, r);
            }
            r("Zone");
            const a = e.__Zone_symbol_prefix || "__zone_symbol__";
            function i(e) {
              return a + e;
            }
            const s = !0 === e[i("forceDuplicateZoneCheck")];
            if (e.Zone) {
              if (s || "function" != typeof e.Zone.__symbol__)
                throw new Error("Zone already loaded.");
              return e.Zone;
            }
            class o {
              constructor(e, t) {
                (this._parent = e),
                  (this._name = t ? t.name || "unnamed" : "<root>"),
                  (this._properties = (t && t.properties) || {}),
                  (this._zoneDelegate = new d(
                    this,
                    this._parent && this._parent._zoneDelegate,
                    t
                  ));
              }
              static assertZonePatched() {
                if (e.Promise !== C.ZoneAwarePromise)
                  throw new Error(
                    "Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)"
                  );
              }
              static get root() {
                let e = o.current;
                for (; e.parent; ) e = e.parent;
                return e;
              }
              static get current() {
                return L.zone;
              }
              static get currentTask() {
                return D;
              }
              static __load_patch(t, a, i = !1) {
                if (C.hasOwnProperty(t)) {
                  if (!i && s) throw Error("Already loaded patch: " + t);
                } else if (!e["__Zone_disable_" + t]) {
                  const i = "Zone:" + t;
                  r(i), (C[t] = a(e, o, I)), n(i, i);
                }
              }
              get parent() {
                return this._parent;
              }
              get name() {
                return this._name;
              }
              get(e) {
                const t = this.getZoneWith(e);
                if (t) return t._properties[e];
              }
              getZoneWith(e) {
                let t = this;
                for (; t; ) {
                  if (t._properties.hasOwnProperty(e)) return t;
                  t = t._parent;
                }
                return null;
              }
              fork(e) {
                if (!e) throw new Error("ZoneSpec required!");
                return this._zoneDelegate.fork(this, e);
              }
              wrap(e, t) {
                if ("function" != typeof e)
                  throw new Error("Expecting function got: " + e);
                const r = this._zoneDelegate.intercept(this, e, t),
                  n = this;
                return function () {
                  return n.runGuarded(r, this, arguments, t);
                };
              }
              run(e, t, r, n) {
                L = { parent: L, zone: this };
                try {
                  return this._zoneDelegate.invoke(this, e, t, r, n);
                } finally {
                  L = L.parent;
                }
              }
              runGuarded(e, t = null, r, n) {
                L = { parent: L, zone: this };
                try {
                  try {
                    return this._zoneDelegate.invoke(this, e, t, r, n);
                  } catch (e) {
                    if (this._zoneDelegate.handleError(this, e)) throw e;
                  }
                } finally {
                  L = L.parent;
                }
              }
              runTask(e, t, r) {
                if (e.zone != this)
                  throw new Error(
                    "A task can only be run in the zone of creation! (Creation: " +
                      (e.zone || b).name +
                      "; Execution: " +
                      this.name +
                      ")"
                  );
                if (e.state === x && (e.type === k || e.type === O)) return;
                const n = e.state != S;
                n && e._transitionTo(S, T), e.runCount++;
                const a = D;
                (D = e), (L = { parent: L, zone: this });
                try {
                  e.type == O &&
                    e.data &&
                    !e.data.isPeriodic &&
                    (e.cancelFn = void 0);
                  try {
                    return this._zoneDelegate.invokeTask(this, e, t, r);
                  } catch (e) {
                    if (this._zoneDelegate.handleError(this, e)) throw e;
                  }
                } finally {
                  e.state !== x &&
                    e.state !== R &&
                    (e.type == k || (e.data && e.data.isPeriodic)
                      ? n && e._transitionTo(T, S)
                      : ((e.runCount = 0),
                        this._updateTaskCount(e, -1),
                        n && e._transitionTo(x, S, x))),
                    (L = L.parent),
                    (D = a);
                }
              }
              scheduleTask(e) {
                if (e.zone && e.zone !== this) {
                  let t = this;
                  for (; t; ) {
                    if (t === e.zone)
                      throw Error(
                        `can not reschedule task to ${this.name} which is descendants of the original zone ${e.zone.name}`
                      );
                    t = t.parent;
                  }
                }
                e._transitionTo(E, x);
                const t = [];
                (e._zoneDelegates = t), (e._zone = this);
                try {
                  e = this._zoneDelegate.scheduleTask(this, e);
                } catch (t) {
                  throw (
                    (e._transitionTo(R, E, x),
                    this._zoneDelegate.handleError(this, t),
                    t)
                  );
                }
                return (
                  e._zoneDelegates === t && this._updateTaskCount(e, 1),
                  e.state == E && e._transitionTo(T, E),
                  e
                );
              }
              scheduleMicroTask(e, t, r, n) {
                return this.scheduleTask(new u(P, e, t, r, n, void 0));
              }
              scheduleMacroTask(e, t, r, n, a) {
                return this.scheduleTask(new u(O, e, t, r, n, a));
              }
              scheduleEventTask(e, t, r, n, a) {
                return this.scheduleTask(new u(k, e, t, r, n, a));
              }
              cancelTask(e) {
                if (e.zone != this)
                  throw new Error(
                    "A task can only be cancelled in the zone of creation! (Creation: " +
                      (e.zone || b).name +
                      "; Execution: " +
                      this.name +
                      ")"
                  );
                e._transitionTo(w, T, S);
                try {
                  this._zoneDelegate.cancelTask(this, e);
                } catch (t) {
                  throw (
                    (e._transitionTo(R, w),
                    this._zoneDelegate.handleError(this, t),
                    t)
                  );
                }
                return (
                  this._updateTaskCount(e, -1),
                  e._transitionTo(x, w),
                  (e.runCount = 0),
                  e
                );
              }
              _updateTaskCount(e, t) {
                const r = e._zoneDelegates;
                -1 == t && (e._zoneDelegates = null);
                for (let n = 0; n < r.length; n++)
                  r[n]._updateTaskCount(e.type, t);
              }
            }
            o.__symbol__ = i;
            const c = {
              name: "",
              onHasTask: (e, t, r, n) => e.hasTask(r, n),
              onScheduleTask: (e, t, r, n) => e.scheduleTask(r, n),
              onInvokeTask: (e, t, r, n, a, i) => e.invokeTask(r, n, a, i),
              onCancelTask: (e, t, r, n) => e.cancelTask(r, n),
            };
            class d {
              constructor(e, t, r) {
                (this._taskCounts = {
                  microTask: 0,
                  macroTask: 0,
                  eventTask: 0,
                }),
                  (this.zone = e),
                  (this._parentDelegate = t),
                  (this._forkZS = r && (r && r.onFork ? r : t._forkZS)),
                  (this._forkDlgt = r && (r.onFork ? t : t._forkDlgt)),
                  (this._forkCurrZone =
                    r && (r.onFork ? this.zone : t._forkCurrZone)),
                  (this._interceptZS =
                    r && (r.onIntercept ? r : t._interceptZS)),
                  (this._interceptDlgt =
                    r && (r.onIntercept ? t : t._interceptDlgt)),
                  (this._interceptCurrZone =
                    r && (r.onIntercept ? this.zone : t._interceptCurrZone)),
                  (this._invokeZS = r && (r.onInvoke ? r : t._invokeZS)),
                  (this._invokeDlgt = r && (r.onInvoke ? t : t._invokeDlgt)),
                  (this._invokeCurrZone =
                    r && (r.onInvoke ? this.zone : t._invokeCurrZone)),
                  (this._handleErrorZS =
                    r && (r.onHandleError ? r : t._handleErrorZS)),
                  (this._handleErrorDlgt =
                    r && (r.onHandleError ? t : t._handleErrorDlgt)),
                  (this._handleErrorCurrZone =
                    r &&
                    (r.onHandleError ? this.zone : t._handleErrorCurrZone)),
                  (this._scheduleTaskZS =
                    r && (r.onScheduleTask ? r : t._scheduleTaskZS)),
                  (this._scheduleTaskDlgt =
                    r && (r.onScheduleTask ? t : t._scheduleTaskDlgt)),
                  (this._scheduleTaskCurrZone =
                    r &&
                    (r.onScheduleTask ? this.zone : t._scheduleTaskCurrZone)),
                  (this._invokeTaskZS =
                    r && (r.onInvokeTask ? r : t._invokeTaskZS)),
                  (this._invokeTaskDlgt =
                    r && (r.onInvokeTask ? t : t._invokeTaskDlgt)),
                  (this._invokeTaskCurrZone =
                    r && (r.onInvokeTask ? this.zone : t._invokeTaskCurrZone)),
                  (this._cancelTaskZS =
                    r && (r.onCancelTask ? r : t._cancelTaskZS)),
                  (this._cancelTaskDlgt =
                    r && (r.onCancelTask ? t : t._cancelTaskDlgt)),
                  (this._cancelTaskCurrZone =
                    r && (r.onCancelTask ? this.zone : t._cancelTaskCurrZone)),
                  (this._hasTaskZS = null),
                  (this._hasTaskDlgt = null),
                  (this._hasTaskDlgtOwner = null),
                  (this._hasTaskCurrZone = null);
                const n = r && r.onHasTask,
                  a = t && t._hasTaskZS;
                (n || a) &&
                  ((this._hasTaskZS = n ? r : c),
                  (this._hasTaskDlgt = t),
                  (this._hasTaskDlgtOwner = this),
                  (this._hasTaskCurrZone = e),
                  r.onScheduleTask ||
                    ((this._scheduleTaskZS = c),
                    (this._scheduleTaskDlgt = t),
                    (this._scheduleTaskCurrZone = this.zone)),
                  r.onInvokeTask ||
                    ((this._invokeTaskZS = c),
                    (this._invokeTaskDlgt = t),
                    (this._invokeTaskCurrZone = this.zone)),
                  r.onCancelTask ||
                    ((this._cancelTaskZS = c),
                    (this._cancelTaskDlgt = t),
                    (this._cancelTaskCurrZone = this.zone)));
              }
              fork(e, t) {
                return this._forkZS
                  ? this._forkZS.onFork(this._forkDlgt, this.zone, e, t)
                  : new o(e, t);
              }
              intercept(e, t, r) {
                return this._interceptZS
                  ? this._interceptZS.onIntercept(
                      this._interceptDlgt,
                      this._interceptCurrZone,
                      e,
                      t,
                      r
                    )
                  : t;
              }
              invoke(e, t, r, n, a) {
                return this._invokeZS
                  ? this._invokeZS.onInvoke(
                      this._invokeDlgt,
                      this._invokeCurrZone,
                      e,
                      t,
                      r,
                      n,
                      a
                    )
                  : t.apply(r, n);
              }
              handleError(e, t) {
                return (
                  !this._handleErrorZS ||
                  this._handleErrorZS.onHandleError(
                    this._handleErrorDlgt,
                    this._handleErrorCurrZone,
                    e,
                    t
                  )
                );
              }
              scheduleTask(e, t) {
                let r = t;
                if (this._scheduleTaskZS)
                  this._hasTaskZS &&
                    r._zoneDelegates.push(this._hasTaskDlgtOwner),
                    (r = this._scheduleTaskZS.onScheduleTask(
                      this._scheduleTaskDlgt,
                      this._scheduleTaskCurrZone,
                      e,
                      t
                    )),
                    r || (r = t);
                else if (t.scheduleFn) t.scheduleFn(t);
                else {
                  if (t.type != P)
                    throw new Error("Task is missing scheduleFn.");
                  g(t);
                }
                return r;
              }
              invokeTask(e, t, r, n) {
                return this._invokeTaskZS
                  ? this._invokeTaskZS.onInvokeTask(
                      this._invokeTaskDlgt,
                      this._invokeTaskCurrZone,
                      e,
                      t,
                      r,
                      n
                    )
                  : t.callback.apply(r, n);
              }
              cancelTask(e, t) {
                let r;
                if (this._cancelTaskZS)
                  r = this._cancelTaskZS.onCancelTask(
                    this._cancelTaskDlgt,
                    this._cancelTaskCurrZone,
                    e,
                    t
                  );
                else {
                  if (!t.cancelFn) throw Error("Task is not cancelable");
                  r = t.cancelFn(t);
                }
                return r;
              }
              hasTask(e, t) {
                try {
                  this._hasTaskZS &&
                    this._hasTaskZS.onHasTask(
                      this._hasTaskDlgt,
                      this._hasTaskCurrZone,
                      e,
                      t
                    );
                } catch (t) {
                  this.handleError(e, t);
                }
              }
              _updateTaskCount(e, t) {
                const r = this._taskCounts,
                  n = r[e],
                  a = (r[e] = n + t);
                if (a < 0)
                  throw new Error("More tasks executed then were scheduled.");
                if (0 == n || 0 == a) {
                  const t = {
                    microTask: r.microTask > 0,
                    macroTask: r.macroTask > 0,
                    eventTask: r.eventTask > 0,
                    change: e,
                  };
                  this.hasTask(this.zone, t);
                }
              }
            }
            class u {
              constructor(t, r, n, a, i, s) {
                if (
                  ((this._zone = null),
                  (this.runCount = 0),
                  (this._zoneDelegates = null),
                  (this._state = "notScheduled"),
                  (this.type = t),
                  (this.source = r),
                  (this.data = a),
                  (this.scheduleFn = i),
                  (this.cancelFn = s),
                  !n)
                )
                  throw new Error("callback is not defined");
                this.callback = n;
                const o = this;
                t === k && a && a.useG
                  ? (this.invoke = u.invokeTask)
                  : (this.invoke = function () {
                      return u.invokeTask.call(e, o, this, arguments);
                    });
              }
              static invokeTask(e, t, r) {
                e || (e = this), A++;
                try {
                  return e.runCount++, e.zone.runTask(e, t, r);
                } finally {
                  1 == A && y(), A--;
                }
              }
              get zone() {
                return this._zone;
              }
              get state() {
                return this._state;
              }
              cancelScheduleRequest() {
                this._transitionTo(x, E);
              }
              _transitionTo(e, t, r) {
                if (this._state !== t && this._state !== r)
                  throw new Error(
                    `${this.type} '${
                      this.source
                    }': can not transition to '${e}', expecting state '${t}'${
                      r ? " or '" + r + "'" : ""
                    }, was '${this._state}'.`
                  );
                (this._state = e), e == x && (this._zoneDelegates = null);
              }
              toString() {
                return this.data && void 0 !== this.data.handleId
                  ? this.data.handleId.toString()
                  : Object.prototype.toString.call(this);
              }
              toJSON() {
                return {
                  type: this.type,
                  state: this.state,
                  source: this.source,
                  zone: this.zone.name,
                  runCount: this.runCount,
                };
              }
            }
            const l = i("setTimeout"),
              p = i("Promise"),
              h = i("then");
            let _,
              f = [],
              m = !1;
            function v(t) {
              if ((_ || (e[p] && (_ = e[p].resolve(0))), _)) {
                let e = _[h];
                e || (e = _.then), e.call(_, t);
              } else e[l](t, 0);
            }
            function g(e) {
              0 === A && 0 === f.length && v(y), e && f.push(e);
            }
            function y() {
              if (!m) {
                for (m = !0; f.length; ) {
                  const e = f;
                  f = [];
                  for (let t = 0; t < e.length; t++) {
                    const r = e[t];
                    try {
                      r.zone.runTask(r, null, null);
                    } catch (e) {
                      I.onUnhandledError(e);
                    }
                  }
                }
                I.microtaskDrainDone(), (m = !1);
              }
            }
            const b = { name: "NO ZONE" },
              x = "notScheduled",
              E = "scheduling",
              T = "scheduled",
              S = "running",
              w = "canceling",
              R = "unknown",
              P = "microTask",
              O = "macroTask",
              k = "eventTask",
              C = {},
              I = {
                symbol: i,
                currentZoneFrame: () => L,
                onUnhandledError: M,
                microtaskDrainDone: M,
                scheduleMicroTask: g,
                showUncaughtError: () =>
                  !o[i("ignoreConsoleErrorUncaughtError")],
                patchEventTarget: () => [],
                patchOnProperties: M,
                patchMethod: () => M,
                bindArguments: () => [],
                patchThen: () => M,
                patchMacroTask: () => M,
                patchEventPrototype: () => M,
                isIEOrEdge: () => !1,
                getGlobalObjects: () => {},
                ObjectDefineProperty: () => M,
                ObjectGetOwnPropertyDescriptor: () => {},
                ObjectCreate: () => {},
                ArraySlice: () => [],
                patchClass: () => M,
                wrapWithCurrentZone: () => M,
                filterProperties: () => [],
                attachOriginToPatched: () => M,
                _redefineProperty: () => M,
                patchCallbacks: () => M,
                nativeScheduleMicroTask: v,
              };
            let L = { parent: null, zone: new o(null, null) },
              D = null,
              A = 0;
            function M() {}
            n("Zone", "Zone"), (e.Zone = o);
          })(
            ("undefined" != typeof window && window) ||
              ("undefined" != typeof self && self) ||
              r.g
          );
          const n = Object.getOwnPropertyDescriptor,
            a = Object.defineProperty,
            i = Object.getPrototypeOf,
            s = Object.create,
            o = Array.prototype.slice,
            c = "addEventListener",
            d = "removeEventListener",
            u = Zone.__symbol__(c),
            l = Zone.__symbol__(d),
            p = "true",
            h = "false",
            _ = Zone.__symbol__("");
          function f(e, t) {
            return Zone.current.wrap(e, t);
          }
          function m(e, t, r, n, a) {
            return Zone.current.scheduleMacroTask(e, t, r, n, a);
          }
          const v = Zone.__symbol__,
            g = "undefined" != typeof window,
            y = g ? window : void 0,
            b = (g && y) || ("object" == typeof self && self) || r.g;
          function x(e, t) {
            for (let r = e.length - 1; r >= 0; r--)
              "function" == typeof e[r] && (e[r] = f(e[r], t + "_" + r));
            return e;
          }
          function E(e) {
            return (
              !e ||
              (!1 !== e.writable &&
                !("function" == typeof e.get && void 0 === e.set))
            );
          }
          const T =
              "undefined" != typeof WorkerGlobalScope &&
              self instanceof WorkerGlobalScope,
            S =
              !("nw" in b) &&
              void 0 !== b.process &&
              "[object process]" === {}.toString.call(b.process),
            w = !S && !T && !(!g || !y.HTMLElement),
            R =
              void 0 !== b.process &&
              "[object process]" === {}.toString.call(b.process) &&
              !T &&
              !(!g || !y.HTMLElement),
            P = {},
            O = function (e) {
              if (!(e = e || b.event)) return;
              let t = P[e.type];
              t || (t = P[e.type] = v("ON_PROPERTY" + e.type));
              const r = this || e.target || b,
                n = r[t];
              let a;
              if (w && r === y && "error" === e.type) {
                const t = e;
                (a =
                  n &&
                  n.call(
                    this,
                    t.message,
                    t.filename,
                    t.lineno,
                    t.colno,
                    t.error
                  )),
                  !0 === a && e.preventDefault();
              } else
                (a = n && n.apply(this, arguments)),
                  null == a || a || e.preventDefault();
              return a;
            };
          function k(e, t, r) {
            let i = n(e, t);
            if (!i && r) {
              n(r, t) && (i = { enumerable: !0, configurable: !0 });
            }
            if (!i || !i.configurable) return;
            const s = v("on" + t + "patched");
            if (e.hasOwnProperty(s) && e[s]) return;
            delete i.writable, delete i.value;
            const o = i.get,
              c = i.set,
              d = t.slice(2);
            let u = P[d];
            u || (u = P[d] = v("ON_PROPERTY" + d)),
              (i.set = function (t) {
                let r = this;
                if ((r || e !== b || (r = b), !r)) return;
                "function" == typeof r[u] && r.removeEventListener(d, O),
                  c && c.call(r, null),
                  (r[u] = t),
                  "function" == typeof t && r.addEventListener(d, O, !1);
              }),
              (i.get = function () {
                let r = this;
                if ((r || e !== b || (r = b), !r)) return null;
                const n = r[u];
                if (n) return n;
                if (o) {
                  let e = o.call(this);
                  if (e)
                    return (
                      i.set.call(this, e),
                      "function" == typeof r.removeAttribute &&
                        r.removeAttribute(t),
                      e
                    );
                }
                return null;
              }),
              a(e, t, i),
              (e[s] = !0);
          }
          function C(e, t, r) {
            if (t) for (let n = 0; n < t.length; n++) k(e, "on" + t[n], r);
            else {
              const t = [];
              for (const r in e) "on" == r.slice(0, 2) && t.push(r);
              for (let n = 0; n < t.length; n++) k(e, t[n], r);
            }
          }
          const I = v("originalInstance");
          function L(e) {
            const t = b[e];
            if (!t) return;
            (b[v(e)] = t),
              (b[e] = function () {
                const r = x(arguments, e);
                switch (r.length) {
                  case 0:
                    this[I] = new t();
                    break;
                  case 1:
                    this[I] = new t(r[0]);
                    break;
                  case 2:
                    this[I] = new t(r[0], r[1]);
                    break;
                  case 3:
                    this[I] = new t(r[0], r[1], r[2]);
                    break;
                  case 4:
                    this[I] = new t(r[0], r[1], r[2], r[3]);
                    break;
                  default:
                    throw new Error("Arg list too long.");
                }
              }),
              M(b[e], t);
            const r = new t(function () {});
            let n;
            for (n in r)
              ("XMLHttpRequest" === e && "responseBlob" === n) ||
                (function (t) {
                  "function" == typeof r[t]
                    ? (b[e].prototype[t] = function () {
                        return this[I][t].apply(this[I], arguments);
                      })
                    : a(b[e].prototype, t, {
                        set: function (r) {
                          "function" == typeof r
                            ? ((this[I][t] = f(r, e + "." + t)),
                              M(this[I][t], r))
                            : (this[I][t] = r);
                        },
                        get: function () {
                          return this[I][t];
                        },
                      });
                })(n);
            for (n in t)
              "prototype" !== n && t.hasOwnProperty(n) && (b[e][n] = t[n]);
          }
          function D(e, t, r) {
            let a = e;
            for (; a && !a.hasOwnProperty(t); ) a = i(a);
            !a && e[t] && (a = e);
            const s = v(t);
            let o = null;
            if (a && (!(o = a[s]) || !a.hasOwnProperty(s))) {
              o = a[s] = a[t];
              if (E(a && n(a, t))) {
                const e = r(o, s, t);
                (a[t] = function () {
                  return e(this, arguments);
                }),
                  M(a[t], o);
              }
            }
            return o;
          }
          function A(e, t, r) {
            let n = null;
            function a(e) {
              const t = e.data;
              return (
                (t.args[t.cbIdx] = function () {
                  e.invoke.apply(this, arguments);
                }),
                n.apply(t.target, t.args),
                e
              );
            }
            n = D(
              e,
              t,
              (e) =>
                function (t, n) {
                  const i = r(t, n);
                  return i.cbIdx >= 0 && "function" == typeof n[i.cbIdx]
                    ? m(i.name, n[i.cbIdx], i, a)
                    : e.apply(t, n);
                }
            );
          }
          function M(e, t) {
            e[v("OriginalDelegate")] = t;
          }
          let N = !1,
            j = !1;
          function B() {
            try {
              const e = y.navigator.userAgent;
              if (-1 !== e.indexOf("MSIE ") || -1 !== e.indexOf("Trident/"))
                return !0;
            } catch (e) {}
            return !1;
          }
          function U() {
            if (N) return j;
            N = !0;
            try {
              const e = y.navigator.userAgent;
              (-1 === e.indexOf("MSIE ") &&
                -1 === e.indexOf("Trident/") &&
                -1 === e.indexOf("Edge/")) ||
                (j = !0);
            } catch (e) {}
            return j;
          }
          Zone.__load_patch("ZoneAwarePromise", (e, t, r) => {
            const n = Object.getOwnPropertyDescriptor,
              a = Object.defineProperty;
            const i = r.symbol,
              s = [],
              o = !0 === e[i("DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION")],
              c = i("Promise"),
              d = i("then");
            (r.onUnhandledError = (e) => {
              if (r.showUncaughtError()) {
                const t = e && e.rejection;
                t
                  ? console.error(
                      "Unhandled Promise rejection:",
                      t instanceof Error ? t.message : t,
                      "; Zone:",
                      e.zone.name,
                      "; Task:",
                      e.task && e.task.source,
                      "; Value:",
                      t,
                      t instanceof Error ? t.stack : void 0
                    )
                  : console.error(e);
              }
            }),
              (r.microtaskDrainDone = () => {
                for (; s.length; ) {
                  const e = s.shift();
                  try {
                    e.zone.runGuarded(() => {
                      if (e.throwOriginal) throw e.rejection;
                      throw e;
                    });
                  } catch (e) {
                    l(e);
                  }
                }
              });
            const u = i("unhandledPromiseRejectionHandler");
            function l(e) {
              r.onUnhandledError(e);
              try {
                const r = t[u];
                "function" == typeof r && r.call(this, e);
              } catch (e) {}
            }
            function p(e) {
              return e && e.then;
            }
            function h(e) {
              return e;
            }
            function _(e) {
              return L.reject(e);
            }
            const f = i("state"),
              m = i("value"),
              v = i("finally"),
              g = i("parentPromiseValue"),
              y = i("parentPromiseState"),
              b = null,
              x = !0,
              E = !1;
            function T(e, t) {
              return (r) => {
                try {
                  R(e, t, r);
                } catch (t) {
                  R(e, !1, t);
                }
              };
            }
            const S = function () {
                let e = !1;
                return function (t) {
                  return function () {
                    e || ((e = !0), t.apply(null, arguments));
                  };
                };
              },
              w = i("currentTaskTrace");
            function R(e, n, i) {
              const c = S();
              if (e === i) throw new TypeError("Promise resolved with itself");
              if (e[f] === b) {
                let d = null;
                try {
                  ("object" != typeof i && "function" != typeof i) ||
                    (d = i && i.then);
                } catch (t) {
                  return (
                    c(() => {
                      R(e, !1, t);
                    })(),
                    e
                  );
                }
                if (
                  n !== E &&
                  i instanceof L &&
                  i.hasOwnProperty(f) &&
                  i.hasOwnProperty(m) &&
                  i[f] !== b
                )
                  O(i), R(e, i[f], i[m]);
                else if (n !== E && "function" == typeof d)
                  try {
                    d.call(i, c(T(e, n)), c(T(e, !1)));
                  } catch (t) {
                    c(() => {
                      R(e, !1, t);
                    })();
                  }
                else {
                  e[f] = n;
                  const c = e[m];
                  if (
                    ((e[m] = i),
                    e[v] === v && n === x && ((e[f] = e[y]), (e[m] = e[g])),
                    n === E && i instanceof Error)
                  ) {
                    const e =
                      t.currentTask &&
                      t.currentTask.data &&
                      t.currentTask.data.__creationTrace__;
                    e &&
                      a(i, w, {
                        configurable: !0,
                        enumerable: !1,
                        writable: !0,
                        value: e,
                      });
                  }
                  for (let t = 0; t < c.length; )
                    k(e, c[t++], c[t++], c[t++], c[t++]);
                  if (0 == c.length && n == E) {
                    e[f] = 0;
                    let n = i;
                    try {
                      throw new Error(
                        "Uncaught (in promise): " +
                          (function (e) {
                            if (e && e.toString === Object.prototype.toString) {
                              return (
                                ((e.constructor && e.constructor.name) || "") +
                                ": " +
                                JSON.stringify(e)
                              );
                            }
                            return e
                              ? e.toString()
                              : Object.prototype.toString.call(e);
                          })(i) +
                          (i && i.stack ? "\n" + i.stack : "")
                      );
                    } catch (e) {
                      n = e;
                    }
                    o && (n.throwOriginal = !0),
                      (n.rejection = i),
                      (n.promise = e),
                      (n.zone = t.current),
                      (n.task = t.currentTask),
                      s.push(n),
                      r.scheduleMicroTask();
                  }
                }
              }
              return e;
            }
            const P = i("rejectionHandledHandler");
            function O(e) {
              if (0 === e[f]) {
                try {
                  const r = t[P];
                  r &&
                    "function" == typeof r &&
                    r.call(this, { rejection: e[m], promise: e });
                } catch (e) {}
                e[f] = E;
                for (let t = 0; t < s.length; t++)
                  e === s[t].promise && s.splice(t, 1);
              }
            }
            function k(e, t, r, n, a) {
              O(e);
              const i = e[f],
                s = i
                  ? "function" == typeof n
                    ? n
                    : h
                  : "function" == typeof a
                  ? a
                  : _;
              t.scheduleMicroTask(
                "Promise.then",
                () => {
                  try {
                    const n = e[m],
                      a = !!r && v === r[v];
                    a && ((r[g] = n), (r[y] = i));
                    const o = t.run(
                      s,
                      void 0,
                      a && s !== _ && s !== h ? [] : [n]
                    );
                    R(r, !0, o);
                  } catch (e) {
                    R(r, !1, e);
                  }
                },
                r
              );
            }
            const C = function () {},
              I = e.AggregateError;
            class L {
              static toString() {
                return "function ZoneAwarePromise() { [native code] }";
              }
              static resolve(e) {
                return R(new this(null), x, e);
              }
              static reject(e) {
                return R(new this(null), E, e);
              }
              static any(e) {
                if (!e || "function" != typeof e[Symbol.iterator])
                  return Promise.reject(
                    new I([], "All promises were rejected")
                  );
                const t = [];
                let r = 0;
                try {
                  for (let n of e) r++, t.push(L.resolve(n));
                } catch (e) {
                  return Promise.reject(
                    new I([], "All promises were rejected")
                  );
                }
                if (0 === r)
                  return Promise.reject(
                    new I([], "All promises were rejected")
                  );
                let n = !1;
                const a = [];
                return new L((e, i) => {
                  for (let s = 0; s < t.length; s++)
                    t[s].then(
                      (t) => {
                        n || ((n = !0), e(t));
                      },
                      (e) => {
                        a.push(e),
                          r--,
                          0 === r &&
                            ((n = !0),
                            i(new I(a, "All promises were rejected")));
                      }
                    );
                });
              }
              static race(e) {
                let t,
                  r,
                  n = new this((e, n) => {
                    (t = e), (r = n);
                  });
                function a(e) {
                  t(e);
                }
                function i(e) {
                  r(e);
                }
                for (let t of e) p(t) || (t = this.resolve(t)), t.then(a, i);
                return n;
              }
              static all(e) {
                return L.allWithCallback(e);
              }
              static allSettled(e) {
                return (
                  this && this.prototype instanceof L ? this : L
                ).allWithCallback(e, {
                  thenCallback: (e) => ({ status: "fulfilled", value: e }),
                  errorCallback: (e) => ({ status: "rejected", reason: e }),
                });
              }
              static allWithCallback(e, t) {
                let r,
                  n,
                  a = new this((e, t) => {
                    (r = e), (n = t);
                  }),
                  i = 2,
                  s = 0;
                const o = [];
                for (let a of e) {
                  p(a) || (a = this.resolve(a));
                  const e = s;
                  try {
                    a.then(
                      (n) => {
                        (o[e] = t ? t.thenCallback(n) : n),
                          i--,
                          0 === i && r(o);
                      },
                      (a) => {
                        t
                          ? ((o[e] = t.errorCallback(a)), i--, 0 === i && r(o))
                          : n(a);
                      }
                    );
                  } catch (e) {
                    n(e);
                  }
                  i++, s++;
                }
                return (i -= 2), 0 === i && r(o), a;
              }
              constructor(e) {
                const t = this;
                if (!(t instanceof L))
                  throw new Error("Must be an instanceof Promise.");
                (t[f] = b), (t[m] = []);
                try {
                  const r = S();
                  e && e(r(T(t, x)), r(T(t, E)));
                } catch (e) {
                  R(t, !1, e);
                }
              }
              get [Symbol.toStringTag]() {
                return "Promise";
              }
              get [Symbol.species]() {
                return L;
              }
              then(e, r) {
                var n;
                let a =
                  null === (n = this.constructor) || void 0 === n
                    ? void 0
                    : n[Symbol.species];
                (a && "function" == typeof a) || (a = this.constructor || L);
                const i = new a(C),
                  s = t.current;
                return (
                  this[f] == b ? this[m].push(s, i, e, r) : k(this, s, i, e, r),
                  i
                );
              }
              catch(e) {
                return this.then(null, e);
              }
              finally(e) {
                var r;
                let n =
                  null === (r = this.constructor) || void 0 === r
                    ? void 0
                    : r[Symbol.species];
                (n && "function" == typeof n) || (n = L);
                const a = new n(C);
                a[v] = v;
                const i = t.current;
                return (
                  this[f] == b ? this[m].push(i, a, e, e) : k(this, i, a, e, e),
                  a
                );
              }
            }
            (L.resolve = L.resolve),
              (L.reject = L.reject),
              (L.race = L.race),
              (L.all = L.all);
            const A = (e[c] = e.Promise);
            e.Promise = L;
            const M = i("thenPatched");
            function N(e) {
              const t = e.prototype,
                r = n(t, "then");
              if (r && (!1 === r.writable || !r.configurable)) return;
              const a = t.then;
              (t[d] = a),
                (e.prototype.then = function (e, t) {
                  return new L((e, t) => {
                    a.call(this, e, t);
                  }).then(e, t);
                }),
                (e[M] = !0);
            }
            return (
              (r.patchThen = N),
              A &&
                (N(A),
                D(e, "fetch", (e) => {
                  return (
                    (t = e),
                    function (e, r) {
                      let n = t.apply(e, r);
                      if (n instanceof L) return n;
                      let a = n.constructor;
                      return a[M] || N(a), n;
                    }
                  );
                  var t;
                })),
              (Promise[t.__symbol__("uncaughtPromiseErrors")] = s),
              L
            );
          }),
            Zone.__load_patch("toString", (e) => {
              const t = Function.prototype.toString,
                r = v("OriginalDelegate"),
                n = v("Promise"),
                a = v("Error"),
                i = function () {
                  if ("function" == typeof this) {
                    const i = this[r];
                    if (i)
                      return "function" == typeof i
                        ? t.call(i)
                        : Object.prototype.toString.call(i);
                    if (this === Promise) {
                      const r = e[n];
                      if (r) return t.call(r);
                    }
                    if (this === Error) {
                      const r = e[a];
                      if (r) return t.call(r);
                    }
                  }
                  return t.call(this);
                };
              (i[r] = t), (Function.prototype.toString = i);
              const s = Object.prototype.toString;
              Object.prototype.toString = function () {
                return "function" == typeof Promise && this instanceof Promise
                  ? "[object Promise]"
                  : s.call(this);
              };
            });
          let F = !1;
          if ("undefined" != typeof window)
            try {
              const e = Object.defineProperty({}, "passive", {
                get: function () {
                  F = !0;
                },
              });
              window.addEventListener("test", e, e),
                window.removeEventListener("test", e, e);
            } catch (e) {
              F = !1;
            }
          const G = { useG: !0 },
            V = {},
            Z = {},
            H = new RegExp("^" + _ + "(\\w+)(true|false)$"),
            W = v("propagationStopped");
          function z(e, t) {
            const r = (t ? t(e) : e) + h,
              n = (t ? t(e) : e) + p,
              a = _ + r,
              i = _ + n;
            (V[e] = {}), (V[e].false = a), (V[e].true = i);
          }
          function K(e, t, r, n) {
            const a = (n && n.add) || c,
              s = (n && n.rm) || d,
              o = (n && n.listeners) || "eventListeners",
              u = (n && n.rmAll) || "removeAllListeners",
              l = v(a),
              f = "." + a + ":",
              m = function (e, t, r) {
                if (e.isRemoved) return;
                const n = e.callback;
                let a;
                "object" == typeof n &&
                  n.handleEvent &&
                  ((e.callback = (e) => n.handleEvent(e)),
                  (e.originalDelegate = n));
                try {
                  e.invoke(e, t, [r]);
                } catch (e) {
                  a = e;
                }
                const i = e.options;
                if (i && "object" == typeof i && i.once) {
                  const n = e.originalDelegate
                    ? e.originalDelegate
                    : e.callback;
                  t[s].call(t, r.type, n, i);
                }
                return a;
              };
            function g(r, n, a) {
              if (!(n = n || e.event)) return;
              const i = r || n.target || e,
                s = i[V[n.type][a ? p : h]];
              if (s) {
                const e = [];
                if (1 === s.length) {
                  const t = m(s[0], i, n);
                  t && e.push(t);
                } else {
                  const t = s.slice();
                  for (let r = 0; r < t.length && (!n || !0 !== n[W]); r++) {
                    const a = m(t[r], i, n);
                    a && e.push(a);
                  }
                }
                if (1 === e.length) throw e[0];
                for (let r = 0; r < e.length; r++) {
                  const n = e[r];
                  t.nativeScheduleMicroTask(() => {
                    throw n;
                  });
                }
              }
            }
            const y = function (e) {
                return g(this, e, !1);
              },
              b = function (e) {
                return g(this, e, !0);
              };
            function x(t, r) {
              if (!t) return !1;
              let n = !0;
              r && void 0 !== r.useG && (n = r.useG);
              const c = r && r.vh;
              let d = !0;
              r && void 0 !== r.chkDup && (d = r.chkDup);
              let m = !1;
              r && void 0 !== r.rt && (m = r.rt);
              let g = t;
              for (; g && !g.hasOwnProperty(a); ) g = i(g);
              if ((!g && t[a] && (g = t), !g)) return !1;
              if (g[l]) return !1;
              const x = r && r.eventNameToString,
                E = {},
                T = (g[l] = g[a]),
                w = (g[v(s)] = g[s]),
                R = (g[v(o)] = g[o]),
                P = (g[v(u)] = g[u]);
              let O;
              function k(e, t) {
                return !F && "object" == typeof e && e
                  ? !!e.capture
                  : F && t
                  ? "boolean" == typeof e
                    ? { capture: e, passive: !0 }
                    : e
                    ? "object" == typeof e && !1 !== e.passive
                      ? Object.assign(Object.assign({}, e), { passive: !0 })
                      : e
                    : { passive: !0 }
                  : e;
              }
              r && r.prepend && (O = g[v(r.prepend)] = g[r.prepend]);
              const C = function (e) {
                  return O.call(E.target, E.eventName, e.invoke, E.options);
                },
                I = n
                  ? function (e) {
                      if (!E.isExisting)
                        return T.call(
                          E.target,
                          E.eventName,
                          E.capture ? b : y,
                          E.options
                        );
                    }
                  : function (e) {
                      return T.call(E.target, E.eventName, e.invoke, E.options);
                    },
                L = n
                  ? function (e) {
                      if (!e.isRemoved) {
                        const t = V[e.eventName];
                        let r;
                        t && (r = t[e.capture ? p : h]);
                        const n = r && e.target[r];
                        if (n)
                          for (let t = 0; t < n.length; t++) {
                            if (n[t] === e) {
                              n.splice(t, 1),
                                (e.isRemoved = !0),
                                0 === n.length &&
                                  ((e.allRemoved = !0), (e.target[r] = null));
                              break;
                            }
                          }
                      }
                      if (e.allRemoved)
                        return w.call(
                          e.target,
                          e.eventName,
                          e.capture ? b : y,
                          e.options
                        );
                    }
                  : function (e) {
                      return w.call(e.target, e.eventName, e.invoke, e.options);
                    },
                D =
                  r && r.diff
                    ? r.diff
                    : function (e, t) {
                        const r = typeof t;
                        return (
                          ("function" === r && e.callback === t) ||
                          ("object" === r && e.originalDelegate === t)
                        );
                      },
                A = Zone[v("UNPATCHED_EVENTS")],
                N = e[v("PASSIVE_EVENTS")],
                j = function (t, a, i, s, o = !1, u = !1) {
                  return function () {
                    const l = this || e;
                    let _ = arguments[0];
                    r && r.transferEventName && (_ = r.transferEventName(_));
                    let f = arguments[1];
                    if (!f) return t.apply(this, arguments);
                    if (S && "uncaughtException" === _)
                      return t.apply(this, arguments);
                    let m = !1;
                    if ("function" != typeof f) {
                      if (!f.handleEvent) return t.apply(this, arguments);
                      m = !0;
                    }
                    if (c && !c(t, f, l, arguments)) return;
                    const v = F && !!N && -1 !== N.indexOf(_),
                      g = k(arguments[2], v);
                    if (A)
                      for (let e = 0; e < A.length; e++)
                        if (_ === A[e])
                          return v
                            ? t.call(l, _, f, g)
                            : t.apply(this, arguments);
                    const y = !!g && ("boolean" == typeof g || g.capture),
                      b = !(!g || "object" != typeof g) && g.once,
                      T = Zone.current;
                    let w = V[_];
                    w || (z(_, x), (w = V[_]));
                    const R = w[y ? p : h];
                    let P,
                      O = l[R],
                      C = !1;
                    if (O) {
                      if (((C = !0), d))
                        for (let e = 0; e < O.length; e++)
                          if (D(O[e], f)) return;
                    } else O = l[R] = [];
                    const I = l.constructor.name,
                      L = Z[I];
                    L && (P = L[_]),
                      P || (P = I + a + (x ? x(_) : _)),
                      (E.options = g),
                      b && (E.options.once = !1),
                      (E.target = l),
                      (E.capture = y),
                      (E.eventName = _),
                      (E.isExisting = C);
                    const M = n ? G : void 0;
                    M && (M.taskData = E);
                    const j = T.scheduleEventTask(P, f, M, i, s);
                    return (
                      (E.target = null),
                      M && (M.taskData = null),
                      b && (g.once = !0),
                      (F || "boolean" != typeof j.options) && (j.options = g),
                      (j.target = l),
                      (j.capture = y),
                      (j.eventName = _),
                      m && (j.originalDelegate = f),
                      u ? O.unshift(j) : O.push(j),
                      o ? l : void 0
                    );
                  };
                };
              return (
                (g[a] = j(T, f, I, L, m)),
                O &&
                  (g.prependListener = j(O, ".prependListener:", C, L, m, !0)),
                (g[s] = function () {
                  const t = this || e;
                  let n = arguments[0];
                  r && r.transferEventName && (n = r.transferEventName(n));
                  const a = arguments[2],
                    i = !!a && ("boolean" == typeof a || a.capture),
                    s = arguments[1];
                  if (!s) return w.apply(this, arguments);
                  if (c && !c(w, s, t, arguments)) return;
                  const o = V[n];
                  let d;
                  o && (d = o[i ? p : h]);
                  const u = d && t[d];
                  if (u)
                    for (let e = 0; e < u.length; e++) {
                      const r = u[e];
                      if (D(r, s)) {
                        if (
                          (u.splice(e, 1),
                          (r.isRemoved = !0),
                          0 === u.length &&
                            ((r.allRemoved = !0),
                            (t[d] = null),
                            "string" == typeof n))
                        ) {
                          t[_ + "ON_PROPERTY" + n] = null;
                        }
                        return r.zone.cancelTask(r), m ? t : void 0;
                      }
                    }
                  return w.apply(this, arguments);
                }),
                (g[o] = function () {
                  const t = this || e;
                  let n = arguments[0];
                  r && r.transferEventName && (n = r.transferEventName(n));
                  const a = [],
                    i = X(t, x ? x(n) : n);
                  for (let e = 0; e < i.length; e++) {
                    const t = i[e];
                    let r = t.originalDelegate
                      ? t.originalDelegate
                      : t.callback;
                    a.push(r);
                  }
                  return a;
                }),
                (g[u] = function () {
                  const t = this || e;
                  let n = arguments[0];
                  if (n) {
                    r && r.transferEventName && (n = r.transferEventName(n));
                    const e = V[n];
                    if (e) {
                      const r = e.false,
                        a = e.true,
                        i = t[r],
                        o = t[a];
                      if (i) {
                        const e = i.slice();
                        for (let t = 0; t < e.length; t++) {
                          const r = e[t];
                          let a = r.originalDelegate
                            ? r.originalDelegate
                            : r.callback;
                          this[s].call(this, n, a, r.options);
                        }
                      }
                      if (o) {
                        const e = o.slice();
                        for (let t = 0; t < e.length; t++) {
                          const r = e[t];
                          let a = r.originalDelegate
                            ? r.originalDelegate
                            : r.callback;
                          this[s].call(this, n, a, r.options);
                        }
                      }
                    }
                  } else {
                    const e = Object.keys(t);
                    for (let t = 0; t < e.length; t++) {
                      const r = e[t],
                        n = H.exec(r);
                      let a = n && n[1];
                      a && "removeListener" !== a && this[u].call(this, a);
                    }
                    this[u].call(this, "removeListener");
                  }
                  if (m) return this;
                }),
                M(g[a], T),
                M(g[s], w),
                P && M(g[u], P),
                R && M(g[o], R),
                !0
              );
            }
            let E = [];
            for (let e = 0; e < r.length; e++) E[e] = x(r[e], n);
            return E;
          }
          function X(e, t) {
            if (!t) {
              const r = [];
              for (let n in e) {
                const a = H.exec(n);
                let i = a && a[1];
                if (i && (!t || i === t)) {
                  const t = e[n];
                  if (t) for (let e = 0; e < t.length; e++) r.push(t[e]);
                }
              }
              return r;
            }
            let r = V[t];
            r || (z(t), (r = V[t]));
            const n = e[r.false],
              a = e[r.true];
            return n ? (a ? n.concat(a) : n.slice()) : a ? a.slice() : [];
          }
          function q(e, t) {
            const r = e.Event;
            r &&
              r.prototype &&
              t.patchMethod(
                r.prototype,
                "stopImmediatePropagation",
                (e) =>
                  function (t, r) {
                    (t[W] = !0), e && e.apply(t, r);
                  }
              );
          }
          function $(e, t, r, n, a) {
            const i = Zone.__symbol__(n);
            if (t[i]) return;
            const s = (t[i] = t[n]);
            (t[n] = function (i, o, c) {
              return (
                o &&
                  o.prototype &&
                  a.forEach(function (t) {
                    const a = `${r}.${n}::` + t,
                      i = o.prototype;
                    try {
                      if (i.hasOwnProperty(t)) {
                        const r = e.ObjectGetOwnPropertyDescriptor(i, t);
                        r && r.value
                          ? ((r.value = e.wrapWithCurrentZone(r.value, a)),
                            e._redefineProperty(o.prototype, t, r))
                          : i[t] && (i[t] = e.wrapWithCurrentZone(i[t], a));
                      } else i[t] && (i[t] = e.wrapWithCurrentZone(i[t], a));
                    } catch (e) {}
                  }),
                s.call(t, i, o, c)
              );
            }),
              e.attachOriginToPatched(t[n], s);
          }
          function J(e, t, r) {
            if (!r || 0 === r.length) return t;
            const n = r.filter((t) => t.target === e);
            if (!n || 0 === n.length) return t;
            const a = n[0].ignoreProperties;
            return t.filter((e) => -1 === a.indexOf(e));
          }
          function Y(e, t, r, n) {
            if (!e) return;
            C(e, J(e, t, r), n);
          }
          function Q(e) {
            return Object.getOwnPropertyNames(e)
              .filter((e) => e.startsWith("on") && e.length > 2)
              .map((e) => e.substring(2));
          }
          function ee(e, t) {
            if (S && !R) return;
            if (Zone[e.symbol("patchEvents")]) return;
            const r = t.__Zone_ignore_on_properties;
            let n = [];
            if (w) {
              const e = window;
              n = n.concat([
                "Document",
                "SVGElement",
                "Element",
                "HTMLElement",
                "HTMLBodyElement",
                "HTMLMediaElement",
                "HTMLFrameSetElement",
                "HTMLFrameElement",
                "HTMLIFrameElement",
                "HTMLMarqueeElement",
                "Worker",
              ]);
              const t = B() ? [{ target: e, ignoreProperties: ["error"] }] : [];
              Y(e, Q(e), r ? r.concat(t) : r, i(e));
            }
            n = n.concat([
              "XMLHttpRequest",
              "XMLHttpRequestEventTarget",
              "IDBIndex",
              "IDBRequest",
              "IDBOpenDBRequest",
              "IDBDatabase",
              "IDBTransaction",
              "IDBCursor",
              "WebSocket",
            ]);
            for (let e = 0; e < n.length; e++) {
              const a = t[n[e]];
              a && a.prototype && Y(a.prototype, Q(a.prototype), r);
            }
          }
          Zone.__load_patch("util", (e, t, r) => {
            const i = Q(e);
            (r.patchOnProperties = C),
              (r.patchMethod = D),
              (r.bindArguments = x),
              (r.patchMacroTask = A);
            const u = t.__symbol__("BLACK_LISTED_EVENTS"),
              l = t.__symbol__("UNPATCHED_EVENTS");
            e[l] && (e[u] = e[l]),
              e[u] && (t[u] = t[l] = e[u]),
              (r.patchEventPrototype = q),
              (r.patchEventTarget = K),
              (r.isIEOrEdge = U),
              (r.ObjectDefineProperty = a),
              (r.ObjectGetOwnPropertyDescriptor = n),
              (r.ObjectCreate = s),
              (r.ArraySlice = o),
              (r.patchClass = L),
              (r.wrapWithCurrentZone = f),
              (r.filterProperties = J),
              (r.attachOriginToPatched = M),
              (r._redefineProperty = Object.defineProperty),
              (r.patchCallbacks = $),
              (r.getGlobalObjects = () => ({
                globalSources: Z,
                zoneSymbolEventNames: V,
                eventNames: i,
                isBrowser: w,
                isMix: R,
                isNode: S,
                TRUE_STR: p,
                FALSE_STR: h,
                ZONE_SYMBOL_PREFIX: _,
                ADD_EVENT_LISTENER_STR: c,
                REMOVE_EVENT_LISTENER_STR: d,
              }));
          });
          const te = v("zoneTask");
          function re(e, t, r, n) {
            let a = null,
              i = null;
            r += n;
            const s = {};
            function o(t) {
              const r = t.data;
              return (
                (r.args[0] = function () {
                  return t.invoke.apply(this, arguments);
                }),
                (r.handleId = a.apply(e, r.args)),
                t
              );
            }
            function c(t) {
              return i.call(e, t.data.handleId);
            }
            (a = D(
              e,
              (t += n),
              (r) =>
                function (a, i) {
                  if ("function" == typeof i[0]) {
                    const e = {
                        isPeriodic: "Interval" === n,
                        delay:
                          "Timeout" === n || "Interval" === n
                            ? i[1] || 0
                            : void 0,
                        args: i,
                      },
                      r = i[0];
                    i[0] = function () {
                      try {
                        return r.apply(this, arguments);
                      } finally {
                        e.isPeriodic ||
                          ("number" == typeof e.handleId
                            ? delete s[e.handleId]
                            : e.handleId && (e.handleId[te] = null));
                      }
                    };
                    const a = m(t, i[0], e, o, c);
                    if (!a) return a;
                    const d = a.data.handleId;
                    return (
                      "number" == typeof d ? (s[d] = a) : d && (d[te] = a),
                      d &&
                        d.ref &&
                        d.unref &&
                        "function" == typeof d.ref &&
                        "function" == typeof d.unref &&
                        ((a.ref = d.ref.bind(d)), (a.unref = d.unref.bind(d))),
                      "number" == typeof d || d ? d : a
                    );
                  }
                  return r.apply(e, i);
                }
            )),
              (i = D(
                e,
                r,
                (t) =>
                  function (r, n) {
                    const a = n[0];
                    let i;
                    "number" == typeof a
                      ? (i = s[a])
                      : ((i = a && a[te]), i || (i = a)),
                      i && "string" == typeof i.type
                        ? "notScheduled" !== i.state &&
                          ((i.cancelFn && i.data.isPeriodic) ||
                            0 === i.runCount) &&
                          ("number" == typeof a
                            ? delete s[a]
                            : a && (a[te] = null),
                          i.zone.cancelTask(i))
                        : t.apply(e, n);
                  }
              ));
          }
          function ne(e, t) {
            if (Zone[t.symbol("patchEventTarget")]) return;
            const {
              eventNames: r,
              zoneSymbolEventNames: n,
              TRUE_STR: a,
              FALSE_STR: i,
              ZONE_SYMBOL_PREFIX: s,
            } = t.getGlobalObjects();
            for (let e = 0; e < r.length; e++) {
              const t = r[e],
                o = s + (t + i),
                c = s + (t + a);
              (n[t] = {}), (n[t][i] = o), (n[t][a] = c);
            }
            const o = e.EventTarget;
            return o && o.prototype
              ? (t.patchEventTarget(e, t, [o && o.prototype]), !0)
              : void 0;
          }
          Zone.__load_patch("legacy", (e) => {
            const t = e[Zone.__symbol__("legacyPatch")];
            t && t();
          }),
            Zone.__load_patch("queueMicrotask", (e, t, r) => {
              r.patchMethod(
                e,
                "queueMicrotask",
                (e) =>
                  function (e, r) {
                    t.current.scheduleMicroTask("queueMicrotask", r[0]);
                  }
              );
            }),
            Zone.__load_patch("timers", (e) => {
              const t = "set",
                r = "clear";
              re(e, t, r, "Timeout"),
                re(e, t, r, "Interval"),
                re(e, t, r, "Immediate");
            }),
            Zone.__load_patch("requestAnimationFrame", (e) => {
              re(e, "request", "cancel", "AnimationFrame"),
                re(e, "mozRequest", "mozCancel", "AnimationFrame"),
                re(e, "webkitRequest", "webkitCancel", "AnimationFrame");
            }),
            Zone.__load_patch("blocking", (e, t) => {
              const r = ["alert", "prompt", "confirm"];
              for (let n = 0; n < r.length; n++) {
                D(
                  e,
                  r[n],
                  (r, n, a) =>
                    function (n, i) {
                      return t.current.run(r, e, i, a);
                    }
                );
              }
            }),
            Zone.__load_patch("EventTarget", (e, t, r) => {
              !(function (e, t) {
                t.patchEventPrototype(e, t);
              })(e, r),
                ne(e, r);
              const n = e.XMLHttpRequestEventTarget;
              n && n.prototype && r.patchEventTarget(e, r, [n.prototype]);
            }),
            Zone.__load_patch("MutationObserver", (e, t, r) => {
              L("MutationObserver"), L("WebKitMutationObserver");
            }),
            Zone.__load_patch("IntersectionObserver", (e, t, r) => {
              L("IntersectionObserver");
            }),
            Zone.__load_patch("FileReader", (e, t, r) => {
              L("FileReader");
            }),
            Zone.__load_patch("on_property", (e, t, r) => {
              ee(r, e);
            }),
            Zone.__load_patch("customElements", (e, t, r) => {
              !(function (e, t) {
                const { isBrowser: r, isMix: n } = t.getGlobalObjects();
                if ((!r && !n) || !e.customElements || !("customElements" in e))
                  return;
                t.patchCallbacks(
                  t,
                  e.customElements,
                  "customElements",
                  "define",
                  [
                    "connectedCallback",
                    "disconnectedCallback",
                    "adoptedCallback",
                    "attributeChangedCallback",
                  ]
                );
              })(e, r);
            }),
            Zone.__load_patch("XHR", (e, t) => {
              !(function (e) {
                const c = e.XMLHttpRequest;
                if (!c) return;
                const d = c.prototype;
                let p = d[u],
                  h = d[l];
                if (!p) {
                  const t = e.XMLHttpRequestEventTarget;
                  if (t) {
                    const e = t.prototype;
                    (p = e[u]), (h = e[l]);
                  }
                }
                const _ = "readystatechange",
                  f = "scheduled";
                function g(e) {
                  const n = e.data,
                    s = n.target;
                  (s[i] = !1), (s[o] = !1);
                  const c = s[a];
                  p || ((p = s[u]), (h = s[l])), c && h.call(s, _, c);
                  const d = (s[a] = () => {
                    if (s.readyState === s.DONE)
                      if (!n.aborted && s[i] && e.state === f) {
                        const r = s[t.__symbol__("loadfalse")];
                        if (0 !== s.status && r && r.length > 0) {
                          const a = e.invoke;
                          (e.invoke = function () {
                            const r = s[t.__symbol__("loadfalse")];
                            for (let t = 0; t < r.length; t++)
                              r[t] === e && r.splice(t, 1);
                            n.aborted || e.state !== f || a.call(e);
                          }),
                            r.push(e);
                        } else e.invoke();
                      } else n.aborted || !1 !== s[i] || (s[o] = !0);
                  });
                  p.call(s, _, d);
                  return s[r] || (s[r] = e), S.apply(s, n.args), (s[i] = !0), e;
                }
                function y() {}
                function b(e) {
                  const t = e.data;
                  return (t.aborted = !0), w.apply(t.target, t.args);
                }
                const x = D(
                    d,
                    "open",
                    () =>
                      function (e, t) {
                        return (e[n] = 0 == t[2]), (e[s] = t[1]), x.apply(e, t);
                      }
                  ),
                  E = v("fetchTaskAborting"),
                  T = v("fetchTaskScheduling"),
                  S = D(
                    d,
                    "send",
                    () =>
                      function (e, r) {
                        if (!0 === t.current[T]) return S.apply(e, r);
                        if (e[n]) return S.apply(e, r);
                        {
                          const t = {
                              target: e,
                              url: e[s],
                              isPeriodic: !1,
                              args: r,
                              aborted: !1,
                            },
                            n = m("XMLHttpRequest.send", y, t, g, b);
                          e &&
                            !0 === e[o] &&
                            !t.aborted &&
                            n.state === f &&
                            n.invoke();
                        }
                      }
                  ),
                  w = D(
                    d,
                    "abort",
                    () =>
                      function (e, n) {
                        const a = e[r];
                        if (a && "string" == typeof a.type) {
                          if (null == a.cancelFn || (a.data && a.data.aborted))
                            return;
                          a.zone.cancelTask(a);
                        } else if (!0 === t.current[E]) return w.apply(e, n);
                      }
                  );
              })(e);
              const r = v("xhrTask"),
                n = v("xhrSync"),
                a = v("xhrListener"),
                i = v("xhrScheduled"),
                s = v("xhrURL"),
                o = v("xhrErrorBeforeScheduled");
            }),
            Zone.__load_patch("geolocation", (e) => {
              e.navigator &&
                e.navigator.geolocation &&
                (function (e, t) {
                  const r = e.constructor.name;
                  for (let a = 0; a < t.length; a++) {
                    const i = t[a],
                      s = e[i];
                    if (s) {
                      if (!E(n(e, i))) continue;
                      e[i] = ((e) => {
                        const t = function () {
                          return e.apply(this, x(arguments, r + "." + i));
                        };
                        return M(t, e), t;
                      })(s);
                    }
                  }
                })(e.navigator.geolocation, [
                  "getCurrentPosition",
                  "watchPosition",
                ]);
            }),
            Zone.__load_patch("PromiseRejectionEvent", (e, t) => {
              function r(t) {
                return function (r) {
                  X(e, t).forEach((n) => {
                    const a = e.PromiseRejectionEvent;
                    if (a) {
                      const e = new a(t, {
                        promise: r.promise,
                        reason: r.rejection,
                      });
                      n.invoke(e);
                    }
                  });
                };
              }
              e.PromiseRejectionEvent &&
                ((t[v("unhandledPromiseRejectionHandler")] =
                  r("unhandledrejection")),
                (t[v("rejectionHandledHandler")] = r("rejectionhandled")));
            });
        },
        2480: () => {},
        907: (e, t, r) => {
          "use strict";
          function n(e, t) {
            (null == t || t > e.length) && (t = e.length);
            for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
            return n;
          }
          r.d(t, { Z: () => n });
        },
        5861: (e, t, r) => {
          "use strict";
          function n(e, t, r, n, a, i, s) {
            try {
              var o = e[i](s),
                c = o.value;
            } catch (e) {
              return void r(e);
            }
            o.done ? t(c) : Promise.resolve(c).then(n, a);
          }
          function a(e) {
            return function () {
              var t = this,
                r = arguments;
              return new Promise(function (a, i) {
                var s = e.apply(t, r);
                function o(e) {
                  n(s, a, i, o, c, "next", e);
                }
                function c(e) {
                  n(s, a, i, o, c, "throw", e);
                }
                o(void 0);
              });
            };
          }
          r.d(t, { Z: () => a });
        },
        5671: (e, t, r) => {
          "use strict";
          function n(e, t) {
            if (!(e instanceof t))
              throw new TypeError("Cannot call a class as a function");
          }
          r.d(t, { Z: () => n });
        },
        3144: (e, t, r) => {
          "use strict";
          function n(e, t) {
            for (var r = 0; r < t.length; r++) {
              var n = t[r];
              (n.enumerable = n.enumerable || !1),
                (n.configurable = !0),
                "value" in n && (n.writable = !0),
                Object.defineProperty(e, n.key, n);
            }
          }
          function a(e, t, r) {
            return (
              t && n(e.prototype, t),
              r && n(e, r),
              Object.defineProperty(e, "prototype", { writable: !1 }),
              e
            );
          }
          r.d(t, { Z: () => a });
        },
        4942: (e, t, r) => {
          "use strict";
          function n(e, t, r) {
            return (
              t in e
                ? Object.defineProperty(e, t, {
                    value: r,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                  })
                : (e[t] = r),
              e
            );
          }
          r.d(t, { Z: () => n });
        },
        885: (e, t, r) => {
          "use strict";
          r.d(t, { Z: () => a });
          var n = r(181);
          function a(e, t) {
            return (
              (function (e) {
                if (Array.isArray(e)) return e;
              })(e) ||
              (function (e, t) {
                var r =
                  null == e
                    ? null
                    : ("undefined" != typeof Symbol && e[Symbol.iterator]) ||
                      e["@@iterator"];
                if (null != r) {
                  var n,
                    a,
                    i = [],
                    s = !0,
                    o = !1;
                  try {
                    for (
                      r = r.call(e);
                      !(s = (n = r.next()).done) &&
                      (i.push(n.value), !t || i.length !== t);
                      s = !0
                    );
                  } catch (e) {
                    (o = !0), (a = e);
                  } finally {
                    try {
                      s || null == r.return || r.return();
                    } finally {
                      if (o) throw a;
                    }
                  }
                  return i;
                }
              })(e, t) ||
              (0, n.Z)(e, t) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        2982: (e, t, r) => {
          "use strict";
          r.d(t, { Z: () => i });
          var n = r(907);
          var a = r(181);
          function i(e) {
            return (
              (function (e) {
                if (Array.isArray(e)) return (0, n.Z)(e);
              })(e) ||
              (function (e) {
                if (
                  ("undefined" != typeof Symbol &&
                    null != e[Symbol.iterator]) ||
                  null != e["@@iterator"]
                )
                  return Array.from(e);
              })(e) ||
              (0, a.Z)(e) ||
              (function () {
                throw new TypeError(
                  "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                );
              })()
            );
          }
        },
        1002: (e, t, r) => {
          "use strict";
          function n(e) {
            return (
              (n =
                "function" == typeof Symbol &&
                "symbol" == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        "function" == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? "symbol"
                        : typeof e;
                    }),
              n(e)
            );
          }
          r.d(t, { Z: () => n });
        },
        181: (e, t, r) => {
          "use strict";
          r.d(t, { Z: () => a });
          var n = r(907);
          function a(e, t) {
            if (e) {
              if ("string" == typeof e) return (0, n.Z)(e, t);
              var r = Object.prototype.toString.call(e).slice(8, -1);
              return (
                "Object" === r && e.constructor && (r = e.constructor.name),
                "Map" === r || "Set" === r
                  ? Array.from(e)
                  : "Arguments" === r ||
                    /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                  ? (0, n.Z)(e, t)
                  : void 0
              );
            }
          }
        },
        7002: (e) => {
          "use strict";
          e.exports = JSON.parse(
            '{"name":"protoo-client","version":"4.0.6","description":"protoo JavaScript client module","author":"Iñaki Baz Castillo <ibc@aliax.net>","homepage":"https://protoo.versatica.com","license":"MIT","repository":{"type":"git","url":"https://github.com/ibc/protoo.git"},"main":"lib/index.js","keywords":["nodejs","browser","websocket"],"engines":{"node":">=8.0.0"},"scripts":{"lint":"eslint -c .eslintrc.js lib"},"dependencies":{"debug":"^4.3.1","events":"^3.2.0","retry":"^0.12.0"},"devDependencies":{"eslint":"^5.16.0"},"optionalDependencies":{"websocket":"^1.0.33"}}'
          );
        },
        9794: (e) => {
          "use strict";
          e.exports = { version: "1.0.34" };
        },
      },
      t = {};
    function r(n) {
      var a = t[n];
      if (void 0 !== a) return a.exports;
      var i = (t[n] = { exports: {} });
      return e[n].call(i.exports, i, i.exports, r), i.exports;
    }
    return (
      (r.n = (e) => {
        var t = e && e.__esModule ? () => e.default : () => e;
        return r.d(t, { a: t }), t;
      }),
      (r.d = (e, t) => {
        for (var n in t)
          r.o(t, n) &&
            !r.o(e, n) &&
            Object.defineProperty(e, n, { enumerable: !0, get: t[n] });
      }),
      (r.g = (function () {
        if ("object" == typeof globalThis) return globalThis;
        try {
          return this || new Function("return this")();
        } catch (e) {
          if ("object" == typeof window) return window;
        }
      })()),
      (r.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
      (r.r = (e) => {
        "undefined" != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }),
          Object.defineProperty(e, "__esModule", { value: !0 });
      }),
      r(8508)
    );
  })()
);
